package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar argin720 = io.scalarInput("argin720", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
// DFEVar Sym(49) = int3.cast(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT))
DFEVar void821_done = dfeBool().newInstance(this);
DFEVar void819_done = dfeBool().newInstance(this);
DFEVar void819_en = dfeBool().newInstance(this);
DFEVar metapipe813_done = dfeBool().newInstance(this);
DFEVar metapipe813_en = dfeBool().newInstance(this);
DFEVar void817_done = dfeBool().newInstance(this);
DFEVar void817_en = dfeBool().newInstance(this);
/* Reg_new { */
DelayLib reg763_1_lib = new DelayLib(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0));
DFEVar reg763_1 = reg763_1_lib.read();
DFEVar reg763_1_delayed = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Reg_new } */
DFEVar void781_done = dfeBool().newInstance(this);
DFEVar void781_en = dfeBool().newInstance(this);
DFEVar pipe805_done = dfeBool().newInstance(this);
DFEVar pipe805_en = dfeBool().newInstance(this);
DFEVar void811_done = dfeBool().newInstance(this);
DFEVar void811_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM769_0 = new NBufKernelLib(this, "BRAM769_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 8, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 8 /*writepar, readpar*/);
/* } Bram_new */
DFEVar void771_done = dfeBool().newInstance(this);
DFEVar void771_en = dfeBool().newInstance(this);
DFEVar pipe779_done = dfeBool().newInstance(this);
DFEVar pipe779_en = dfeBool().newInstance(this);
DFEVar FIFO770_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe779_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain773_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg782_1_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg782_1", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar pipe805_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain784_done = dfeBool().newInstance(this);
DFEVar void811_rst_done = dfeBool().newInstance(this);
DFEVar void817_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar FixedPoint723 = argin720; // reg read
DFEVar FixedPoint764 = argin720; // reg read
DFEVar const0_FixedPoint50 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const96_FixedPoint488 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const1_FixedPoint63 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const512_FixedPoint72 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
}
