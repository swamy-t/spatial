package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmInput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmOutput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateEnum;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.kernel.KernelStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;

class MemoryCmdSM extends KernelStateMachine {

  // States
  enum States {
    INIT,
    RUN,
    DONE,
    W
  }

  // State IO
  private final DFEsmOutput sm_done;
  private final DFEsmInput sm_en;

  private final DFEsmOutput memStart;
  private final DFEsmInput memDone;

  // State storage
  private final DFEsmStateEnum<States> stateFF;

  private boolean dbg = false;
  public MemoryCmdSM(KernelLib owner) {
    super(owner);

    // Declare all types required to wire the state machine together
    DFEsmValueType counterType = dfeUInt(32);
    DFEsmValueType wireType = dfeBool();
    // Define state machine IO
    sm_done = io.output("sm_done", wireType);
    sm_en = io.input("sm_en", wireType);


    memStart = io.output("memStart", wireType);
    memDone = io.input("memDone", wireType);

    // Define state storage elements and initial state
    stateFF = state.enumerated(States.class, States.INIT);
  }

  @Override
  protected void nextState() {
    IF(sm_en) {
      SWITCH(stateFF) {
        CASE (States.INIT) {
          if (dbg) {
            debug.simPrintf("MemoryCmdSM INIT\n");
          }

          stateFF.next <== States.RUN;
        }
        CASE (States.RUN) {
          if (dbg) {
            debug.simPrintf("MemoryCmdSM RUN\n");
          }
          IF (memDone) {
            stateFF.next <== States.DONE;
          }
        }
        CASE (States.DONE) {
          if (dbg) {
            debug.simPrintf("MemoryCmdSM DONE\n");
          }
          stateFF.next <== States.W;
        }
        CASE (States.W) {
          if (dbg) {
            debug.simPrintf("MemoryCmdSM W\n");
          }
          stateFF.next <== States.W;
        }
      }
    } ELSE {
      stateFF.next <== States.INIT;
    }
  }


  @Override
  protected void outputFunction() {
    sm_done <== 0;
    memStart <== 0;

    IF (sm_en) {
      SWITCH(stateFF) {
        CASE(States.RUN) {
          memStart <== 1;
        }
        CASE(States.DONE) {
          memStart <== 0;
          sm_done <== 1;
        }
      }
    }
  }
}
