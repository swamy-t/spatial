/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

int DRAM708 = 1048576;










/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint53 = ConstFixPt(0,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$Signed,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$B32,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argout747 = Reflect(Argout_new(Sym(53)),Summary(mutable),List())
// Dep: const10_FixedPoint55 = ConstFixPt(10,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$Signed,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$B32,DeviceMemcpy$@74677ac4.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: Bit56 = ConstBit(true)
DFEVar Bit56 = constant.var( true );
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void752_en = top_en;
top_done <== void752_done;
// Hwblock: childrenOf(void752) = List(Sym(750))
/* void752_SeqSM void752 { */
SMIO void752_sm = addStateMachine("void752_sm", new void752_SeqSM(this));
    void752_sm.connectInput("sm_en", void752_en);
    void752_done <== stream.offset(void752_sm.getOutput("sm_done"),-1);
void752_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void752_rst_en = void752_sm.getOutput("rst_en");
void752_sm.connectInput("s0_done", void750_done);
void750_en <== void752_sm.getOutput("s0_en");
DFEVar void752_datapath_en = void752_en & ~void752_rst_en;
DFEVar void752_ctr_en = void752_datapath_en;
/* } void752_SeqSM void752 */
// Unit pipe writtenIn(void750) = List(Sym(747))
//   argout747 = Reflect(Argout_new(Sym(53)),Summary(mutable),List()), isAccum(argout747) = false
/* PipeSM void750 { */
OffsetExpr void750_offset = stream.makeOffsetAutoLoop("void750_offset");
SMIO void750_sm = addStateMachine("void750_sm", new PipeSM(this, 1));
    void750_sm.connectInput("sm_en", void750_en);
    void750_done <== stream.offset(void750_sm.getOutput("sm_done"),-1-void750_offset);
DFEVar void750_rst_en = void750_sm.getOutput("rst_en");
void750_sm.connectInput("rst_done", void750_rst_done);
void750_rst_done <== stream.offset(void750_rst_en, -void750_offset-1);
void750_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void750_sm.connectInput("ctr_done", stream.offset(void750_sm.getOutput("ctr_en"), -1));
DFEVar void750_datapath_en = void750_en & ~void750_rst_en;
DFEVar void750_ctr_en = void750_datapath_en;
/* } PipeSM void750 */
/* Block void750 Unitpipe { */
{
/* Reg_write { */
io.scalarOutput("argout747", const10_FixedPoint55, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@3589c3ef, numDuplicates = 1 */
}
/* } Block void750 Unitpipe */

















// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
