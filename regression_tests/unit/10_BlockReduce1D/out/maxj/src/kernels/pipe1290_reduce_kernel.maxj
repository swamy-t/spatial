package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class pipe1290_reduce_kernel extends KernelLib {
void common(DFEVector<DFEVar> Vector1279,DFEVector<DFEVar> Vector1280 /*1*/ ,
                DFEVar FixedPoint1286 /*2*/ , DFEVar FixedPoint1054,DFEVar FixedPoint1073,DFEVar FixedPoint1261,DFEVar const0_FixedPoint49,DFEVar const96_FixedPoint54 /*3*/) {
// For now, I just regenerate constants because java is being annoying about class extensions


DFEVar FixedPoint1281 = Vector1280[0];
DFEVar FixedPoint1282 = Vector1279[0];
DFEVar Bit1074 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit1074 = FixedPoint1073 < const96_FixedPoint54;
DFEVar Bit1283 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit1283 = FixedPoint1054 < FixedPoint1261;
DFEVar Bit1284 = Bit1283 & Bit1074;
DFEVar FixedPoint1285 = Bit1284 ? FixedPoint1282 : const0_FixedPoint49 ;
FixedPoint1286 <== FixedPoint1285 + FixedPoint1281;
/* Unknown Deff Sym(1287) Vector_from_list(List(Sym(1286))) */
/* Unknown Deff Sym(1288) Par_bram_store(Sym(1046),Sym(1075),Sym(1287)) */
/* Unknown Deff Sym(1289) Reify(Const(()),Summary(mayRead(Sym(1266), Sym(1046)), mstRead(Sym(1266), Sym(1046)), mayWrite(Sym(1046)), mstWrite(Sym(1046))),List(Sym(1279), Sym(1280), Sym(1288))) */
}

pipe1290_reduce_kernel(KernelLib owner , /*1*/ DFEVector<DFEVar> Vector1279,DFEVector<DFEVar> Vector1280 , /*2*/
                DFEVar FixedPoint1286 , /*3*/  DFEVar FixedPoint1054,DFEVar FixedPoint1073,DFEVar FixedPoint1261,DFEVar const0_FixedPoint49,DFEVar const96_FixedPoint54) {
  super(owner);
  common(Vector1279, Vector1280 , FixedPoint1286 , FixedPoint1054,FixedPoint1073,FixedPoint1261,const0_FixedPoint49,const96_FixedPoint54);
}
}
