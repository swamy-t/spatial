#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          41970
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2014-05-20"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Top"
#define MAXFILE_BUILD_DIR  "/local/ssd/home/mattfel/transform_regression_tests_21-24/hyperdsl/spatial/regression_tests/unit/9_Memcpy2D/out/./Top_MAX4848A_DFE_SIM"
#define MAXFILE_BUILD_DATE  20161009
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(CONTAINS_PRINTF, 1)
PARAM(MemCtrlPro_TotalNumStreams, 5)
PARAM(MemCtrlPro_NumRdStreams, 2)
PARAM(MemCtrlPro_NumWrStreams, 3)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 432)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_Parity_Mode, 1)
PARAM(MemCtrlPro_ECC_Mode, 1)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 72)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 3)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 99)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "TopKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, DFEMODEL, MAX4848A)
ENGINE_PARAMETERS(maxFileName, STRING, "Top")
ENGINE_PARAMETERS(target, ENUM, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, BOOL, false)
ENGINE_PARAMETERS(MPPRStartCT, INT, 1)
ENGINE_PARAMETERS(MPPREndCT, INT, 1)
ENGINE_PARAMETERS(MPPRThreads, INT, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, INT, 0)
#endif






#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1045_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1049_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, void1053_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, pipe1063_offset, 2)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1057_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1068_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, pipe1076_offset, 1)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1070_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, void1080_offset, 1)
#endif


#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(TopKernel, Kernel)
MANAGER_NODE(fromcpu, PCIe_From_Host)
MANAGER_NODE(tocpu, PCIe_To_Host)
MANAGER_NODE(addrgen_cmd_fromlmem, AddrGen)
MANAGER_NODE(cmd_fromlmem_0, Memory_Cmd)
MANAGER_NODE(fromlmem, From_Memory)
MANAGER_NODE(addrgen_cmd_tolmem, AddrGen)
MANAGER_NODE(cmd_tolmem_0, Memory_Cmd)
MANAGER_NODE(tolmem, To_Memory)
MANAGER_NODE(cmd_intrStream, Memory_Cmd)
MANAGER_NODE(intrStream, To_Memory)
MANAGER_NODE(cmd_DRAM1003_void1055_in, Memory_Cmd)
MANAGER_NODE(DRAM1003_void1055_in, From_Memory)
MANAGER_NODE(cmd_DRAM1004_void1082_out, Memory_Cmd)
MANAGER_NODE(DRAM1004_void1082_out, To_Memory)
MANAGER_NODE(Stream_16, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_28, DualAspectMux)
MANAGER_NODE(Stream_33, DualAspectReg)
MANAGER_NODE(Stream_21, DualAspectReg)
MANAGER_NODE(Stream_38, StreamPullPushAdapter)
MANAGER_NODE(Stream_50, StreamPullPushAdapter)
MANAGER_NODE(Stream_54, StreamPullPushAdapter)
MANAGER_NODE(Stream_36, Fifo)
MANAGER_NODE(Stream_42, Fifo)
MANAGER_NODE(Stream_46, Fifo)
MANAGER_NODE(Stream_48, Fifo)
MANAGER_NODE(Stream_52, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(TopKernel, DRAM1003_void1055_in, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(TopKernel, DRAM1003_void1055_in_cmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, DRAM1004_void1082_out_cmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, DRAM1004_void1082_out, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(TopKernel, intrCmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, intrStream, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(fromcpu, fromcpu, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(tocpu, tocpu, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_fromlmem_0, cmd_fromlmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(fromlmem, fromlmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_tolmem_0, cmd_tolmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(tolmem, tolmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(cmd_intrStream, cmd_intrStream, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(intrStream, intrStream, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(cmd_DRAM1003_void1055_in, cmd_DRAM1003_void1055_in, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(DRAM1003_void1055_in, DRAM1003_void1055_in, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(cmd_DRAM1004_void1082_out, cmd_DRAM1004_void1082_out, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(DRAM1004_void1082_out, DRAM1004_void1082_out, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_16, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_28, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_28, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_33, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_33, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_21, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_21, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_38, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_38, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_50, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_50, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_54, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_54, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_36, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_36, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_42, input, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_42, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_46, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_46, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_48, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_48, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_52, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_52, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(fromcpu, fromcpu, Stream_36, input, 128)
MANAGER_STREAM(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, cmd_fromlmem_0, cmd_fromlmem_0, 64)
MANAGER_STREAM(fromlmem, fromlmem, Stream_4, input, 1536)
MANAGER_STREAM(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, cmd_tolmem_0, cmd_tolmem_0, 64)
MANAGER_STREAM(TopKernel, intrCmd, cmd_intrStream, cmd_intrStream, 64)
MANAGER_STREAM(TopKernel, intrStream, Stream_52, input, 32)
MANAGER_STREAM(TopKernel, DRAM1003_void1055_in_cmd, cmd_DRAM1003_void1055_in, cmd_DRAM1003_void1055_in, 64)
MANAGER_STREAM(DRAM1003_void1055_in, DRAM1003_void1055_in, Stream_28, input, 1536)
MANAGER_STREAM(TopKernel, DRAM1004_void1082_out_cmd, cmd_DRAM1004_void1082_out, cmd_DRAM1004_void1082_out, 64)
MANAGER_STREAM(TopKernel, DRAM1004_void1082_out, Stream_48, input, 32)
MANAGER_STREAM(Stream_16, output, Stream_38, input, 1536)
MANAGER_STREAM(Stream_4, output, Stream_42, input, 128)
MANAGER_STREAM(Stream_28, output, Stream_46, input, 32)
MANAGER_STREAM(Stream_33, output, Stream_50, input, 1536)
MANAGER_STREAM(Stream_21, output, Stream_54, input, 1536)
MANAGER_STREAM(Stream_38, output, tolmem, tolmem, 1536)
MANAGER_STREAM(Stream_50, output, DRAM1004_void1082_out, DRAM1004_void1082_out, 1536)
MANAGER_STREAM(Stream_54, output, intrStream, intrStream, 1536)
MANAGER_STREAM(Stream_36, output, Stream_16, input, 128)
MANAGER_STREAM(Stream_42, output, tocpu, tocpu, 128)
MANAGER_STREAM(Stream_46, output, TopKernel, DRAM1003_void1055_in, 32)
MANAGER_STREAM(Stream_48, output, Stream_33, input, 32)
MANAGER_STREAM(Stream_52, output, Stream_21, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(TopKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(fromcpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\nengine.TopManager.<init>(MaxJManager.maxj:72)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(tocpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1170)\nengine.TopManager.<init>(MaxJManager.maxj:73)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(cmd_fromlmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(cmd_tolmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(cmd_intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(cmd_DRAM1003_void1055_in, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1219)\nengine.TopManager.<init>(MaxJManager.maxj:89)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(DRAM1003_void1055_in, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1219)\nengine.TopManager.<init>(MaxJManager.maxj:89)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(cmd_DRAM1004_void1082_out, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:92)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(DRAM1004_void1082_out, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:92)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_33, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_38, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_50, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_54, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_36, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_42, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_46, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_48, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
MANAGER_NODE_STACK_TRACE(Stream_52, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(TopKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(TopKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(TopKernel, TopKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(TopKernel, DRAM1003_void1055_in, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(TopKernel, DRAM1003_void1055_in_cmd, 0)
DEBUG_OUTPUT_BITS(TopKernel, DRAM1004_void1082_out_cmd, 1)
DEBUG_OUTPUT_BITS(TopKernel, DRAM1004_void1082_out, 2)
DEBUG_OUTPUT_BITS(TopKernel, intrCmd, 3)
DEBUG_OUTPUT_BITS(TopKernel, intrStream, 4)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromcpu, PCIePushSourceSyncMax4, "fromcpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_fromlmem, AddressGeneratorSync, "addrgen_cmd_fromlmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_tolmem, AddressGeneratorSync, "addrgen_cmd_tolmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_36, FifoPushToPullSync, "Stream_36", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, DualAspectMuxSync, "Stream_28", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, DualAspectRegSync, "Stream_16", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_42, FifoPushToPushSync, "Stream_42", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_46, FifoPushToPullSync, "Stream_46", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_38, PullToPushAdapterSync, "Stream_38")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tocpu, PCIePushSinkSyncMax3, "tocpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(TopKernel, TopKernel, "TopKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_48, FifoPushToPullSync, "Stream_48", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_52, FifoPushToPullSync, "Stream_52", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_33, DualAspectRegSync, "Stream_33", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, DualAspectRegSync, "Stream_21", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_50, PullToPushAdapterSync, "Stream_50")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_54, PullToPushAdapterSync, "Stream_54")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromlmem, MemoryProxyPullSourceSync, "fromlmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_fromlmem_0, MemoryProxyCommandSinkSync, "cmd_fromlmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_tolmem_0, MemoryProxyCommandSinkSync, "cmd_tolmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_intrStream, MemoryProxyCommandSinkSync, "cmd_intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DRAM1003_void1055_in, MemoryProxyPullSourceSync, "DRAM1003_void1055_in")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_DRAM1003_void1055_in, MemoryProxyCommandSinkSync, "cmd_DRAM1003_void1055_in")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_DRAM1004_void1082_out, MemoryProxyCommandSinkSync, "cmd_DRAM1004_void1082_out")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tolmem, MemoryProxyPushSinkSync, "tolmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(intrStream, MemoryProxyPushSinkSync, "intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DRAM1004_void1082_out, MemoryProxyPushSinkSync, "DRAM1004_void1082_out")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 99)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "7cdb5acab7ac2526198ce58059ddf696fb29c80dd526299ef3296975c610c7ad")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_fill_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_full_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_stall, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_valid, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_stall_vector, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fromlmem, setup, "fromlmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_fromlmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_fromlmem_0, setup, "cmd_fromlmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_tolmem_0, setup, "cmd_tolmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_intrStream, setup, "cmd_intrStream", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DRAM1003_void1055_in, setup, "DRAM1003_void1055_in", MemoryControllerPro::getDefaultMemoryController(), "cmd_DRAM1003_void1055_in", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_DRAM1003_void1055_in, setup, "cmd_DRAM1003_void1055_in", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_DRAM1004_void1082_out, setup, "cmd_DRAM1004_void1082_out", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(tolmem, setup, "tolmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_tolmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(intrStream, setup, "intrStream", MemoryControllerPro::getDefaultMemoryController(), "cmd_intrStream", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DRAM1004_void1082_out, setup, "DRAM1004_void1082_out", MemoryControllerPro::getDefaultMemoryController(), "cmd_DRAM1004_void1082_out", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(fromcpu, STREAM_FROM_HOST, 0)
PCIE_STREAM(tocpu, STREAM_TO_HOST, 0)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_fromlmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_tolmem, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(fromlmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(DRAM1003_void1055_in, 1, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(tolmem, 2, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(intrStream, 3, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(DRAM1004_void1082_out, 4, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(addrgen_cmd_fromlmem._Addr_En, 0x0, 1, hwBits(1))
REG(addrgen_cmd_fromlmem._CmdSize, 0x1, 1, hwBits(8))
REG(addrgen_cmd_fromlmem._BlockSize_X, 0x2, 5, hwBits(33))
REG(addrgen_cmd_fromlmem._Wrap_X, 0x7, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Start_X_Addr, 0xb, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Offset_0, 0xf, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Addr_En, 0x13, 1, hwBits(1))
REG(addrgen_cmd_tolmem._CmdSize, 0x14, 1, hwBits(8))
REG(addrgen_cmd_tolmem._BlockSize_X, 0x15, 5, hwBits(33))
REG(addrgen_cmd_tolmem._Wrap_X, 0x1a, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Start_X_Addr, 0x1e, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Offset_0, 0x22, 4, hwBits(32))
REG(TopKernel.en, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1003_void1055_in_cmd_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1003_void1055_in_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1004_void1082_out_cmd_force_disabled, 0x29, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1004_void1082_out_force_disabled, 0x2a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_intrCmd_force_disabled, 0x2b, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_intrStream_force_disabled, 0x2c, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.run_cycle_count, 0x2d, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.cycles, 0x33, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(TopKernel.current_run_cycle_count, 0x3b, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.dbg_ctld_almost_empty, 0x41, 1, hwBits(1))
REG(TopKernel.dbg_ctld_done, 0x42, 1, hwBits(1))
REG(TopKernel.dbg_ctld_empty, 0x43, 1, hwBits(1))
REG(TopKernel.dbg_ctld_read, 0x44, 1, hwBits(1))
REG(TopKernel.dbg_ctld_read_pipe_dbg, 0x45, 1, hwBits(3))
REG(TopKernel.dbg_ctld_request, 0x46, 1, hwBits(1))
REG(TopKernel.dbg_done_out, 0x47, 1, hwBits(1))
REG(TopKernel.dbg_fill_level, 0x48, 1, hwBits(7))
REG(TopKernel.dbg_flush_level, 0x49, 1, hwBits(7))
REG(TopKernel.dbg_flush_start, 0x4a, 1, hwBits(1))
REG(TopKernel.dbg_flush_start_level, 0x4b, 1, hwBits(7))
REG(TopKernel.dbg_flushing, 0x4c, 1, hwBits(1))
REG(TopKernel.dbg_full_level, 0x4d, 1, hwBits(7))
REG(TopKernel.dbg_out_stall, 0x4e, 1, hwBits(5))
REG(TopKernel.dbg_out_valid, 0x4f, 1, hwBits(5))
REG(TopKernel.dbg_stall_vector, 0x50, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x51, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x52, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x53, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x54, 1, hwBits(8))
REG(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x55, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x56, 4, hwBits(32))
REG(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5a, 4, hwBits(32))
REG(ifpga.ifpga_ctrl, 0x5e, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x5f, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(addrgen_cmd_fromlmem._Addr_En, 0x0, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._CmdSize, 0x1, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._BlockSize_X, 0x2, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Wrap_X, 0x7, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Start_X_Addr, 0xb, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Offset_0, 0xf, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Addr_En, 0x13, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._CmdSize, 0x14, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._BlockSize_X, 0x15, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Wrap_X, 0x1a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Start_X_Addr, 0x1e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Offset_0, 0x22, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.en, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.io_DRAM1003_void1055_in_cmd_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1003_void1055_in_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1004_void1082_out_cmd_force_disabled, 0x29, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1004_void1082_out_force_disabled, 0x2a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_intrCmd_force_disabled, 0x2b, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_intrStream_force_disabled, 0x2c, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.run_cycle_count, 0x2d, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.cycles, 0x33, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.current_run_cycle_count, 0x3b, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_almost_empty, 0x41, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_done, 0x42, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_empty, 0x43, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read, 0x44, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read_pipe_dbg, 0x45, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_request, 0x46, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_done_out, 0x47, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_fill_level, 0x48, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_level, 0x49, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start, 0x4a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start_level, 0x4b, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flushing, 0x4c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_full_level, 0x4d, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_stall, 0x4e, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_valid, 0x4f, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_stall_vector, 0x50, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x51, 1, hwBits(5), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x52, 1, hwBits(5), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x53, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x54, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x55, 1, hwBits(1), HOST_WRITE_ONLY, true)
REG_V2(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x56, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5a, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x5e, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x5f, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("7cdb5acab7ac2526198ce58059ddf696fb29c80dd526299ef3296975c610c7ad")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(maia_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_fromlmem, addrgen_cmd_fromlmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_tolmem, addrgen_cmd_tolmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_intrStream, addrgen_cmd_intrStream., STREAM)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_DRAM1003_void1055_in, addrgen_cmd_DRAM1003_void1055_in., STREAM)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_DRAM1004_void1082_out, addrgen_cmd_DRAM1004_void1082_out., STREAM)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_fromlmem, fromlmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_DRAM1003_void1055_in, DRAM1003_void1055_in, 0, 1, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_tolmem, tolmem, 0, 2, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_intrStream, intrStream, 0, 3, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_DRAM1004_void1082_out, DRAM1004_void1082_out, 0, 4, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Top
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Top_H
#define SLIC_DECLARATIONS_Top_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Top_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 */
void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	uint8_t *outstream_tocpu; /**<  [out] The stream should be of size param_size bytes. */
} Top_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 */
void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	const uint8_t *instream_fromcpu; /**<  [in] The stream should be of size param_size bytes. */
} Top_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 */
void Top(
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_nonblock(
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t *outscalar_TopKernel_cycles; /**<  [out] Output scalar parameter "TopKernel.cycles". */
} Top_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Top_init(void);

/* Error handling functions */
int Top_has_errors(void);
const char* Top_get_errors(void);
void Top_clear_errors(void);
/* Free statically allocated maxfile data */
void Top_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Top_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(TopKernel, 512, NodeConstantRawBits, "{HWOffsetFix:17, 0, UNSIGNED}\n0x00010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:121)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 123, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:106)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 130, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count$Params.withReset(Count.java:138)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:118)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 132, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:121)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 511, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x000f; 15.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:122)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 134, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:122)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 135, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:123)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 430, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 112, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:163)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 431, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 422, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:161)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 111, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:162)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 108, NodeStateMachine, "State Machine (void1053_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:156)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 423, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:158)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 449, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 450, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 432, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 178, NodeStateMachine, "State Machine (CounterChain1057_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:208)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 179, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:212)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 433, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 424, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:197)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 434, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 435, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 57, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.BaseLib.<init>(BaseLib.maxj:65)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 175, NodeStateMachine, "State Machine (pipe1063_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:192)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 425, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:194)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 83, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:119)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 447, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 216, NodeStateMachine, "State Machine (CounterChain1070_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:300)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 437, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 217, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:304)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 438, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 426, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:289)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 213, NodeStateMachine, "State Machine (pipe1076_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:284)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 427, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:286)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 471, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 494, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 439, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 231, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:339)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 440, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 428, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:337)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 230, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:338)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 227, NodeStateMachine, "State Machine (void1080_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:332)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 429, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:334)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 443, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 510, NodeConstantRawBits, "{HWOffsetFix:17, 0, UNSIGNED}\n0x00002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:100)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 245, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count$Params.withReset(Count.java:138)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:97)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 247, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:100)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 509, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:101)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 249, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:101)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 250, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:102)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 441, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 238, NodeStateMachine, "State Machine (DRAM1004_void1082_outldSM)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:85)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 239, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:87)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 353, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:248)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 187, NodeStateMachine, "State Machine (metapipe1084_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:244)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 188, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:246)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 448, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 68, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:76)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 446, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 444, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 508, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x000000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 297, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 298, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernel.<init>(TopKernel.maxj:48)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 445, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 63, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:62)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 0, NodeInputMappedReg, "Scalar input (en)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nengine.TopKernel.<init>(TopKernel.maxj:26)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 1, NodeStateMachine, "State Machine (mainSm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernel.<init>(TopKernel.maxj:32)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 64, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:63)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 62, NodeStateMachine, "State Machine (void1088_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:60)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 361, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:78)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 67, NodeStateMachine, "State Machine (seq1086_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:74)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 365, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:121)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 82, NodeStateMachine, "State Machine (metapipe1065_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:117)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 122, NodeStateMachine, "State Machine (DRAM1003_void1055_inldSM)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:104)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 451, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 507, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 137, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 138, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 156, NodeInputMappedReg, "Scalar input (io_DRAM1003_void1055_in_cmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 157, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 158, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 464, NodeFIFO, "FIFO(42)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 366, NodeConstantRawBits, "{HWRawBits:1}\n0x0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 371, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 143, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:127)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 163, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 376, NodeConstantRawBits, "{HWRawBits:8}\n0x01", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 506, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00100000; 1048576.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:899)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:112)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 291, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.connectDummyBroadcast(NBufReg.maxj:178)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:392)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 290, NodeConstantRawBits, "{HWOffsetFix:2, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.NBufReg.connectUntouchedPorts(NBufReg.maxj:167)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:391)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 492, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 491, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 3, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 5, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 7, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 9, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 11, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 13, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 454, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 455, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 4, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 6, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 8, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 10, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 12, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 14, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 2, NodeStateMachine, "State Machine (reg1050_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.NBufReg.common(NBufReg.maxj:79)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 27, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:104)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 463, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 17, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 289, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.connectUnwrittenPorts(NBufReg.maxj:156)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:389)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 18, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 15, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 79, NodeStateMachine, "State Machine (CounterChain1045_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:93)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 89, NodeStateMachine, "State Machine (CounterChain1049_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:137)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 115, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:169)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 398, NodeReinterpret, "<{HWOffsetFix:32, 5, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:170)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 399, NodeReinterpret, "<{HWOffsetFix:32, 6, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:170)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 400, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:170)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 401, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:170)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 461, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 117, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:171)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 288, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.NBufReg.connectUnwrittenPorts(NBufReg.maxj:155)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:389)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 16, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 118, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:173)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 19, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:33)\nengine.NBufReg.common(NBufReg.maxj:97)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 22, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 23, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 20, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 21, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 24, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:33)\nengine.NBufReg.common(NBufReg.maxj:97)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 28, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:104)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 505, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1017)\nengine.MemoryCmdGenLib.getNumberOfBursts(MemoryCmdGen.maxj:30)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:112)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 125, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1017)\nengine.MemoryCmdGenLib.getNumberOfBursts(MemoryCmdGen.maxj:30)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:112)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 126, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:112)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 128, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:899)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:112)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 160, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 162, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 164, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 166, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 168, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 159, NodeOutput, "Output(DRAM1003_void1055_in_cmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 465, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 504, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 252, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 253, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 270, NodeInputMappedReg, "Scalar input (io_DRAM1004_void1082_out_cmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 271, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 272, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 476, NodeFIFO, "FIFO(41)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 377, NodeConstantRawBits, "{HWRawBits:1}\n0x0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 382, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 257, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:106)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 277, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 387, NodeConstantRawBits, "{HWRawBits:8}\n0x01", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 503, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00200000; 2097152.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:899)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:93)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 295, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.connectDummyBroadcast(NBufReg.maxj:178)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:398)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 294, NodeConstantRawBits, "{HWOffsetFix:2, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.NBufReg.connectUntouchedPorts(NBufReg.maxj:167)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:397)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 495, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 467, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 30, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 32, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 34, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 36, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 38, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 40, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:90)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 468, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 496, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 31, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 33, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 35, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 37, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 39, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 41, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.common(NBufReg.maxj:91)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 29, NodeStateMachine, "State Machine (reg1077_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.NBufReg.common(NBufReg.maxj:79)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 54, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:104)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 475, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 44, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 293, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.NBufReg.connectUnwrittenPorts(NBufReg.maxj:156)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:395)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 45, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 42, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 197, NodeStateMachine, "State Machine (metapipe1084_FixedPoint9020_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.DblBufReg.common(DblBufReg.maxj:36)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 472, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 201, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 194, NodeStateMachine, "State Machine (CounterChain1068_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:264)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 204, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:43)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 202, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 198, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1048)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 199, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 200, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 203, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\nengine.DblBufReg.common(DblBufReg.maxj:46)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:276)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 234, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:345)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 402, NodeReinterpret, "<{HWOffsetFix:32, 5, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:346)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 403, NodeReinterpret, "<{HWOffsetFix:32, 6, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:346)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 404, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:346)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 405, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:346)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 236, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:347)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 292, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.NBufReg.connectUnwrittenPorts(NBufReg.maxj:155)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:395)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 43, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 237, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:349)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 46, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:33)\nengine.NBufReg.common(NBufReg.maxj:97)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 49, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 50, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:96)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 47, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 48, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:95)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 51, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:33)\nengine.NBufReg.common(NBufReg.maxj:97)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 55, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:116)\nengine.NBufReg.common(NBufReg.maxj:104)\nengine.NBufReg.<init>(NBufReg.maxj:122)\nengine.BaseLib.<init>(BaseLib.maxj:60)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 502, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1017)\nengine.MemoryCmdStLib.getNumberOfBursts(MemoryCmdSt.maxj:36)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:93)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 241, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1017)\nengine.MemoryCmdStLib.getNumberOfBursts(MemoryCmdSt.maxj:36)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:93)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 242, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:93)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 244, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:899)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:93)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 274, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 276, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 278, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 280, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 282, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 273, NodeOutput, "Output(DRAM1004_void1082_out_cmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 477, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 283, NodeInputMappedReg, "Scalar input (io_DRAM1004_void1082_out_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 284, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 285, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 487, NodeFIFO, "FIFO(64)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 100, NodeStateMachine, "State Machine (metapipe1065_FixedPoint8741_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.DblBufReg.common(DblBufReg.maxj:36)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 482, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 104, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 92, NodeStateMachine, "State Machine (metapipe1065_FixedPoint8740_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.DblBufReg.common(DblBufReg.maxj:36)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 480, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 96, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 99, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:43)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 97, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 93, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1048)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 94, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 95, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 98, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\nengine.DblBufReg.common(DblBufReg.maxj:46)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 107, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:45)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 105, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:42)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 101, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1048)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 102, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 103, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:38)\nengine.DblBufReg.common(DblBufReg.maxj:41)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 106, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\nengine.DblBufReg.common(DblBufReg.maxj:46)\nengine.DblBufReg.<init>(DblBufReg.maxj:52)\nengine.SpatialUtils.getRegChain(SpatialUtils.maxj:41)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:149)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 406, NodeReinterpret, "<{HWOffsetFix:32, 5, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectWport(BramLib.maxj:541)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 407, NodeReinterpret, "<{HWOffsetFix:32, 6, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectWport(BramLib.maxj:541)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 408, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectWport(BramLib.maxj:541)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 409, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectWport(BramLib.maxj:541)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 185, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.BramLib.connectWport(BramLib.maxj:541)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 186, NodeCast, "{HWOffsetFix:14, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.BoxedMem.write(BoxedMem.maxj:32)\nengine.BramLib.connectWport(BramLib.maxj:543)\nengine.BramLib.connectWport(BramLib.maxj:521)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:229)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 484, NodeFIFO, "FIFO(61)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 483, NodeFIFO, "FIFO(57)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 169, NodeInputMappedReg, "Scalar input (io_DRAM1003_void1055_in_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 170, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 171, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 172, NodeInput, "Input(DRAM1003_void1055_in)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 174, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:178)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 493, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 410, NodeReinterpret, "<{HWOffsetFix:32, 5, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectRport(BramLib.maxj:394)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 411, NodeReinterpret, "<{HWOffsetFix:32, 6, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectRport(BramLib.maxj:394)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 412, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectRport(BramLib.maxj:394)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 413, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\nengine.BramLib.connectRport(BramLib.maxj:394)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 223, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.BramLib.connectRport(BramLib.maxj:394)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 225, NodeCast, "{HWOffsetFix:14, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.BoxedMem.read(BoxedMem.maxj:28)\nengine.BramLib.connectRport(BramLib.maxj:375)\nengine.BramLib.connectRport(BramLib.maxj:395)\nengine.BramLib.connectRport(BramLib.maxj:389)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:316)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 486, NodeFIFO, "FIFO(64)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 337, NodeRAM, "RAM(RAM_TWO_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\nengine.BoxedMem.<init>(BoxedMem.maxj:24)\nengine.BramLib.common(BramLib.maxj:79)\nengine.BramLib.<init>(BramLib.maxj:137)\nengine.BaseLib.<init>(BaseLib.maxj:36)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 287, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 286, NodeOutput, "Output(DRAM1004_void1082_out)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:355)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 497, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 501, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 300, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 301, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 317, NodeInputMappedReg, "Scalar input (io_intrCmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 318, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 319, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 498, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:159)\n")
PHOTON_NODE_DATA(TopKernel, 328, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 392, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 394, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 324, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 396, NodeConstantRawBits, "{HWRawBits:8}\n0x01", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 397, NodeConstantRawBits, "{HWRawBits:32}\n0x00000000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 323, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 325, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 327, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 329, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 320, NodeOutput, "Output(intrCmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 330, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 331, NodeOutputMappedReg, "Scalar output (cycles)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 333, NodeInputMappedReg, "Scalar input (io_intrStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 334, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 335, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 332, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000005; 5.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 336, NodeOutput, "Output(intrStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 342, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 500, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 339, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 340, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 341, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 343, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 499, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 345, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 346, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 348, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 349, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
PHOTON_NODE_DATA(TopKernel, 347, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:149)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Top_has_errors(void)
{	return stored_has_error; }
const char* Top_get_errors(void)
{	return stored_error; }
void Top_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Top_use_simulation[16];
static void Top_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Top_use_simulation, 16, "Top_%05ld_", pid);
}
static const char *Top_check_use_simulation(void)
{
	Top_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Top_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Top_simulation_launch = 0;
int Top_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Top_simulator_stop(void)
{
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Top_static_init(void) 
{
	stored_maxfile = Top_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Top_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Top_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Top_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Top_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Top_simulation_launch == 1) {
		int sim_stat = Top_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Top_simulation_launch = 0;
	}
}

static int Top_get_pcie_alignment(void)
{
#ifdef Top_PCIE_ALIGNMENT
	return ((Top_PCIE_ALIGNMENT < 1) ? 16 : Top_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Top_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Top_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Top_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Top_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_readLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_readLMem_callback_stream_t;

typedef struct Top_readLMem_callback_data {
	Top_readLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_readLMem_callback_data_t;

static void Top_readLMem_callback_internal(void *cb_data)
{
	Top_readLMem_callback_data_t *data = (Top_readLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_readLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_readLMem_convert_internal(
	max_file_t *maxfile,
	Top_readLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_readLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_readLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_readLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_readLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	/* code for stream tocpu */
	size_t outstream_size_tocpu = param_size;
	if (outstream_size_tocpu > 0) {
		uint8_t *stream_ptr = interface_actions->outstream_tocpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->outstream_tocpu))) {
			uint8_t *aligned_outstream_tocpu = malloc(outstream_size_tocpu);
			if (aligned_outstream_tocpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'tocpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_tocpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_tocpu;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_tocpu;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_tocpu;
		}
		max_queue_output(actions, "tocpu", stream_ptr, outstream_size_tocpu);
		CHECK_ERRORS;
	}
	/* end of code for stream tocpu */
	
	/* code for linear memory-stream "fromlmem" */
	size_t lmem_address_fromlmem = param_start;
	size_t lmem_arr_size_fromlmem = param_size;
	int lmem_burst_size_fromlmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_address_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_fromlmem, lmem_burst_size_fromlmem );
	}
	if ( (lmem_arr_size_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_arr_size_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_fromlmem, lmem_burst_size_fromlmem );
	}
	if (lmem_arr_size_fromlmem > 0) {
		max_lmem_linear(actions, "fromlmem", lmem_address_fromlmem, lmem_arr_size_fromlmem);
	} else {
		max_ignore_lmem(actions, "fromlmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "fromlmem" */
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_readLMem_nonblock(param_size, param_start, outstream_tocpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	Top_readLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.outstream_tocpu = outstream_tocpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_readLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions)
{
	return Top_readLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_writeLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_writeLMem_callback_stream_t;

typedef struct Top_writeLMem_callback_data {
	Top_writeLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_writeLMem_callback_data_t;

static void Top_writeLMem_callback_internal(void *cb_data)
{
	Top_writeLMem_callback_data_t *data = (Top_writeLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_writeLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_writeLMem_convert_internal(
	max_file_t *maxfile,
	Top_writeLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_writeLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_writeLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_writeLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_writeLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	/* code for stream fromcpu */
	size_t instream_size_fromcpu = param_size;
	if (instream_size_fromcpu > 0) {
		const uint8_t *stream_ptr = interface_actions->instream_fromcpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->instream_fromcpu))) {
			uint8_t *aligned_instream_fromcpu = malloc(instream_size_fromcpu);
			if (aligned_instream_fromcpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'fromcpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_fromcpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_fromcpu;
			(&cb_data->stream[cb_data->count])->size        = instream_size_fromcpu;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_fromcpu, interface_actions->instream_fromcpu, instream_size_fromcpu);
			stream_ptr = aligned_instream_fromcpu;
		}
		max_queue_input(actions, "fromcpu", stream_ptr, instream_size_fromcpu);
		CHECK_ERRORS;
	}
	/* end of code for stream fromcpu */
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	/* code for linear memory-stream "tolmem" */
	size_t lmem_address_tolmem = param_start;
	size_t lmem_arr_size_tolmem = param_size;
	int lmem_burst_size_tolmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_address_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_tolmem, lmem_burst_size_tolmem );
	}
	if ( (lmem_arr_size_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_arr_size_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_tolmem, lmem_burst_size_tolmem );
	}
	if (lmem_arr_size_tolmem > 0) {
		max_lmem_linear(actions, "tolmem", lmem_address_tolmem, lmem_arr_size_tolmem);
	} else {
		max_ignore_lmem(actions, "tolmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "tolmem" */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_writeLMem_nonblock(param_size, param_start, instream_fromcpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	Top_writeLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.instream_fromcpu = instream_fromcpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_writeLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions)
{
	return Top_writeLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_callback_stream_t;

typedef struct Top_callback_data {
	Top_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_callback_data_t;

static void Top_callback_internal(void *cb_data)
{
	Top_callback_data_t *data = (Top_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_convert_internal(
	max_file_t *maxfile,
	Top_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_callback_internal;
	}

	/* code for scalar TopKernel.run_cycle_count */
	uint64_t ticks_TopKernel = 9223372036854775807;
	max_set_ticks(actions, "TopKernel", 9223372036854775807);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.run_cycle_count*/
	
	/* code for scalar TopKernel.cycles */
	uint64_t *outscalar_TopKernel_cycles = interface_actions->outscalar_TopKernel_cycles;
	max_get_uint64t(actions, "TopKernel", "cycles", outscalar_TopKernel_cycles);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.cycles*/
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 1;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	/* code for memory-stream "intrStream" */
	max_lmem_set_interrupt_on(actions, "intrStream");
	CHECK_ERRORS;
	/* end of code for memory-stream "intrStream" */
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top(
	uint64_t *outscalar_TopKernel_cycles)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_nonblock(outscalar_TopKernel_cycles);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_nonblock(
	uint64_t *outscalar_TopKernel_cycles)
{
	Top_actions_t interface_actions;
	interface_actions.outscalar_TopKernel_cycles = outscalar_TopKernel_cycles;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_run_t *run = Top_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions)
{
	return Top_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM(tocpu, param_size)	
SLIC_LMEM_LINEAR(fromlmem, param_start, param_size)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM(fromcpu, param_size)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR(tolmem, param_start, param_size)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(default)	
SLIC_SET_TICKS(TopKernel, 9223372036854775807)	
SLIC_SCALAR_UINT64(TopKernel, en, 1)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_SET_INTERRUPT(intrStream)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlRvcC5oIiBuYW1lPSJUb3Ai
Pjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+
PGVuZ2luZW1vZGUgbmFtZT0icmVhZExNZW0iPjxmdW5jdGlvbiBuYW1lPSJUb3BfcmVhZExNZW0i
IHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3NpemUmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9zaXplIiB0eXBl
PSJ1aW50MzJfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtzdGFy
dCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3N0YXJ0IiB0eXBlPSJ1aW50
MzJfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIHBhcmFtX3Np
emUgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX3RvY3B1IiBzaXpl
PSJwYXJhbV9zaXplIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InVpbnQ4X3QiPjxkaW1lbnNpb24g
aW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9Ii8iIHZhbHVlPSIocGFyYW1fc2l6ZSAvIDEpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9z
aXplIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjEiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2lu
ZW1vZGU+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iVG9wX3dy
aXRlTE1lbSIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7c2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3Np
emUiIHR5cGU9InVpbnQzMl90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3N0YXJ0JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fc3RhcnQiIHR5
cGU9InVpbnQzMl90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUg
cGFyYW1fc2l6ZSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX2Zyb21j
cHUiIHNpemU9InBhcmFtX3NpemUiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0idWludDhfdCI+PGRp
bWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRv
ciBvcGVyYXRvcj0iLyIgdmFsdWU9IihwYXJhbV9zaXplIC8gMSkiPjx1c2VyUGFyYW0gdmFsdWU9
InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMSIvPjwvbnVtQmluYXJ5T3BlcmF0
b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
VG9wIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJh
bWV0ZXIgJnF1b3Q7VG9wS2VybmVsLmN5Y2xlcyZxdW90Oy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBu
YW1lPSJvdXRzY2FsYXJfVG9wS2VybmVsX2N5Y2xlcyIgdHlwZT0idWludDY0X3QiLz48L2Z1bmN0
aW9uPjwvZW5naW5lbW9kZT48L21heGZpbGU+
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBUb3BfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFzX2Vycm9yOyB9
CmNvbnN0IGNoYXIqIFRvcF9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsg
fQp2b2lkIFRvcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3Rv
cmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBU
b3BfdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBUb3BfZGVmX3VzZV9zaW11bGF0aW9u
KHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50
ZihUb3BfdXNlX3NpbXVsYXRpb24sIDE2LCAiVG9wXyUwNWxkXyIsIHBpZCk7Cn0Kc3RhdGljIGNv
bnN0IGNoYXIgKlRvcF9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglUb3BfZGVmX3VzZV9z
aW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5n
KE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVz
ZV9zaW0gPSBUb3BfdXNlX3NpbXVsYXRpb247CgkJbWF4X2NvbmZpZ19zZXRfc3RyaW5nKE1BWF9D
T05GSUdfVVNFX1NJTVVMQVRJT04sIHVzZV9zaW0pOwoJfQoJcmV0dXJuIHVzZV9zaW07Cn0KCnN0
YXRpYyBpbnQgVG9wX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFRvcF9zaW11bGF0b3Jfc3Rh
cnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2No
ZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAx
MDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1B
WDQ4NDhBIC1TIHNpbXV0aWxzIHJlc3RhcnQiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBw
b3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwg
IiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vy
cm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBl
X2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21t
YW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQlpZiAoc3Ryc3Ry
KGJ1ZmYsICJFcnJvciIpKSB7CgkJCXNldF9lcnJvcihidWZmKTsKCQkJcmV0dmFsID0gLTE7CgkJ
fQoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIHJldHZhbDsKfQoKaW50IFRvcF9zaW11bGF0
b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2NoZWNrX3VzZV9zaW11
bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFUSD1z
aW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1TIHNp
bXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIp
OwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBl
eGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJl
dHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7
CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJ
CS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgVG9wX3N0YXRpY19pbml0KHZvaWQpIAp7CglzdG9yZWRf
bWF4ZmlsZSA9IFRvcF9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4
X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
CWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JU
X09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBt
YXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkg
ewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3Jz
KCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRf
bWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRf
dGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFRvcF9j
aGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4Zmls
ZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IFRvcF9zaW11bGF0b3Jfc3RhcnQo
KTsKCQlpZiAoKHNpbV9zdGF0ID09IDApICYmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZp
bGUsIHVzZV9zaW0pID09IDEpKSB7CgkJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBl
bHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5n
IHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3RydWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7
CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQgJ3VzZV9zaW11bGF0aW9uPTxzaW11bGF0
b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsK
CQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhlIGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5
c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9l
bmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwgIioiKTsKCWlmICghbWF4X29rKHN0b3Jl
ZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklH
X1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
XG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5nIG5vdy5cblxuIik7CgkJCWZmbHVzaChz
dGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShz
dG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0g
Cgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7
Cn0Kdm9pZCBUb3BfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJ
bWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlm
IChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxM
KSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAo
VG9wX3NpbXVsYXRpb25fbGF1bmNoID09IDEpIHsKCQlpbnQgc2ltX3N0YXQgPSBUb3Bfc2ltdWxh
dG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJF
cnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9
IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgVG9wX2dldF9wY2llX2FsaWdubWVudCh2b2lkKQp7CiNpZmRl
ZiBUb3BfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKFRvcF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8g
MTYgOiBUb3BfUENJRV9BTElHTk1FTlQpOwojZWxzZQoJcmV0dXJuIDE2OwojZW5kaWYKfQoKc3Rh
dGljIGludCBUb3BfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2ll
X2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9Cgpz
dGF0aWMgdm9pZCAqVG9wX21hbGxvY19hbGlnbmVkKGNvbnN0IHNpemVfdCBzaXplKQp7Cgl2b2lk
ICpwdHI7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhf
bWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFj
ZSByZWFkTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tKi8KCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNU
LT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJy
b3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4
X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tf
TlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAi
IiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0Up
OyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFRvcF9yZWFkTE1lbV9jYWxsYmFja19z
dHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVf
dCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gVG9wX3JlYWRMTWVtX2NhbGxiYWNrX3N0
cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2RhdGEgewoJVG9w
X3JlYWRMTWVtX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQg
bWF4X2NvdW50Owp9IFRvcF9yZWFkTE1lbV9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBU
b3BfcmVhZExNZW1fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJVG9wX3JlYWRM
TWVtX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChUb3BfcmVhZExNZW1fY2FsbGJhY2tfZGF0YV90
KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJ
CVRvcF9yZWFkTE1lbV9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJ
aWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0
ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsK
CX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBUb3BfcmVhZExNZW1fY29u
dmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglUb3BfcmVhZExNZW1fYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoq
Y2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVG9wX3JlYWRMTWVtX2NhbGxi
YWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNr
X2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxi
YWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2Rh
dGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFi
bGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlv
biBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0K
CQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNh
bGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmVG9wX3Jl
YWRMTWVtX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCXVpbnQzMl90IHBhcmFtX3NpemUgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc2l6ZTsKCQoJdWludDMyX3QgcGFyYW1fc3RhcnQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc3RhcnQ7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJUb3BLZXJuZWwiLCAicnVuX2N5Y2xlX2NvdW50IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiVG9wS2VybmVsIiwgImN5Y2xlcyIgKTsKCUNIRUNLX0VS
Uk9SUzsKCQoJLyogY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5lbiAqLwoJdWludDY0X3QgaW5z
Y2FsYXJfVG9wS2VybmVsX2VuID0gMDsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVG9wS2Vy
bmVsIiwgImVuIiwgaW5zY2FsYXJfVG9wS2VybmVsX2VuKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVu
ZCBvZiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLmVuKi8KCQoJbWF4X2lnbm9yZV9zdHJlYW0o
YWN0aW9ucywgImZyb21jcHUiICk7CglDSEVDS19FUlJPUlM7CgkKCS8qIGNvZGUgZm9yIHN0cmVh
bSB0b2NwdSAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3RvY3B1ID0gcGFyYW1fc2l6ZTsKCWlm
IChvdXRzdHJlYW1fc2l6ZV90b2NwdSA+IDApIHsKCQl1aW50OF90ICpzdHJlYW1fcHRyID0gaW50
ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV90b2NwdTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgx
ID09IFRvcF9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fdG9jcHUp
KSkgewoJCQl1aW50OF90ICphbGlnbmVkX291dHN0cmVhbV90b2NwdSA9IG1hbGxvYyhvdXRzdHJl
YW1fc2l6ZV90b2NwdSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV90b2NwdSA9PSBOVUxMKSB7
CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19M
SU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFt
ICd0b2NwdSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtj
Yl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlv
bnMtPm91dHN0cmVhbV90b2NwdTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX3RvY3B1OwoJCQko
JmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVh
bV9zaXplX3RvY3B1OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGln
bmVkX291dHN0cmVhbV90b2NwdTsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAidG9j
cHUiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV90b2NwdSk7CgkJQ0hFQ0tfRVJST1JTOwoJ
fQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB0b2NwdSAqLwoJCgkvKiBjb2RlIGZvciBsaW5l
YXIgbWVtb3J5LXN0cmVhbSAiZnJvbWxtZW0iICovCglzaXplX3QgbG1lbV9hZGRyZXNzX2Zyb21s
bWVtID0gcGFyYW1fc3RhcnQ7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV9mcm9tbG1lbSA9IHBhcmFt
X3NpemU7CglpbnQgbG1lbV9idXJzdF9zaXplX2Zyb21sbWVtID0gbWF4X2dldF9idXJzdF9zaXpl
KG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1lbV9hZGRyZXNzX2Zyb21sbWVtICUgbG1lbV9idXJz
dF9zaXplX2Zyb21sbWVtKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9y
OiAlczolZCA6IExNZW0gZnJvbWxtZW0gcGFyYW1ldGVyICdsbWVtX2FkZHJlc3NfZnJvbWxtZW0n
IGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xu
IiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2FkZHJlc3NfZnJvbWxtZW0sIGxtZW1fYnVyc3Rf
c2l6ZV9mcm9tbG1lbSApOwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV9mcm9tbG1lbSAlIGxtZW1f
YnVyc3Rfc2l6ZV9mcm9tbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBF
cnJvcjogJXM6JWQgOiBMTWVtIGZyb21sbWVtIHBhcmFtZXRlciAnbG1lbV9hcnJfc2l6ZV9mcm9t
bG1lbScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5
dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYXJyX3NpemVfZnJvbWxtZW0sIGxtZW1f
YnVyc3Rfc2l6ZV9mcm9tbG1lbSApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVfZnJvbWxtZW0gPiAw
KSB7CgkJbWF4X2xtZW1fbGluZWFyKGFjdGlvbnMsICJmcm9tbG1lbSIsIGxtZW1fYWRkcmVzc19m
cm9tbG1lbSwgbG1lbV9hcnJfc2l6ZV9mcm9tbG1lbSk7Cgl9IGVsc2UgewoJCW1heF9pZ25vcmVf
bG1lbShhY3Rpb25zLCAiZnJvbWxtZW0iKTsKCX0KCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBj
b2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAiZnJvbWxtZW0iICovCgkKCW1heF9pZ25vcmVf
bG1lbShhY3Rpb25zLCAidG9sbWVtIiApOwoJQ0hFQ0tfRVJST1JTOwoJCglpZiAodXNlX2NhbGxi
YWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJ
KmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9u
czsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2b2lkIFRvcF9yZWFkTE1lbSgKCXVpbnQzMl90IHBh
cmFtX3NpemUsCgl1aW50MzJfdCBwYXJhbV9zdGFydCwKCXVpbnQ4X3QgKm91dHN0cmVhbV90b2Nw
dSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVG9wX3N0
YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3Qg
bG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3JlYWRMTWVtX25vbmJsb2NrKHBhcmFt
X3NpemUsIHBhcmFtX3N0YXJ0LCBvdXRzdHJlYW1fdG9jcHUpOwoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpU
b3BfcmVhZExNZW1fbm9uYmxvY2soCgl1aW50MzJfdCBwYXJhbV9zaXplLAoJdWludDMyX3QgcGFy
YW1fc3RhcnQsCgl1aW50OF90ICpvdXRzdHJlYW1fdG9jcHUpCnsKCVRvcF9yZWFkTE1lbV9hY3Rp
b25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9zaXplID0g
cGFyYW1fc2l6ZTsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX3N0YXJ0ID0gcGFyYW1fc3RhcnQ7
CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fdG9jcHUgPSBvdXRzdHJlYW1fdG9jcHU7Cgko
dm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBUb3Bfc3RhdGljX2lu
aXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQi
LCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEg
ICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX3JlYWRMTWVtX2Nv
bnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNi
X2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBh
Y3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1Qo
YWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7Cglt
YXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25v
bmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVu
X25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0
YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJ
Q0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25z
KTsKCXJldHVybiBydW47Cn0KCnZvaWQgVG9wX3JlYWRMTWVtX3J1bigKCW1heF9lbmdpbmVfdCAq
ZW5naW5lLAoJVG9wX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1h
eF9ydW5fdCAqcnVuID0gVG9wX3JlYWRMTWVtX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsK
CW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqVG9wX3JlYWRMTWVtX3J1bl9ub25ibG9jaygK
CW1heF9lbmdpbmVfdCAqZW5naW5lLAoJVG9wX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNl
X2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmls
ZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2Rh
dGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX3JlYWRMTWVt
X2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5j
LCAmY2JfZGF0YSk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3Qg
KnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVu
Z2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9j
YihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4s
ICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9u
cyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3Rh
dGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKiBccGFyYW0g
W2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0
aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBk
ZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZvaWQgVG9wX3JlYWRMTWVtX3J1bl9n
cm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIFRvcF9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFRvcF9yZWFkTE1lbV9ydW5fZ3JvdXBfbm9u
YmxvY2soZ3JvdXAsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxl
IHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdy
b3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4g
b24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1t
ZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6
Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRl
ZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9y
dW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoK
ICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZh
Y2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhl
Y3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgog
Ki8KbWF4X3J1bl90ICpUb3BfcmVhZExNZW1fcnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90
ICpncm91cCwgVG9wX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1h
eF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9h
Y3Rpb25zX3QgKmFjdGlvbnMgPSBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxl
LCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwp
IHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9u
b25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0
dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5j
dGlvbiBmb3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0nLgogKiAKICogXHBhcmFtIFtpbl0gZW5n
YXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50
ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhl
IGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVuZ3RoIG9m
IGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAq
Lwp2b2lkIFRvcF9yZWFkTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBU
b3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3Qg
KnJ1biA9IFRvcF9yZWFkTE1lbV9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFj
ZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsK
CW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0
aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdyZWFkTE1lbScuCiAq
IAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5
IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2YgaW50
ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhlIHN0
YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9yIDo6
bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVkLCBz
byB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFtIFtp
bl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luXSBp
bnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4g
QSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwg
aW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqVG9wX3JlYWRMTWVtX3J1bl9hcnJheV9u
b25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIFRvcF9yZWFkTE1lbV9hY3Rpb25zX3Qg
KmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJy
YXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFj
dGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYg
KGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rp
b25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglm
b3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnMgPSBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZh
Y2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkgcmV0
dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFj
dGFycmF5LCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9u
b25ibG9jayhlbmdhcnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXkt
PnNpemUgOyBpKysgKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9CgltYXhf
YWN0YXJyYXlfZnJlZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBydW47
Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24gc3Ry
dWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoKICog
Tm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90
aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtpbl0g
bWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rp
b25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gVGhl
IGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJy
b3IuCiAqLwptYXhfYWN0aW9uc190KiBUb3BfcmVhZExNZW1fY29udmVydChtYXhfZmlsZV90ICpt
YXhmaWxlLCBUb3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0
dXJuIFRvcF9yZWFkTE1lbV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rp
b25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VSUk9SU19TVAojdW5kZWYgQ0hF
Q0tfTlVMTAoKCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0gSW50ZXJmYWNlIHdyaXRlTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
Ki8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwg
UkVUKSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFY
X0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVy
ciwgIiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRf
ZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7
IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBO
VUxMKSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRf
ZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0g
c2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFRvcF93
cml0ZUxNZW1fY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAq
YWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IFRvcF93
cml0ZUxNZW1fY2FsbGJhY2tfc3RyZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBUb3Bfd3JpdGVMTWVt
X2NhbGxiYWNrX2RhdGEgewoJVG9wX3dyaXRlTE1lbV9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1b
Ml07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBUb3Bfd3JpdGVMTWVtX2NhbGxiYWNr
X2RhdGFfdDsKCnN0YXRpYyB2b2lkIFRvcF93cml0ZUxNZW1fY2FsbGJhY2tfaW50ZXJuYWwodm9p
ZCAqY2JfZGF0YSkKewoJVG9wX3dyaXRlTE1lbV9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoVG9w
X3dyaXRlTE1lbV9jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9IDAgOyBp
IDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJVG9wX3dyaXRlTE1lbV9jYWxsYmFja19zdHJlYW1f
dCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+
IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJ
CX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhf
YWN0aW9uc190KiBUb3Bfd3JpdGVMTWVtX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICpt
YXhmaWxlLAoJVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50
ICBpc19pbnRlcm5hbF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lk
ICoqY2FsbGJhY2tfZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25z
X2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoK
I2RlZmluZSBDSEVDS19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9l
cnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4g
TlVMTDsgfSAKCglUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7
CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNr
X2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhz
aXplb2YoVG9wX3dyaXRlTE1lbV9jYWxsYmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBO
VUxMKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Ig
c3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gVG9wX3dyaXRlTE1lbV9jb252ZXJ0X2lu
dGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDI7
CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRh
OwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX2ludGVybmFs
OwoJfQoKCXVpbnQzMl90IHBhcmFtX3NpemUgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fc2l6
ZTsKCQoJdWludDMyX3QgcGFyYW1fc3RhcnQgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fc3Rh
cnQ7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJUb3BLZXJuZWwiLCAicnVuX2N5Y2xl
X2NvdW50IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
VG9wS2VybmVsIiwgImN5Y2xlcyIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc2Nh
bGFyIFRvcEtlcm5lbC5lbiAqLwoJdWludDY0X3QgaW5zY2FsYXJfVG9wS2VybmVsX2VuID0gMDsK
CW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVG9wS2VybmVsIiwgImVuIiwgaW5zY2FsYXJfVG9w
S2VybmVsX2VuKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgVG9w
S2VybmVsLmVuKi8KCQoJLyogY29kZSBmb3Igc3RyZWFtIGZyb21jcHUgKi8KCXNpemVfdCBpbnN0
cmVhbV9zaXplX2Zyb21jcHUgPSBwYXJhbV9zaXplOwoJaWYgKGluc3RyZWFtX3NpemVfZnJvbWNw
dSA+IDApIHsKCQljb25zdCB1aW50OF90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMt
Pmluc3RyZWFtX2Zyb21jcHU7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBUb3BfY2hlY2tf
YWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fZnJvbWNwdSkpKSB7CgkJCXVpbnQ4
X3QgKmFsaWduZWRfaW5zdHJlYW1fZnJvbWNwdSA9IG1hbGxvYyhpbnN0cmVhbV9zaXplX2Zyb21j
cHUpOwoJCQlpZiAoYWxpZ25lZF9pbnN0cmVhbV9mcm9tY3B1ID09IE5VTEwpIHsKCQkJCW1heF9y
ZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2
LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ2Zyb21jcHUn
Iik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+
Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0
cmVhbV9mcm9tY3B1OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGln
bmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9pbnN0cmVhbV9mcm9tY3B1OwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVf
ZnJvbWNwdTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0
ICAgPSAwOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVh
bV9mcm9tY3B1LCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fZnJvbWNwdSwgaW5zdHJlYW1f
c2l6ZV9mcm9tY3B1KTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfaW5zdHJlYW1fZnJvbWNwdTsK
CQl9CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJmcm9tY3B1Iiwgc3RyZWFtX3B0ciwgaW5z
dHJlYW1fc2l6ZV9mcm9tY3B1KTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBm
b3Igc3RyZWFtIGZyb21jcHUgKi8KCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgInRvY3B1
IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgImZyb21sbWVt
IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgkvKiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAi
dG9sbWVtIiAqLwoJc2l6ZV90IGxtZW1fYWRkcmVzc190b2xtZW0gPSBwYXJhbV9zdGFydDsKCXNp
emVfdCBsbWVtX2Fycl9zaXplX3RvbG1lbSA9IHBhcmFtX3NpemU7CglpbnQgbG1lbV9idXJzdF9z
aXplX3RvbG1lbSA9IG1heF9nZXRfYnVyc3Rfc2l6ZShtYXhmaWxlLCBOVUxMKTsKCWlmICggKGxt
ZW1fYWRkcmVzc190b2xtZW0gJSBsbWVtX2J1cnN0X3NpemVfdG9sbWVtKSAhPSAwICkgewoJCWZw
cmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gdG9sbWVtIHBhcmFtZXRl
ciAnbG1lbV9hZGRyZXNzX3RvbG1lbScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBh
IG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVz
c190b2xtZW0sIGxtZW1fYnVyc3Rfc2l6ZV90b2xtZW0gKTsKCX0KCWlmICggKGxtZW1fYXJyX3Np
emVfdG9sbWVtICUgbG1lbV9idXJzdF9zaXplX3RvbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0
ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHRvbG1lbSBwYXJhbWV0ZXIgJ2xtZW1f
YXJyX3NpemVfdG9sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlw
bGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9hcnJfc2l6ZV90b2xt
ZW0sIGxtZW1fYnVyc3Rfc2l6ZV90b2xtZW0gKTsKCX0KCWlmIChsbWVtX2Fycl9zaXplX3RvbG1l
bSA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgInRvbG1lbSIsIGxtZW1fYWRkcmVz
c190b2xtZW0sIGxtZW1fYXJyX3NpemVfdG9sbWVtKTsKCX0gZWxzZSB7CgkJbWF4X2lnbm9yZV9s
bWVtKGFjdGlvbnMsICJ0b2xtZW0iKTsKCX0KCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2Rl
IGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAidG9sbWVtIiAqLwoJCglpZiAodXNlX2NhbGxiYWNr
ICYmIGNiX2RhdGEtPmNvdW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNh
bGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsK
I3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2b2lkIFRvcF93cml0ZUxNZW0oCgl1aW50MzJfdCBwYXJh
bV9zaXplLAoJdWludDMyX3QgcGFyYW1fc3RhcnQsCgljb25zdCB1aW50OF90ICppbnN0cmVhbV9m
cm9tY3B1KQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBU
b3Bfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2Fz
IG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBUb3Bfd3JpdGVMTWVtX25vbmJsb2Nr
KHBhcmFtX3NpemUsIHBhcmFtX3N0YXJ0LCBpbnN0cmVhbV9mcm9tY3B1KTsKCUNIRUNLX05VTEwo
cnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9y
dW5fdCAqVG9wX3dyaXRlTE1lbV9ub25ibG9jaygKCXVpbnQzMl90IHBhcmFtX3NpemUsCgl1aW50
MzJfdCBwYXJhbV9zdGFydCwKCWNvbnN0IHVpbnQ4X3QgKmluc3RyZWFtX2Zyb21jcHUpCnsKCVRv
cF93cml0ZUxNZW1fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fc2l6ZSA9IHBhcmFtX3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9zdGFy
dCA9IHBhcmFtX3N0YXJ0OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fZnJvbWNwdSA9IGlu
c3RyZWFtX2Zyb21jcHU7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxp
c2VkLCBUb3Bfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZp
bGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxM
OwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25z
ID0gVG9wX3dyaXRlTE1lbV9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJm
YWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMs
ICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMp
OwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKHN0b3Jl
ZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7
CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxz
ZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdpbmUsIGFjdGlv
bnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVu
IGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9h
Y3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIFRvcF93cml0ZUxNZW1f
cnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3dyaXRlTE1lbV9ydW5fbm9u
YmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJs
ZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlRvcF93
cml0ZUxNZW1fcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3Bfd3JpdGVM
TWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUg
PSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lk
KikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190
ICphY3Rpb25zID0gVG9wX3dyaXRlTE1lbV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfRVJST1JTX1NUKGFj
dGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJ
cnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4g
PSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9k
YXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7
CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJp
ZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAn
d3JpdGVMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBh
cmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4g
dGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgog
Ki8Kdm9pZCBUb3Bfd3JpdGVMTWVtX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIFRvcF93
cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4g
PSBUb3Bfd3JpdGVMTWVtX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlv
bnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dh
aXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24t
YmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRlTE1lbScuCiAqIAogKgog
KiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFi
bGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2Yg
dGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVz
ZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5n
IG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRh
dGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAg
dG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4K
ICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9u
cywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpUb3Bfd3JpdGVMTWVt
X3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIFRvcF93cml0ZUxNZW1fYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9n
cm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF93
cml0ZUxNZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwg
TlVMTCwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsK
CW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7
CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJp
ZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAn
d3JpdGVMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZp
Y2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJh
eSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRo
ZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBUb3Bfd3JpdGVMTWVtX3J1
bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIFRvcF93cml0ZUxNZW1fYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IFRvcF93cml0ZUxNZW1f
cnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19O
VUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoK
LyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5j
dGlvbiBmb3IgdGhlIGludGVyZmFjZSAnd3JpdGVMTWVtJy4KICogCiAqCiAqIFNjaGVkdWxlIHRv
IHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJl
dHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0
IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2Fu
IGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3Rl
IHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBt
ZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJy
YXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRo
ZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhl
Y3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgog
Ki8KbWF4X3J1bl90ICpUb3Bfd3JpdGVMTWVtX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJy
YXlfdCAqZW5nYXJyYXksIFRvcF93cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
c1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShl
bmdhcnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3Rh
cnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxM
KSByZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdh
cnJheS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwg
YWN0YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX3dy
aXRlTE1lbV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAx
LCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJf
YWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlv
bnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5
LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsg
bWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFj
dGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJp
ZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFt
aWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBp
cyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGlu
IHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhm
aWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFj
ZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZh
Y2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rp
b25zX3QqIFRvcF93cml0ZUxNZW1fY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBUb3Bfd3Jp
dGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBUb3Bfd3JpdGVM
TWVtX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEws
IE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoKCgov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50
ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0qLwoKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhf
b2soU1QtPmVycm9ycykpIHsgaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1h
eF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJl
ZShtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBD
SEVDS19OVUxMKFZBTFVFLCBNRVNTQUdFLCBSRVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1h
eF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VS
Uk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxM
KSA/ICIiIDogc3RvcmVkX2Vycm9yLCBNRVNTQUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVT
U0FHRSk7IHJldHVybiBSRVQ7IH0KCiAKdHlwZWRlZiBzdHJ1Y3QgVG9wX2NhbGxiYWNrX3N0cmVh
bSB7Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAg
c2l6ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBUb3BfY2FsbGJhY2tfc3RyZWFtX3Q7Cgp0eXBl
ZGVmIHN0cnVjdCBUb3BfY2FsbGJhY2tfZGF0YSB7CglUb3BfY2FsbGJhY2tfc3RyZWFtX3Qgc3Ry
ZWFtWzJdOyAKCWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gVG9wX2NhbGxiYWNrX2RhdGFf
dDsKCnN0YXRpYyB2b2lkIFRvcF9jYWxsYmFja19pbnRlcm5hbCh2b2lkICpjYl9kYXRhKQp7CglU
b3BfY2FsbGJhY2tfZGF0YV90ICpkYXRhID0gKFRvcF9jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRh
OwoJZm9yIChpbnQgaSA9IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJVG9wX2NhbGxi
YWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYm
IChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwg
cy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxpZ25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoK
c3RhdGljIG1heF9hY3Rpb25zX3QqIFRvcF9jb252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAq
bWF4ZmlsZSwKCVRvcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRl
cm5hbF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJh
Y2tfZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4
ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBD
SEVDS19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRf
ZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAK
CglUb3BfY2FsbGJhY2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJhY2sg
PSAoY2FsbGJhY2tfZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsKCWlm
ICh1c2VfY2FsbGJhY2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihUb3BfY2FsbGJhY2tf
ZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlVu
YWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBjYWxsYmFjayBkYXRhIGluIGZ1bmN0
aW9uIFRvcF9jb252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2Rh
dGEtPm1heF9jb3VudCA9IDI7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tf
ZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZUb3BfY2FsbGJhY2tf
aW50ZXJuYWw7Cgl9CgoJLyogY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5ydW5fY3ljbGVfY291
bnQgKi8KCXVpbnQ2NF90IHRpY2tzX1RvcEtlcm5lbCA9IDkyMjMzNzIwMzY4NTQ3NzU4MDc7Cglt
YXhfc2V0X3RpY2tzKGFjdGlvbnMsICJUb3BLZXJuZWwiLCA5MjIzMzcyMDM2ODU0Nzc1ODA3KTsK
CUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLnJ1bl9j
eWNsZV9jb3VudCovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBUb3BLZXJuZWwuY3ljbGVzICovCgl1
aW50NjRfdCAqb3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNsZXMgPSBpbnRlcmZhY2VfYWN0aW9ucy0+
b3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNsZXM7CgltYXhfZ2V0X3VpbnQ2NHQoYWN0aW9ucywgIlRv
cEtlcm5lbCIsICJjeWNsZXMiLCBvdXRzY2FsYXJfVG9wS2VybmVsX2N5Y2xlcyk7CglDSEVDS19F
UlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5jeWNsZXMqLwoJCgkv
KiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLmVuICovCgl1aW50NjRfdCBpbnNjYWxhcl9Ub3BL
ZXJuZWxfZW4gPSAxOwoJbWF4X3NldF91aW50NjR0KGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiZW4i
LCBpbnNjYWxhcl9Ub3BLZXJuZWxfZW4pOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUg
Zm9yIHNjYWxhciBUb3BLZXJuZWwuZW4qLwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAi
ZnJvbWNwdSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywg
InRvY3B1IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgkvKiBjb2RlIGZvciBtZW1vcnktc3RyZWFtICJp
bnRyU3RyZWFtIiAqLwoJbWF4X2xtZW1fc2V0X2ludGVycnVwdF9vbihhY3Rpb25zLCAiaW50clN0
cmVhbSIpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIG1lbW9yeS1zdHJlYW0g
ImludHJTdHJlYW0iICovCgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAiZnJvbWxtZW0iICk7
CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAidG9sbWVtIiApOwoJ
Q0hFQ0tfRVJST1JTOwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDAp
IHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZy
ZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2
b2lkIFRvcCgKCXVpbnQ2NF90ICpvdXRzY2FsYXJfVG9wS2VybmVsX2N5Y2xlcykKewoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVG9wX3N0YXRpY19pbml0KTsK
CUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgKTsK
CW1heF9ydW5fdCAqcnVuID0gVG9wX25vbmJsb2NrKG91dHNjYWxhcl9Ub3BLZXJuZWxfY3ljbGVz
KTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0
KHJ1bik7Cn0KCm1heF9ydW5fdCAqVG9wX25vbmJsb2NrKAoJdWludDY0X3QgKm91dHNjYWxhcl9U
b3BLZXJuZWxfY3ljbGVzKQp7CglUb3BfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50
ZXJmYWNlX2FjdGlvbnMub3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNsZXMgPSBvdXRzY2FsYXJfVG9w
S2VybmVsX2N5Y2xlczsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlz
ZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4Zmls
ZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7
Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBUb3BfY29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25z
LCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRv
IGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VS
Uk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBO
VUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1h
eF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9
IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5j
LCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwg
TlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVl
KGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBUb3BfcnVuKAoJbWF4X2VuZ2luZV90ICpl
bmdpbmUsCglUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpy
dW4gPSBUb3BfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tf
TlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoK
bWF4X3J1bl90ICpUb3BfcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3Bf
YWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1h
eF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9
IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFj
dGlvbnMgPSBUb3BfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywg
MSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsK
CW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25i
bG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVD
S19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlvbnNf
ZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBh
ZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAK
ICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50
ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0
aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2b2lkIFRvcF9ydW5f
Z3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cykKewoJbWF4X3J1bl90ICpydW4gPSBUb3BfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
ICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQg
c3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcu
CiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmlj
ZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBz
dGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90
ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2lu
ZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sg
ZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3Jv
dXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25z
IHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0
aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpUb3Bf
cnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgVG9wX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21h
eF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBUb3BfY29udmVydF9pbnRl
cm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4
X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFj
dGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2Vk
IHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFy
YW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAq
CiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRo
ZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBl
bmdhcnJheS4KICovCnZvaWQgVG9wX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXks
IFRvcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0g
VG9wX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsK
fQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcg
ZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUg
dG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQg
cmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11
c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBj
YW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5v
dGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVk
IG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBh
cnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMg
VGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBl
eGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3Iu
CiAqLwptYXhfcnVuX3QgKlRvcF9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVu
Z2FycmF5LCBUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfZmlsZV90
ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSwgMCk7CglpbnQg
aTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUs
IGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCW1h
eF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJheS0+c2l6ZSAqIHNpemVv
ZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemU7IGkr
KyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX2NvbnZlcnRfaW50ZXJuYWwobWF4
ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rpb25z
ID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQltYXhf
c2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1h
eF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAwIDsg
aSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rpb25z
W2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9ucyk7
CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZh
Y2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBz
dHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVuY3Rp
b24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAq
IFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2luXSBp
bnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVuLgog
KiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBp
biBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogVG9wX2NvbnZlcnQobWF4X2ZpbGVf
dCAqbWF4ZmlsZSwgVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBU
b3BfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwg
TlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(TopKernel, 512, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 511, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 430, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 431, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 422, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 423, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 449, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 450, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 432, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 178, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 179, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 433, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 424, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 434, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 435, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 425, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 447, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 216, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 437, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 217, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 438, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 426, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 213, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 427, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 471, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 494, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 439, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 231, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 440, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 428, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 230, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 227, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 429, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 443, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 510, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 245, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 247, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 509, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 250, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 441, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 238, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 353, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 187, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 188, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 448, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 446, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 444, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 508, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 297, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 298, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 445, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 361, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 365, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 451, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 507, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 157, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 158, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 464, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 366, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 371, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 376, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 506, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 291, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 290, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 492, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 491, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 454, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 455, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 27, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 463, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 289, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 398, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 399, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 400, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 401, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 461, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 288, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 28, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 505, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 168, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 465, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 504, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 252, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 253, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 270, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 271, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 272, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 476, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 377, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 382, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 257, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 277, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 387, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 503, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 295, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 294, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 495, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 467, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 468, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 496, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 54, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 475, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 293, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 197, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 472, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 201, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 198, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 203, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 234, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 402, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 403, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 404, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 405, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 236, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 292, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 237, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 55, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 502, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 241, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 244, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 274, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 276, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 278, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 280, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 282, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 273, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 477, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 283, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 284, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 285, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 487, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 482, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 480, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 98, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 106, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 406, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 407, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 408, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 409, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 185, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 186, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 484, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 483, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 170, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 171, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 172, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 493, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 410, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 411, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 412, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 413, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 225, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 486, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 337, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 287, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 286, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 497, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 501, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 300, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 301, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 317, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 318, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 319, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 498, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 328, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 392, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 394, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 324, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 396, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 397, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 323, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 325, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 327, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 329, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 320, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 330, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 331, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 333, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 334, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 335, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 332, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 336, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 342, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 500, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 339, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 340, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 341, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 343, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 499, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 345, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 346, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 348, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 349, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 347, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302d02150089749c44a7637eb0a0c2633f32c6fc8c12db1aba02140b800f2c7ee86d0f15a2990ae941c8211a5a489e")
#endif

