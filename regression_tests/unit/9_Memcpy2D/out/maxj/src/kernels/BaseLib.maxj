package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar void1088_done = dfeBool().newInstance(this);
DFEVar seq1086_done = dfeBool().newInstance(this);
DFEVar seq1086_en = dfeBool().newInstance(this);
DFEVar metapipe1065_done = dfeBool().newInstance(this);
DFEVar metapipe1065_en = dfeBool().newInstance(this);
DFEVar metapipe1084_done = dfeBool().newInstance(this);
DFEVar metapipe1084_en = dfeBool().newInstance(this);
/* Bram_new { */
BramLib BRAM1046_0 = new BramLib(this, 96, 96, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ new int[] {1,1}, /* stride */ new int[] {96,1}, 1);
/* } Bram_new */
DFEVar void1053_done = dfeBool().newInstance(this);
DFEVar void1053_en = dfeBool().newInstance(this);
DFEVar void1055_done = dfeBool().newInstance(this);
DFEVar void1055_en = dfeBool().newInstance(this);
DFEVar pipe1063_done = dfeBool().newInstance(this);
DFEVar pipe1063_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg1050_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg1050_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void1053_rst_done = dfeBool().newInstance(this);
DFEVar FIFO1047_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe1063_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain1057_done = dfeBool().newInstance(this);
DFEVar pipe1076_done = dfeBool().newInstance(this);
DFEVar pipe1076_en = dfeBool().newInstance(this);
DFEVar void1080_done = dfeBool().newInstance(this);
DFEVar void1080_en = dfeBool().newInstance(this);
DFEVar void1082_done = dfeBool().newInstance(this);
DFEVar void1082_en = dfeBool().newInstance(this);
DFEVar pipe1076_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain1070_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg1077_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg1077_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void1080_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar const1_FixedPoint73 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const96_FixedPoint48 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const512_FixedPoint71 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const0_FixedPoint54 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const9216_FixedPoint1 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 9216 ); 
}
