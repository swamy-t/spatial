/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

int DRAM1003 = 1048576;

int DRAM1004 = 2097152;









/* Emitting Hwblock dependencies { */
// Dep: const9216_FixedPoint1 = ConstFixPt(9216,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$Signed,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B32,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint54 = ConstFixPt(0,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$Signed,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B32,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint48 = ConstFixPt(96,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$Signed,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B32,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint71 = ConstFixPt(512,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$Signed,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B32,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint73 = ConstFixPt(1,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$Signed,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B32,Memcpy2D$@2ae099cb.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: Bit116 = ConstBit(true)
DFEVar Bit116 = constant.var( true );
// Dep: DRAM1003 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: DRAM1004 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(1082) -> Map(Sym(902) -> _chain[1].read()), Sym(1055) -> Map(Sym(874) -> _chain[0].read()), Sym(1080) -> Map(Sym(902) -> _chain[0].read()), Sym(1063) -> Map(Sym(874) -> _chain[1].read()), Sym(1076) -> Map(), Sym(1053) -> Map()) */
DFEVar void1088_en = top_en;
top_done <== void1088_done;
// Hwblock: childrenOf(void1088) = List(Sym(1086))
/* void1088_SeqSM void1088 { */
SMIO void1088_sm = addStateMachine("void1088_sm", new void1088_SeqSM(this));
    void1088_sm.connectInput("sm_en", void1088_en);
    void1088_done <== stream.offset(void1088_sm.getOutput("sm_done"),-1);
void1088_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1088_rst_en = void1088_sm.getOutput("rst_en");
void1088_sm.connectInput("s0_done", seq1086_done);
seq1086_en <== void1088_sm.getOutput("s0_en");
DFEVar void1088_datapath_en = void1088_en & ~void1088_rst_en;
DFEVar void1088_ctr_en = void1088_datapath_en;
/* } void1088_SeqSM void1088 */
/* ParPipeForeach seq1086 = ParPipeForeach(CounterChain1045) { */
{
/* SeqSM to be emitted */
/* seq1086_SeqSM seq1086 { */
SMIO seq1086_sm = addStateMachine("seq1086_sm", new seq1086_SeqSM(this));
    seq1086_sm.connectInput("sm_en", seq1086_en);
    seq1086_done <== stream.offset(seq1086_sm.getOutput("sm_done"),-1);
DFEVar seq1086_niter = ((const96_FixedPoint48 - const0_FixedPoint54) / (const96_FixedPoint48 * 1)) * ((const96_FixedPoint48 - const0_FixedPoint54) / (const96_FixedPoint48 * 1));
seq1086_sm.connectInput("sm_numIter", seq1086_niter.cast(dfeUInt(32)));
DFEVar seq1086_rst_en = seq1086_sm.getOutput("rst_en");
seq1086_sm.connectInput("s0_done", metapipe1065_done);
metapipe1065_en <== seq1086_sm.getOutput("s0_en");
seq1086_sm.connectInput("s1_done", metapipe1084_done);
metapipe1084_en <== seq1086_sm.getOutput("s1_en");
DFEVar Counter1043_max_0 = const96_FixedPoint48;
DFEVar Counter1044_max_1 = const96_FixedPoint48;
DFEVar seq1086_datapath_en = seq1086_en;
DFEVar seq1086_ctr_en = metapipe1084_done;
/* CustomCounterChain { */
DFEVar CounterChain1045_en = metapipe1084_done;
DFEVar[] CounterChain1045_max = {const96_FixedPoint48,const96_FixedPoint48};
int[] CounterChain1045_strides = {96,96};
OffsetExpr CounterChain1045_offset = stream.makeOffsetAutoLoop("CounterChain1045_offset");
SMIO CounterChain1045 = addStateMachine("CounterChain1045_sm", new CounterChain1045_CtrSM(owner, CounterChain1045_strides)); // gap = 0
CounterChain1045.connectInput("en", CounterChain1045_en);
CounterChain1045.connectInput("reset", seq1086_done);
DFEVar CounterChain1045_maxed = CounterChain1045.getOutput("saturated");
DFEVar CounterChain1045_done = stream.offset(CounterChain1045.getOutput("done"), -1);
OffsetExpr CounterChain1045_additionalOffset = new OffsetExpr();
CounterChain1045.connectInput("max0", CounterChain1045_max[0]);
DFEVar Counter1043 = CounterChain1045.getOutput("counter0");
CounterChain1045.connectInput("max1", CounterChain1045_max[1]);
DFEVar Counter1044 = CounterChain1045.getOutput("counter1");
/* } CustomCounterChain */
/* } seq1086_SeqSM seq1086 */
DFEVar seq1086_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint868 = Counter1043;
DFEVar FixedPoint869 = Counter1044;
// FIFO FIFO1047 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint71, const0_FixedPoint54);
DFEVector<DFEVar> FIFO1047_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO1047_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO1047_readEn = dfeBool().newInstance(this);
DFEVar FIFO1047_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe1065 = ParPipeForeach(CounterChain1049) { */
{
/* MPSM to be emitted */
/* metapipe1065_MPSM metapipe1065 { */
SMIO metapipe1065_sm = addStateMachine("metapipe1065_sm", new metapipe1065_MPSM(this));
    metapipe1065_sm.connectInput("sm_en", metapipe1065_en);
    metapipe1065_done <== stream.offset(metapipe1065_sm.getOutput("sm_done"),-1);
DFEVar metapipe1065_niter = ((const96_FixedPoint48 - const0_FixedPoint54) / (const1_FixedPoint73 * 1));
metapipe1065_sm.connectInput("sm_numIter", metapipe1065_niter.cast(dfeUInt(32)));
DFEVar metapipe1065_rst_en = metapipe1065_sm.getOutput("rst_en");
metapipe1065_sm.connectInput("s0_done", void1053_done);
void1053_en <== metapipe1065_sm.getOutput("s0_en");
metapipe1065_sm.connectInput("s1_done", void1055_done);
void1055_en <== metapipe1065_sm.getOutput("s1_en");
metapipe1065_sm.connectInput("s2_done", pipe1063_done);
pipe1063_en <== metapipe1065_sm.getOutput("s2_en");
DFEVar Counter1048_max_0 = const96_FixedPoint48;
DFEVar metapipe1065_datapath_en = metapipe1065_en;
DFEVar metapipe1065_ctr_en = void1053_done;
/* CustomCounterChain { */
DFEVar CounterChain1049_en = void1053_done;
DFEVar[] CounterChain1049_max = {Counter1048_max_0};
int[] CounterChain1049_strides = {1};
OffsetExpr CounterChain1049_offset = stream.makeOffsetAutoLoop("CounterChain1049_offset");
SMIO CounterChain1049 = addStateMachine("CounterChain1049_sm", new CounterChain1049_CtrSM(owner, CounterChain1049_strides)); // gap = 0
CounterChain1049.connectInput("en", CounterChain1049_en);
CounterChain1049.connectInput("reset", metapipe1065_done);
DFEVar CounterChain1049_maxed = CounterChain1049.getOutput("saturated");
DFEVar CounterChain1049_done = stream.offset(CounterChain1049.getOutput("done"), -1);
OffsetExpr CounterChain1049_additionalOffset = new OffsetExpr();
CounterChain1049.connectInput("max0", CounterChain1049_max[0]);
DFEVar Counter1048 = CounterChain1049.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe1065_MPSM metapipe1065 */
DFEVar metapipe1065_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint874 = Counter1048;
DblBufReg[] FixedPoint874_chain = spatialUtils.getRegChain(
              "metapipe1065_FixedPoint874", 3, FixedPoint874,
              new DFEVar[]{void1053_done,void1055_done,pipe1063_done});
// Unit pipe writtenIn(void1053) = List(Sym(1050))
//   reg1050 = Reflect(Reg_new(Sym(54)),Summary(mutable),List()), isAccum(reg1050) = false
/* PipeSM void1053 { */
OffsetExpr void1053_offset = stream.makeOffsetAutoLoop("void1053_offset");
SMIO void1053_sm = addStateMachine("void1053_sm", new PipeSM(this, 1));
    void1053_sm.connectInput("sm_en", void1053_en);
    void1053_done <== stream.offset(void1053_sm.getOutput("sm_done"),-1-void1053_offset);
DFEVar void1053_rst_en = void1053_sm.getOutput("rst_en");
void1053_sm.connectInput("rst_done", void1053_rst_done);
void1053_rst_done <== stream.offset(void1053_rst_en, -void1053_offset-1);
void1053_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void1053_sm.connectInput("ctr_done", stream.offset(void1053_sm.getOutput("ctr_en"), -1));
DFEVar void1053_datapath_en = void1053_en & ~void1053_rst_en;
DFEVar void1053_ctr_en = void1053_datapath_en;
/* } PipeSM void1053 */
/* Block void1053 Unitpipe { */
{
DFEVar FixedPoint876 = FixedPoint868 + FixedPoint874;
DFEVar FixedPoint877 = FixedPoint876 * const96_FixedPoint48;
DFEVar FixedPoint878 = FixedPoint877 + FixedPoint869;
/* Reg_write { */
reg1050_0_lib.write(FixedPoint878, void1053_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@13982a0a, numDuplicates = 1 */
}
/* } Block void1053 Unitpipe */
DFEVar FixedPoint1054 = reg1050_0_lib.read(1); // reg read
MemoryCmdGenLib void1055 = new MemoryCmdGenLib(
              this,
              void1055_en, void1055_done,
              DRAM1003, FixedPoint1054,
              "DRAM1003_void1055_in",
              96,
              FIFO1047_readEn, FIFO1047_rdata);
FIFO1047_writeEn <== void1055_en;
FIFO1047_wdata <== FIFO1047_rdata;
/* ParPipeForeach pipe1063 = ParPipeForeach(CounterChain1057) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1063 { */
OffsetExpr pipe1063_offset = stream.makeOffsetAutoLoop("pipe1063_offset");
SMIO pipe1063_sm = addStateMachine("pipe1063_sm", new PipeSM(this, 1));
    pipe1063_sm.connectInput("sm_en", pipe1063_en);
    pipe1063_done <== stream.offset(pipe1063_sm.getOutput("sm_done"),-1-pipe1063_offset);
DFEVar pipe1063_rst_en = pipe1063_sm.getOutput("rst_en");
pipe1063_sm.connectInput("rst_done", pipe1063_rst_done);
pipe1063_rst_done <== stream.offset(pipe1063_rst_en, -pipe1063_offset-1);
pipe1063_sm.connectInput("sm_maxIn_0", const96_FixedPoint48);
DFEVar Counter1056_max_0 = pipe1063_sm.getOutput("ctr_maxOut_0");
pipe1063_sm.connectInput("ctr_done", CounterChain1057_done);
DFEVar pipe1063_datapath_en = pipe1063_sm.getOutput("ctr_en");
DFEVar pipe1063_ctr_en = pipe1063_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1057_en = pipe1063_datapath_en;
DFEVar[] CounterChain1057_max = {Counter1056_max_0};
int[] CounterChain1057_strides = {1};
OffsetExpr CounterChain1057_offset = stream.makeOffsetAutoLoop("CounterChain1057_offset");
SMIO CounterChain1057 = addStateMachine("CounterChain1057_sm", new CounterChain1057_CtrSM(owner, CounterChain1057_strides)); // gap = 0
CounterChain1057.connectInput("en", CounterChain1057_en);
CounterChain1057.connectInput("reset", pipe1063_done);
DFEVar CounterChain1057_maxed = CounterChain1057.getOutput("saturated");
CounterChain1057_done <== stream.offset(CounterChain1057.getOutput("done"), -1);
OffsetExpr CounterChain1057_additionalOffset = new OffsetExpr();
CounterChain1057.connectInput("max0", CounterChain1057_max[0]);
DFEVar Counter1056 = CounterChain1057.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1063 */
DFEVar pipe1063_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint886 = Counter1056;
// DFEVar Vector1058 = Par_pop_fifo(FIFO1047, 1);
FIFO1047_readEn <== pipe1063_ctr_en;
DFEVector<DFEVar> Vector1058 = FIFO1047_rdata;
DFEVar FixedPoint889 = FixedPoint874_chain[1].read() * const96_FixedPoint48;
DFEVar FixedPoint890 = FixedPoint889 + FixedPoint886;
DFEVector<DFEVar> Vector892 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint890));
DFEVar FixedPoint1059 = Vector1058[0];
DFEVector<DFEVar> Vector1060 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1059));
/* Bram_store { */
BRAM1046_0.connectWport(FixedPoint874_chain[1].read(), FixedPoint886, Vector1060, pipe1063_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe1063 */
}
/* } ParPipeForeach metapipe1065 */
// FIFO FIFO1066 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint71, const0_FixedPoint54);
DFEVector<DFEVar> FIFO1066_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO1066_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO1066_readEn = dfeBool().newInstance(this);
DFEVar FIFO1066_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe1084 = ParPipeForeach(CounterChain1068) { */
{
/* MPSM to be emitted */
/* metapipe1084_MPSM metapipe1084 { */
SMIO metapipe1084_sm = addStateMachine("metapipe1084_sm", new metapipe1084_MPSM(this));
    metapipe1084_sm.connectInput("sm_en", metapipe1084_en);
    metapipe1084_done <== stream.offset(metapipe1084_sm.getOutput("sm_done"),-1);
DFEVar metapipe1084_niter = ((const96_FixedPoint48 - const0_FixedPoint54) / (const1_FixedPoint73 * 1));
metapipe1084_sm.connectInput("sm_numIter", metapipe1084_niter.cast(dfeUInt(32)));
DFEVar metapipe1084_rst_en = metapipe1084_sm.getOutput("rst_en");
metapipe1084_sm.connectInput("s0_done", pipe1076_done);
pipe1076_en <== metapipe1084_sm.getOutput("s0_en");
metapipe1084_sm.connectInput("s1_done", void1080_done);
void1080_en <== metapipe1084_sm.getOutput("s1_en");
metapipe1084_sm.connectInput("s2_done", void1082_done);
void1082_en <== metapipe1084_sm.getOutput("s2_en");
DFEVar Counter1067_max_0 = const96_FixedPoint48;
DFEVar metapipe1084_datapath_en = metapipe1084_en;
DFEVar metapipe1084_ctr_en = pipe1076_done;
/* CustomCounterChain { */
DFEVar CounterChain1068_en = pipe1076_done;
DFEVar[] CounterChain1068_max = {Counter1067_max_0};
int[] CounterChain1068_strides = {1};
OffsetExpr CounterChain1068_offset = stream.makeOffsetAutoLoop("CounterChain1068_offset");
SMIO CounterChain1068 = addStateMachine("CounterChain1068_sm", new CounterChain1068_CtrSM(owner, CounterChain1068_strides)); // gap = 0
CounterChain1068.connectInput("en", CounterChain1068_en);
CounterChain1068.connectInput("reset", metapipe1084_done);
DFEVar CounterChain1068_maxed = CounterChain1068.getOutput("saturated");
DFEVar CounterChain1068_done = stream.offset(CounterChain1068.getOutput("done"), -1);
OffsetExpr CounterChain1068_additionalOffset = new OffsetExpr();
CounterChain1068.connectInput("max0", CounterChain1068_max[0]);
DFEVar Counter1067 = CounterChain1068.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe1084_MPSM metapipe1084 */
DFEVar metapipe1084_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint902 = Counter1067;
DblBufReg[] FixedPoint902_chain = spatialUtils.getRegChain(
              "metapipe1084_FixedPoint902", 3, FixedPoint902,
              new DFEVar[]{pipe1076_done,void1080_done,void1082_done});
/* ParPipeForeach pipe1076 = ParPipeForeach(CounterChain1070) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1076 { */
OffsetExpr pipe1076_offset = stream.makeOffsetAutoLoop("pipe1076_offset");
SMIO pipe1076_sm = addStateMachine("pipe1076_sm", new PipeSM(this, 1));
    pipe1076_sm.connectInput("sm_en", pipe1076_en);
    pipe1076_done <== stream.offset(pipe1076_sm.getOutput("sm_done"),-1-pipe1076_offset);
DFEVar pipe1076_rst_en = pipe1076_sm.getOutput("rst_en");
pipe1076_sm.connectInput("rst_done", pipe1076_rst_done);
pipe1076_rst_done <== stream.offset(pipe1076_rst_en, -pipe1076_offset-1);
pipe1076_sm.connectInput("sm_maxIn_0", const96_FixedPoint48);
DFEVar Counter1069_max_0 = pipe1076_sm.getOutput("ctr_maxOut_0");
pipe1076_sm.connectInput("ctr_done", CounterChain1070_done);
DFEVar pipe1076_datapath_en = pipe1076_sm.getOutput("ctr_en");
DFEVar pipe1076_ctr_en = pipe1076_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1070_en = pipe1076_datapath_en;
DFEVar[] CounterChain1070_max = {Counter1069_max_0};
int[] CounterChain1070_strides = {1};
OffsetExpr CounterChain1070_offset = stream.makeOffsetAutoLoop("CounterChain1070_offset");
SMIO CounterChain1070 = addStateMachine("CounterChain1070_sm", new CounterChain1070_CtrSM(owner, CounterChain1070_strides)); // gap = 0
CounterChain1070.connectInput("en", CounterChain1070_en);
CounterChain1070.connectInput("reset", pipe1076_done);
DFEVar CounterChain1070_maxed = CounterChain1070.getOutput("saturated");
CounterChain1070_done <== stream.offset(CounterChain1070.getOutput("done"), -1);
OffsetExpr CounterChain1070_additionalOffset = new OffsetExpr();
CounterChain1070.connectInput("max0", CounterChain1070_max[0]);
DFEVar Counter1069 = CounterChain1070.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1076 */
DFEVar pipe1076_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint905 = Counter1069;
DFEVar FixedPoint906 = FixedPoint902 * const96_FixedPoint48;
DFEVar FixedPoint907 = FixedPoint906 + FixedPoint905;
DFEVector<DFEVar> Vector908 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint907));
/* Bram_load { */
DFEVector<DFEVar> Vector1071 = new DFEVectorType<DFEVar>(BRAM1046_0.type, 1).newInstance(this, Arrays.asList(BRAM1046_0.connectRport(FixedPoint902, FixedPoint905, new int[] {0}))); //r5
/* } Bram_load */
DFEVar Bit912 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit912 <== FixedPoint905 < const96_FixedPoint48;
DFEVector<DFEVar> Vector913 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit912));
DFEVar FixedPoint1072 = Vector1071[0];
DFEVector<DFEVar> Vector1073 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1072));
// Par_push_fifo(FIFO1066, Vector1073, Vector913, true);
FIFO1066_writeEn <== pipe1076_ctr_en;
FIFO1066_wdata <== Vector1073;
}
/* } ParPipeForeach pipe1076 */
// Unit pipe writtenIn(void1080) = List(Sym(1077))
//   reg1077 = Reflect(Reg_new(Sym(54)),Summary(mutable),List()), isAccum(reg1077) = false
/* PipeSM void1080 { */
OffsetExpr void1080_offset = stream.makeOffsetAutoLoop("void1080_offset");
SMIO void1080_sm = addStateMachine("void1080_sm", new PipeSM(this, 1));
    void1080_sm.connectInput("sm_en", void1080_en);
    void1080_done <== stream.offset(void1080_sm.getOutput("sm_done"),-1-void1080_offset);
DFEVar void1080_rst_en = void1080_sm.getOutput("rst_en");
void1080_sm.connectInput("rst_done", void1080_rst_done);
void1080_rst_done <== stream.offset(void1080_rst_en, -void1080_offset-1);
void1080_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void1080_sm.connectInput("ctr_done", stream.offset(void1080_sm.getOutput("ctr_en"), -1));
DFEVar void1080_datapath_en = void1080_en & ~void1080_rst_en;
DFEVar void1080_ctr_en = void1080_datapath_en;
/* } PipeSM void1080 */
/* Block void1080 Unitpipe { */
{
DFEVar FixedPoint919 = FixedPoint868 + FixedPoint902_chain[0].read();
DFEVar FixedPoint920 = FixedPoint919 * const96_FixedPoint48;
DFEVar FixedPoint921 = FixedPoint920 + FixedPoint869;
/* Reg_write { */
reg1077_0_lib.write(FixedPoint921, void1080_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@13982a0a, numDuplicates = 1 */
}
/* } Block void1080 Unitpipe */
DFEVar FixedPoint1081 = reg1077_0_lib.read(1); // reg read
// void1082: Offchip_store_cmd(DRAM1004,FIFO1066, FixedPoint1081, const96_FixedPoint48, 1)
MemoryCmdStLib void1082 = new MemoryCmdStLib(
          this,
          void1082_en, void1082_done,
          DRAM1004, FixedPoint1081,
          "DRAM1004_void1082_out",
          const96_FixedPoint48,
          FIFO1066_writeEn, FIFO1066_wdata);
FIFO1066_readEn <== void1082_en;
}
/* } ParPipeForeach metapipe1084 */
}
/* } ParPipeForeach seq1086 */



















// rdone signals for N-Buffers go here
reg1050_0_lib.connectStageCtrl(void1055_done, void1055_en, new int[] { 1 }); /*read*/
reg1050_0_lib.connectStageCtrl(void1053_done, void1053_en, new int[] { 0 }); /*write*/
reg1050_0_lib.connectUnwrittenPorts(new int[] {1});
reg1050_0_lib.connectUnreadPorts(new int[] {0});
reg1050_0_lib.connectUntouchedPorts(new int[] {});
reg1050_0_lib.connectDummyBroadcast();
reg1077_0_lib.connectStageCtrl(void1082_done, void1082_en, new int[] { 1 }); /*read*/
reg1077_0_lib.connectStageCtrl(void1080_done, void1080_en, new int[] { 0 }); /*write*/
reg1077_0_lib.connectUnwrittenPorts(new int[] {1});
reg1077_0_lib.connectUnreadPorts(new int[] {0});
reg1077_0_lib.connectUntouchedPorts(new int[] {});
reg1077_0_lib.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
