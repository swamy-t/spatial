/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);







/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint1 = ConstFixPt(0,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$Signed,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$B32,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argin123 = Reflect(Argin_new(Sym(1)),Summary(mutable),List())
// Dep: const4_FixedPoint8 = ConstFixPt(4,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$Signed,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$B32,InOutArg$@76fe8d1b.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argout124 = Reflect(Argout_new(Sym(1)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void132_en = top_en;
top_done <== void132_done;
// Hwblock: childrenOf(void132) = List(Sym(130))
/* void132_SeqSM void132 { */
SMIO void132_sm = addStateMachine("void132_sm", new void132_SeqSM(this));
    void132_sm.connectInput("sm_en", void132_en);
    void132_done <== stream.offset(void132_sm.getOutput("sm_done"),-1);
void132_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void132_rst_en = void132_sm.getOutput("rst_en");
void132_sm.connectInput("s0_done", void130_done);
void130_en <== void132_sm.getOutput("s0_en");
DFEVar void132_datapath_en = void132_en & ~void132_rst_en;
DFEVar void132_ctr_en = void132_datapath_en;
/* } void132_SeqSM void132 */
// Unit pipe writtenIn(void130) = List(Sym(124))
//   argout124 = Reflect(Argout_new(Sym(1)),Summary(mutable),List()), isAccum(argout124) = false
/* PipeSM void130 { */
OffsetExpr void130_offset = stream.makeOffsetAutoLoop("void130_offset");
SMIO void130_sm = addStateMachine("void130_sm", new PipeSM(this, 1));
    void130_sm.connectInput("sm_en", void130_en);
    void130_done <== stream.offset(void130_sm.getOutput("sm_done"),-1-void130_offset);
DFEVar void130_rst_en = void130_sm.getOutput("rst_en");
void130_sm.connectInput("rst_done", void130_rst_done);
void130_rst_done <== stream.offset(void130_rst_en, -void130_offset-1);
void130_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void130_sm.connectInput("ctr_done", stream.offset(void130_sm.getOutput("ctr_en"), -1));
DFEVar void130_datapath_en = void130_en & ~void130_rst_en;
DFEVar void130_ctr_en = void130_datapath_en;
/* } PipeSM void130 */
/* Block void130 Unitpipe { */
{
DFEVar Bit10 = constant.var( true );
DFEVar FixedPoint127 = FixedPoint126 + const4_FixedPoint8;
/* Reg_write { */
io.scalarOutput("argout124", FixedPoint127, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@23006ff2, numDuplicates = 1 */
}
/* } Block void130 Unitpipe */











// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
