package engine;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

/**
 * FFMem: Implement addressable memory using flip-flops.
 * This is so that small memories (typically created when an array is banked
 * by a large factor) do not waste precious BRAMs.
 */
class FFMem extends OnChipMem {

  DFEVar[] m;
  DFEVar addrDelay;

  /**
   * Create a new FFMem of 'size' words of type 'type'
   * @param type: Type of each word
   * @param size: Number of words
   */
  FFMem(KernelLib owner, DFEType type, int size) {
    super(owner, type, size);
    System.out.println("***** CREATING FFMem of size " + size + " *****");
    m = new DFEVar[size];
    for (int i=0; i<size; i++) {
      m[i] = type.newInstance(this);
    }
  }

  DFEVar read(DFEVar srcAddr) {
    if (size == 1) {
      return m[0];
    } else {
      DFEVar raddr = srcAddr.cast(dfeUInt(addrBits));
      return control.mux(raddr, m);
    }
  }

  void write(DFEVar dstAddr, DFEVar dstData, DFEVar en) {
    DFEVar waddr;
    if (size == 1) {
      waddr = constant.var(0);
    } else {
      waddr = dstAddr.cast(dfeUInt(addrBits));
    }
    for (int i=0; i<size; i++) {
      DFEVar wen = en & (waddr === i);
      m[i] <== Reductions.streamHold(dstData, wen);
    }
  }

  DFEVar accum(DFEVar dstAddr, DFEVar dataIn, DFEVar en) {
    DFEVar waddr;
    if (size == 1) {
      waddr = constant.var(0);
    } else {
      waddr = dstAddr.cast(dfeUInt(addrBits));
    }
    for (int i=0; i<size; i++) {
      DFEVar wen = en & (waddr === i);
      m[i] <== Reductions.streamHold(dataIn, wen);
    }
    return m[0];

  }

  void write(DFEVar dstAddr, DFEVar dstData) {
    write(dstAddr, dstData, constant.var(true));
  }
}
