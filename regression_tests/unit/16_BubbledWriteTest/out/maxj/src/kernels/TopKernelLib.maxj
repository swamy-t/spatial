/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

int DRAM2772 = 1048576;

int DRAM2773 = 2097152;


int DRAM2774 = 3145728;


int DRAM2775 = 4194304;

int DRAM2776 = 5242880;

int DRAM2777 = 6291456;











/* Emitting Hwblock dependencies { */
// Dep: const192_FixedPoint1 = ConstFixPt(192,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint246 = ConstFixPt(96,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const960_FixedPoint97 = ConstFixPt(960,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint105 = ConstFixPt(0,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint116 = ConstFixPt(512,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM2772 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: const1_FixedPoint119 = ConstFixPt(1,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM2773 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: const5_FixedPoint143 = ConstFixPt(5,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$Signed,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B32,BubbledWriteTest$@46b12f3d.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM2776 = Reflect(Offchip_new(Sym(246)),Summary(mutable),List())
// Dep: DRAM2775 = Reflect(Offchip_new(Sym(246)),Summary(mutable),List())
// Dep: DRAM2777 = Reflect(Offchip_new(Sym(246)),Summary(mutable),List())
// Dep: Bit180 = ConstBit(true)
DFEVar Bit180 = constant.var( true );
// Dep: DRAM2774 = Reflect(Offchip_new(Sym(97)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(2911) -> Map(Sym(2396) -> _chain[0].read()), Sym(2935) -> Map(Sym(2396) -> _chain[2].read()), Sym(2923) -> Map(Sym(2396) -> _chain[1].read()), Sym(2952) -> Map(Sym(2396) -> _chain[3].read()), Sym(2897) -> Map(), Sym(2899) -> Map()) */
DFEVar void2958_en = top_en;
top_done <== void2958_done;
// Hwblock: childrenOf(void2958) = List(Sym(2956))
/* void2958_SeqSM void2958 { */
SMIO void2958_sm = addStateMachine("void2958_sm", new void2958_SeqSM(this));
    void2958_sm.connectInput("sm_en", void2958_en);
    void2958_done <== stream.offset(void2958_sm.getOutput("sm_done"),-1);
void2958_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2958_rst_en = void2958_sm.getOutput("rst_en");
void2958_sm.connectInput("s0_done", seq2956_done);
seq2956_en <== void2958_sm.getOutput("s0_en");
DFEVar void2958_datapath_en = void2958_en & ~void2958_rst_en;
DFEVar void2958_ctr_en = void2958_datapath_en;
/* } void2958_SeqSM void2958 */
/* ParPipeForeach seq2956 = ParPipeForeach(CounterChain2857) { */
{
/* SeqSM to be emitted */
/* seq2956_SeqSM seq2956 { */
SMIO seq2956_sm = addStateMachine("seq2956_sm", new seq2956_SeqSM(this));
    seq2956_sm.connectInput("sm_en", seq2956_en);
    seq2956_done <== stream.offset(seq2956_sm.getOutput("sm_done"),-1);
DFEVar seq2956_niter = ((const192_FixedPoint1 - const0_FixedPoint105) / (const96_FixedPoint246 * 1));
seq2956_sm.connectInput("sm_numIter", seq2956_niter.cast(dfeUInt(32)));
DFEVar seq2956_rst_en = seq2956_sm.getOutput("rst_en");
seq2956_sm.connectInput("s0_done", void2869_done);
void2869_en <== seq2956_sm.getOutput("s0_en");
seq2956_sm.connectInput("s1_done", void2881_done);
void2881_en <== seq2956_sm.getOutput("s1_en");
seq2956_sm.connectInput("s2_done", metapipe2954_done);
metapipe2954_en <== seq2956_sm.getOutput("s2_en");
DFEVar Counter2856_max_0 = const192_FixedPoint1;
DFEVar seq2956_datapath_en = seq2956_en;
DFEVar seq2956_ctr_en = metapipe2954_done;
/* CustomCounterChain { */
DFEVar CounterChain2857_en = metapipe2954_done;
DFEVar[] CounterChain2857_max = {const192_FixedPoint1};
int[] CounterChain2857_strides = {96};
OffsetExpr CounterChain2857_offset = stream.makeOffsetAutoLoop("CounterChain2857_offset");
SMIO CounterChain2857 = addStateMachine("CounterChain2857_sm", new CounterChain2857_CtrSM(owner, CounterChain2857_strides)); // gap = 0
CounterChain2857.connectInput("en", CounterChain2857_en);
CounterChain2857.connectInput("reset", seq2956_done);
DFEVar CounterChain2857_maxed = CounterChain2857.getOutput("saturated");
DFEVar CounterChain2857_done = stream.offset(CounterChain2857.getOutput("done"), -1);
OffsetExpr CounterChain2857_additionalOffset = new OffsetExpr();
CounterChain2857.connectInput("max0", CounterChain2857_max[0]);
DFEVar Counter2856 = CounterChain2857.getOutput("counter0");
/* } CustomCounterChain */
/* } seq2956_SeqSM seq2956 */
DFEVar seq2956_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2363 = Counter2856;
// FIFO FIFO2858 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2858_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2858_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2858_readEn = dfeBool().newInstance(this);
DFEVar FIFO2858_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2869) = List()
/* void2869_MPSM void2869 { */
SMIO void2869_sm = addStateMachine("void2869_sm", new void2869_MPSM(this));
    void2869_sm.connectInput("sm_en", void2869_en);
    void2869_done <== stream.offset(void2869_sm.getOutput("sm_done"),-1);
void2869_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2869_rst_en = void2869_sm.getOutput("rst_en");
void2869_sm.connectInput("s0_done", void2859_done);
void2859_en <== void2869_sm.getOutput("s0_en");
void2869_sm.connectInput("s1_done", pipe2867_done);
pipe2867_en <== void2869_sm.getOutput("s1_en");
DFEVar void2869_datapath_en = void2869_en & ~void2869_rst_en;
DFEVar void2869_ctr_en = void2869_datapath_en;
/* } void2869_MPSM void2869 */
/* Block void2869 Unitpipe { */
{
MemoryCmdGenLib void2859 = new MemoryCmdGenLib(
              this,
              void2859_en, void2859_done,
              DRAM2772, FixedPoint2363,
              "DRAM2772_void2859_in",
              96,
              FIFO2858_readEn, FIFO2858_rdata);
FIFO2858_writeEn <== void2859_en;
FIFO2858_wdata <== FIFO2858_rdata;
/* ParPipeForeach pipe2867 = ParPipeForeach(CounterChain2861) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2867 { */
OffsetExpr pipe2867_offset = stream.makeOffsetAutoLoop("pipe2867_offset");
SMIO pipe2867_sm = addStateMachine("pipe2867_sm", new PipeSM(this, 1));
    pipe2867_sm.connectInput("sm_en", pipe2867_en);
    pipe2867_done <== stream.offset(pipe2867_sm.getOutput("sm_done"),-1-pipe2867_offset);
DFEVar pipe2867_rst_en = pipe2867_sm.getOutput("rst_en");
pipe2867_sm.connectInput("rst_done", pipe2867_rst_done);
pipe2867_rst_done <== stream.offset(pipe2867_rst_en, -pipe2867_offset-1);
pipe2867_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2860_max_0 = pipe2867_sm.getOutput("ctr_maxOut_0");
pipe2867_sm.connectInput("ctr_done", CounterChain2861_done);
DFEVar pipe2867_datapath_en = pipe2867_sm.getOutput("ctr_en");
DFEVar pipe2867_ctr_en = pipe2867_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2861_en = pipe2867_datapath_en;
DFEVar[] CounterChain2861_max = {const96_FixedPoint246};
int[] CounterChain2861_strides = {1};
OffsetExpr CounterChain2861_offset = stream.makeOffsetAutoLoop("CounterChain2861_offset");
SMIO CounterChain2861 = addStateMachine("CounterChain2861_sm", new CounterChain2861_CtrSM(owner, CounterChain2861_strides)); // gap = 0
CounterChain2861.connectInput("en", CounterChain2861_en);
CounterChain2861.connectInput("reset", pipe2867_done);
DFEVar CounterChain2861_maxed = CounterChain2861.getOutput("saturated");
CounterChain2861_done <== stream.offset(CounterChain2861.getOutput("done"), -1);
OffsetExpr CounterChain2861_additionalOffset = new OffsetExpr();
CounterChain2861.connectInput("max0", CounterChain2861_max[0]);
DFEVar Counter2860 = CounterChain2861.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2867 */
DFEVar pipe2867_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2368 = Counter2860;
// DFEVar Vector2862 = Par_pop_fifo(FIFO2858, 1);
FIFO2858_readEn <== pipe2867_ctr_en;
DFEVector<DFEVar> Vector2862 = FIFO2858_rdata;
DFEVector<DFEVar> Vector2372 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2368));
DFEVar FixedPoint2863 = Vector2862[0];
DFEVector<DFEVar> Vector2864 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2863));
/* Bram_store { */
BRAM2854_0.connectWport(stream.offset(Vector2372, -pipe2867_offset),
              stream.offset(Vector2864, -pipe2867_offset), stream.offset(pipe2867_datapath_en & pipe2867_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2861),Block(Sym(2866)),List(List(Sym(2368))))*/, -pipe2867_offset), new int[] {0}); //w3.2
BRAM2854_1.connectBroadcastWport(stream.offset(Vector2372, -pipe2867_offset),
              stream.offset(Vector2864, -pipe2867_offset), stream.offset(pipe2867_datapath_en & pipe2867_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2861),Block(Sym(2866)),List(List(Sym(2368))))*/, -pipe2867_offset), new int[] {0,1,2}); //w3.2
BRAM2854_2.connectBroadcastWport(stream.offset(Vector2372, -pipe2867_offset),
              stream.offset(Vector2864, -pipe2867_offset), stream.offset(pipe2867_datapath_en & pipe2867_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2861),Block(Sym(2866)),List(List(Sym(2368))))*/, -pipe2867_offset), new int[] {0,1,2,3,4}); //w3.2
/* } Bram_store */
}
/* } ParPipeForeach pipe2867 */
}
/* } Block void2869 Unitpipe */
// FIFO FIFO2870 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2870_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2870_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2870_readEn = dfeBool().newInstance(this);
DFEVar FIFO2870_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2881) = List()
/* void2881_MPSM void2881 { */
SMIO void2881_sm = addStateMachine("void2881_sm", new void2881_MPSM(this));
    void2881_sm.connectInput("sm_en", void2881_en);
    void2881_done <== stream.offset(void2881_sm.getOutput("sm_done"),-1);
void2881_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2881_rst_en = void2881_sm.getOutput("rst_en");
void2881_sm.connectInput("s0_done", void2871_done);
void2871_en <== void2881_sm.getOutput("s0_en");
void2881_sm.connectInput("s1_done", pipe2879_done);
pipe2879_en <== void2881_sm.getOutput("s1_en");
DFEVar void2881_datapath_en = void2881_en & ~void2881_rst_en;
DFEVar void2881_ctr_en = void2881_datapath_en;
/* } void2881_MPSM void2881 */
/* Block void2881 Unitpipe { */
{
MemoryCmdGenLib void2871 = new MemoryCmdGenLib(
              this,
              void2871_en, void2871_done,
              DRAM2773, FixedPoint2363,
              "DRAM2773_void2871_in",
              96,
              FIFO2870_readEn, FIFO2870_rdata);
FIFO2870_writeEn <== void2871_en;
FIFO2870_wdata <== FIFO2870_rdata;
/* ParPipeForeach pipe2879 = ParPipeForeach(CounterChain2873) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2879 { */
OffsetExpr pipe2879_offset = stream.makeOffsetAutoLoop("pipe2879_offset");
SMIO pipe2879_sm = addStateMachine("pipe2879_sm", new PipeSM(this, 1));
    pipe2879_sm.connectInput("sm_en", pipe2879_en);
    pipe2879_done <== stream.offset(pipe2879_sm.getOutput("sm_done"),-1-pipe2879_offset);
DFEVar pipe2879_rst_en = pipe2879_sm.getOutput("rst_en");
pipe2879_sm.connectInput("rst_done", pipe2879_rst_done);
pipe2879_rst_done <== stream.offset(pipe2879_rst_en, -pipe2879_offset-1);
pipe2879_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2872_max_0 = pipe2879_sm.getOutput("ctr_maxOut_0");
pipe2879_sm.connectInput("ctr_done", CounterChain2873_done);
DFEVar pipe2879_datapath_en = pipe2879_sm.getOutput("ctr_en");
DFEVar pipe2879_ctr_en = pipe2879_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2873_en = pipe2879_datapath_en;
DFEVar[] CounterChain2873_max = {const96_FixedPoint246};
int[] CounterChain2873_strides = {1};
OffsetExpr CounterChain2873_offset = stream.makeOffsetAutoLoop("CounterChain2873_offset");
SMIO CounterChain2873 = addStateMachine("CounterChain2873_sm", new CounterChain2873_CtrSM(owner, CounterChain2873_strides)); // gap = 0
CounterChain2873.connectInput("en", CounterChain2873_en);
CounterChain2873.connectInput("reset", pipe2879_done);
DFEVar CounterChain2873_maxed = CounterChain2873.getOutput("saturated");
CounterChain2873_done <== stream.offset(CounterChain2873.getOutput("done"), -1);
OffsetExpr CounterChain2873_additionalOffset = new OffsetExpr();
CounterChain2873.connectInput("max0", CounterChain2873_max[0]);
DFEVar Counter2872 = CounterChain2873.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2879 */
DFEVar pipe2879_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2383 = Counter2872;
// DFEVar Vector2874 = Par_pop_fifo(FIFO2870, 1);
FIFO2870_readEn <== pipe2879_ctr_en;
DFEVector<DFEVar> Vector2874 = FIFO2870_rdata;
DFEVector<DFEVar> Vector2387 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2383));
DFEVar FixedPoint2875 = Vector2874[0];
DFEVector<DFEVar> Vector2876 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2875));
/* Bram_store { */
BRAM2855_0.connectWport(Vector2387, Vector2876, pipe2879_datapath_en, new int[] {0}); //w8
BRAM2855_1.connectWport(Vector2387, Vector2876, pipe2879_datapath_en, new int[] {0}); //w8
BRAM2855_2.connectWport(Vector2387, Vector2876, pipe2879_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2879 */
}
/* } Block void2881 Unitpipe */
/* ParPipeForeach metapipe2954 = ParPipeForeach(CounterChain2883) { */
{
/* MPSM to be emitted */
/* metapipe2954_MPSM metapipe2954 { */
SMIO metapipe2954_sm = addStateMachine("metapipe2954_sm", new metapipe2954_MPSM(this));
    metapipe2954_sm.connectInput("sm_en", metapipe2954_en);
    metapipe2954_done <== stream.offset(metapipe2954_sm.getOutput("sm_done"),-1);
DFEVar metapipe2954_niter = ((const5_FixedPoint143 - const0_FixedPoint105) / (const1_FixedPoint119 * 1));
metapipe2954_sm.connectInput("sm_numIter", metapipe2954_niter.cast(dfeUInt(32)));
DFEVar metapipe2954_rst_en = metapipe2954_sm.getOutput("rst_en");
metapipe2954_sm.connectInput("s0_done", metapipe2899_done);
metapipe2899_en <== metapipe2954_sm.getOutput("s0_en");
metapipe2954_sm.connectInput("s1_done", void2911_done);
void2911_en <== metapipe2954_sm.getOutput("s1_en");
metapipe2954_sm.connectInput("s2_done", void2923_done);
void2923_en <== metapipe2954_sm.getOutput("s2_en");
metapipe2954_sm.connectInput("s3_done", void2935_done);
void2935_en <== metapipe2954_sm.getOutput("s3_en");
metapipe2954_sm.connectInput("s4_done", void2952_done);
void2952_en <== metapipe2954_sm.getOutput("s4_en");
DFEVar Counter2882_max_0 = const5_FixedPoint143;
DFEVar metapipe2954_datapath_en = metapipe2954_en;
DFEVar metapipe2954_ctr_en = metapipe2899_done;
/* CustomCounterChain { */
DFEVar CounterChain2883_en = metapipe2899_done;
DFEVar[] CounterChain2883_max = {Counter2882_max_0};
int[] CounterChain2883_strides = {1};
OffsetExpr CounterChain2883_offset = stream.makeOffsetAutoLoop("CounterChain2883_offset");
SMIO CounterChain2883 = addStateMachine("CounterChain2883_sm", new CounterChain2883_CtrSM(owner, CounterChain2883_strides)); // gap = 0
CounterChain2883.connectInput("en", CounterChain2883_en);
CounterChain2883.connectInput("reset", metapipe2954_done);
DFEVar CounterChain2883_maxed = CounterChain2883.getOutput("saturated");
DFEVar CounterChain2883_done = stream.offset(CounterChain2883.getOutput("done"), -1);
OffsetExpr CounterChain2883_additionalOffset = new OffsetExpr();
CounterChain2883.connectInput("max0", CounterChain2883_max[0]);
DFEVar Counter2882 = CounterChain2883.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2954_MPSM metapipe2954 */
DFEVar metapipe2954_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2396 = Counter2882;
DblBufReg[] FixedPoint2396_chain = spatialUtils.getRegChain(
              "metapipe2954_FixedPoint2396", 5, FixedPoint2396,
              new DFEVar[]{metapipe2899_done,void2911_done,void2923_done,void2935_done,void2952_done});
/* ParPipeReduce metapipe2899 = ParPipeReduce(CounterChain2885, BRAM2854) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe2899 controller { */
/* metapipe2899_MPSM metapipe2899 { */
SMIO metapipe2899_sm = addStateMachine("metapipe2899_sm", new metapipe2899_MPSM(this));
    metapipe2899_sm.connectInput("sm_en", metapipe2899_en);
    metapipe2899_done <== stream.offset(metapipe2899_sm.getOutput("sm_done"),-1);
DFEVar metapipe2899_niter = ((const1_FixedPoint119 - const0_FixedPoint105) / (const1_FixedPoint119 * 1));
metapipe2899_sm.connectInput("sm_numIter", metapipe2899_niter.cast(dfeUInt(32)));
DFEVar metapipe2899_rst_en = metapipe2899_sm.getOutput("rst_en");
metapipe2899_sm.connectInput("s0_done", pipe2897_done);
pipe2897_en <== metapipe2899_sm.getOutput("s0_en");
DFEVar Counter2884_max_0 = const1_FixedPoint119;
DFEVar metapipe2899_datapath_en = metapipe2899_en;
DFEVar metapipe2899_ctr_en = pipe2897_done;
/* CustomCounterChain { */
DFEVar CounterChain2885_en = pipe2897_done;
DFEVar[] CounterChain2885_max = {Counter2884_max_0};
int[] CounterChain2885_strides = {1};
OffsetExpr CounterChain2885_offset = stream.makeOffsetAutoLoop("CounterChain2885_offset");
SMIO CounterChain2885 = addStateMachine("CounterChain2885_sm", new CounterChain2885_CtrSM(owner, CounterChain2885_strides)); // gap = 0
CounterChain2885.connectInput("en", CounterChain2885_en);
CounterChain2885.connectInput("reset", metapipe2899_done);
DFEVar CounterChain2885_maxed = CounterChain2885.getOutput("saturated");
DFEVar CounterChain2885_done = stream.offset(CounterChain2885.getOutput("done"), -1);
OffsetExpr CounterChain2885_additionalOffset = new OffsetExpr();
CounterChain2885.connectInput("max0", CounterChain2885_max[0]);
DFEVar Counter2884 = CounterChain2885.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2899_MPSM metapipe2899 */
/* } metapipe2899 controller */
/* ParPipeReduce metapipe2899 par loop { */
DFEVar FixedPoint2409 = Counter2884;
/* } metapipe2899 par loop */
DblBufReg[] FixedPoint2409_chain = spatialUtils.getRegChain(
              "metapipe2899_FixedPoint2409", 1, FixedPoint2409,
              new DFEVar[]{pipe2897_done});
/* ParPipeReduce metapipe2899 func block { */
/* ParPipeForeach pipe2897 = ParPipeForeach(CounterChain2887) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2897 { */
OffsetExpr pipe2897_offset = stream.makeOffsetAutoLoop("pipe2897_offset");
SMIO pipe2897_sm = addStateMachine("pipe2897_sm", new PipeSM(this, 1));
    pipe2897_sm.connectInput("sm_en", pipe2897_en);
    pipe2897_done <== stream.offset(pipe2897_sm.getOutput("sm_done"),-1-pipe2897_offset);
DFEVar pipe2897_rst_en = pipe2897_sm.getOutput("rst_en");
pipe2897_sm.connectInput("rst_done", pipe2897_rst_done);
pipe2897_rst_done <== stream.offset(pipe2897_rst_en, -pipe2897_offset-1);
pipe2897_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2886_max_0 = pipe2897_sm.getOutput("ctr_maxOut_0");
pipe2897_sm.connectInput("ctr_done", CounterChain2887_done);
DFEVar pipe2897_datapath_en = pipe2897_sm.getOutput("ctr_en");
DFEVar pipe2897_ctr_en = pipe2897_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2887_en = pipe2897_datapath_en;
DFEVar[] CounterChain2887_max = {Counter2886_max_0};
int[] CounterChain2887_strides = {1};
OffsetExpr CounterChain2887_offset = stream.makeOffsetAutoLoop("CounterChain2887_offset");
SMIO CounterChain2887 = addStateMachine("CounterChain2887_sm", new CounterChain2887_CtrSM(owner, CounterChain2887_strides)); // gap = 0
CounterChain2887.connectInput("en", CounterChain2887_en);
CounterChain2887.connectInput("reset", pipe2897_done);
DFEVar CounterChain2887_maxed = CounterChain2887.getOutput("saturated");
CounterChain2887_done <== stream.offset(CounterChain2887.getOutput("done"), -1);
OffsetExpr CounterChain2887_additionalOffset = new OffsetExpr();
CounterChain2887.connectInput("max0", CounterChain2887_max[0]);
DFEVar Counter2886 = CounterChain2887.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2897 */
DFEVar pipe2897_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2411 = Counter2886;
DFEVar FixedPoint2893 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
DFEVector<DFEVar> Vector2413 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2411));
/* Bram_load { */
DFEVector<DFEVar> Vector2888 = new DFEVectorType<DFEVar>(BRAM2855_0.type, 1).newInstance(this, Arrays.asList(BRAM2855_0.connectRport(FixedPoint2411, new int[] {0}))); //r2
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector2889 = new DFEVectorType<DFEVar>(BRAM2854_0.type, 1).newInstance(this, Arrays.asList(BRAM2854_0.connectRport(FixedPoint2411, new int[] {0}))); //r2
/* } Bram_load */
// FixedPoint2890 already emitted in pipe2897;
// Bit2410 already emitted in Sym(2897)
// Bit2412 already emitted in Sym(2897)
// Bit2419 already emitted in Sym(2897)
// FixedPoint2891 already emitted in pipe2897;
// FixedPoint2892 already emitted in Sym(2897)
// FixedPoint2893 already emitted in pipe2897;
DFEVector<DFEVar> Vector2894 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2893));
/* Bram_store { */
BRAM2854_0.connectWport(stream.offset(Vector2413, -pipe2897_offset),
              stream.offset(Vector2894, -pipe2897_offset), stream.offset(pipe2897_datapath_en & pipe2897_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2887),Block(Sym(2896)),List(List(Sym(2411))))*/, -pipe2897_offset), new int[] {0}); //w3.2
BRAM2854_1.connectWport(stream.offset(Vector2413, -pipe2897_offset),
              stream.offset(Vector2894, -pipe2897_offset), stream.offset(pipe2897_datapath_en & pipe2897_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2887),Block(Sym(2896)),List(List(Sym(2411))))*/, -pipe2897_offset), new int[] {0}); //w3.2
BRAM2854_2.connectWport(stream.offset(Vector2413, -pipe2897_offset),
              stream.offset(Vector2894, -pipe2897_offset), stream.offset(pipe2897_datapath_en & pipe2897_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2887),Block(Sym(2896)),List(List(Sym(2411))))*/, -pipe2897_offset), new int[] {0}); //w3.2
/* } Bram_store */
new pipe2897_reduce_kernel(owner , Vector2888,Vector2889 , FixedPoint2893 , FixedPoint2409,FixedPoint2411,const0_FixedPoint105,const1_FixedPoint119,const96_FixedPoint246); // Reduce kernel
}
/* } ParPipeForeach pipe2897 */
/* } metapipe2899 func block */
}
/* } ParPipeReduce metapipe2899 */
// FIFO FIFO2900 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2900_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2900_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2900_readEn = dfeBool().newInstance(this);
DFEVar FIFO2900_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2911) = List()
/* void2911_MPSM void2911 { */
SMIO void2911_sm = addStateMachine("void2911_sm", new void2911_MPSM(this));
    void2911_sm.connectInput("sm_en", void2911_en);
    void2911_done <== stream.offset(void2911_sm.getOutput("sm_done"),-1);
void2911_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2911_rst_en = void2911_sm.getOutput("rst_en");
void2911_sm.connectInput("s0_done", pipe2908_done);
pipe2908_en <== void2911_sm.getOutput("s0_en");
void2911_sm.connectInput("s1_done", void2909_done);
void2909_en <== void2911_sm.getOutput("s1_en");
DFEVar void2911_datapath_en = void2911_en & ~void2911_rst_en;
DFEVar void2911_ctr_en = void2911_datapath_en;
/* } void2911_MPSM void2911 */
/* Block void2911 Unitpipe { */
{
/* ParPipeForeach pipe2908 = ParPipeForeach(CounterChain2902) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2908 { */
OffsetExpr pipe2908_offset = stream.makeOffsetAutoLoop("pipe2908_offset");
SMIO pipe2908_sm = addStateMachine("pipe2908_sm", new PipeSM(this, 1));
    pipe2908_sm.connectInput("sm_en", pipe2908_en);
    pipe2908_done <== stream.offset(pipe2908_sm.getOutput("sm_done"),-1-pipe2908_offset);
DFEVar pipe2908_rst_en = pipe2908_sm.getOutput("rst_en");
pipe2908_sm.connectInput("rst_done", pipe2908_rst_done);
pipe2908_rst_done <== stream.offset(pipe2908_rst_en, -pipe2908_offset-1);
pipe2908_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2901_max_0 = pipe2908_sm.getOutput("ctr_maxOut_0");
pipe2908_sm.connectInput("ctr_done", CounterChain2902_done);
DFEVar pipe2908_datapath_en = pipe2908_sm.getOutput("ctr_en");
DFEVar pipe2908_ctr_en = pipe2908_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2902_en = pipe2908_datapath_en;
DFEVar[] CounterChain2902_max = {const96_FixedPoint246};
int[] CounterChain2902_strides = {1};
OffsetExpr CounterChain2902_offset = stream.makeOffsetAutoLoop("CounterChain2902_offset");
SMIO CounterChain2902 = addStateMachine("CounterChain2902_sm", new CounterChain2902_CtrSM(owner, CounterChain2902_strides)); // gap = 0
CounterChain2902.connectInput("en", CounterChain2902_en);
CounterChain2902.connectInput("reset", pipe2908_done);
DFEVar CounterChain2902_maxed = CounterChain2902.getOutput("saturated");
CounterChain2902_done <== stream.offset(CounterChain2902.getOutput("done"), -1);
OffsetExpr CounterChain2902_additionalOffset = new OffsetExpr();
CounterChain2902.connectInput("max0", CounterChain2902_max[0]);
DFEVar Counter2901 = CounterChain2902.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2908 */
DFEVar pipe2908_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2432 = Counter2901;
DFEVector<DFEVar> Vector2433 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2432));
/* Bram_load { */
DFEVector<DFEVar> Vector2903 = new DFEVectorType<DFEVar>(BRAM2855_1.type, 1).newInstance(this, Arrays.asList(BRAM2855_1.connectRport(FixedPoint2432, new int[] {0}))); //r2
/* } Bram_load */
DFEVar Bit2437 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2437 <== FixedPoint2432 < const96_FixedPoint246;
DFEVector<DFEVar> Vector2438 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit2437));
DFEVar FixedPoint2904 = Vector2903[0];
DFEVector<DFEVar> Vector2905 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2904));
// Par_push_fifo(FIFO2900, Vector2905, Vector2438, true);
FIFO2900_writeEn <== pipe2908_ctr_en;
FIFO2900_wdata <== Vector2905;
}
/* } ParPipeForeach pipe2908 */
// void2909: Offchip_store_cmd(DRAM2776,FIFO2900, const0_FixedPoint105, const96_FixedPoint246, 1)
MemoryCmdStLib void2909 = new MemoryCmdStLib(
          this,
          void2909_en, void2909_done,
          DRAM2776, const0_FixedPoint105,
          "DRAM2776_void2909_out",
          const96_FixedPoint246,
          FIFO2900_writeEn, FIFO2900_wdata);
FIFO2900_readEn <== void2909_en;
}
/* } Block void2911 Unitpipe */
// FIFO FIFO2912 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2912_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2912_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2912_readEn = dfeBool().newInstance(this);
DFEVar FIFO2912_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2923) = List()
/* void2923_MPSM void2923 { */
SMIO void2923_sm = addStateMachine("void2923_sm", new void2923_MPSM(this));
    void2923_sm.connectInput("sm_en", void2923_en);
    void2923_done <== stream.offset(void2923_sm.getOutput("sm_done"),-1);
void2923_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2923_rst_en = void2923_sm.getOutput("rst_en");
void2923_sm.connectInput("s0_done", pipe2920_done);
pipe2920_en <== void2923_sm.getOutput("s0_en");
void2923_sm.connectInput("s1_done", void2921_done);
void2921_en <== void2923_sm.getOutput("s1_en");
DFEVar void2923_datapath_en = void2923_en & ~void2923_rst_en;
DFEVar void2923_ctr_en = void2923_datapath_en;
/* } void2923_MPSM void2923 */
/* Block void2923 Unitpipe { */
{
/* ParPipeForeach pipe2920 = ParPipeForeach(CounterChain2914) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2920 { */
OffsetExpr pipe2920_offset = stream.makeOffsetAutoLoop("pipe2920_offset");
SMIO pipe2920_sm = addStateMachine("pipe2920_sm", new PipeSM(this, 1));
    pipe2920_sm.connectInput("sm_en", pipe2920_en);
    pipe2920_done <== stream.offset(pipe2920_sm.getOutput("sm_done"),-1-pipe2920_offset);
DFEVar pipe2920_rst_en = pipe2920_sm.getOutput("rst_en");
pipe2920_sm.connectInput("rst_done", pipe2920_rst_done);
pipe2920_rst_done <== stream.offset(pipe2920_rst_en, -pipe2920_offset-1);
pipe2920_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2913_max_0 = pipe2920_sm.getOutput("ctr_maxOut_0");
pipe2920_sm.connectInput("ctr_done", CounterChain2914_done);
DFEVar pipe2920_datapath_en = pipe2920_sm.getOutput("ctr_en");
DFEVar pipe2920_ctr_en = pipe2920_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2914_en = pipe2920_datapath_en;
DFEVar[] CounterChain2914_max = {const96_FixedPoint246};
int[] CounterChain2914_strides = {1};
OffsetExpr CounterChain2914_offset = stream.makeOffsetAutoLoop("CounterChain2914_offset");
SMIO CounterChain2914 = addStateMachine("CounterChain2914_sm", new CounterChain2914_CtrSM(owner, CounterChain2914_strides)); // gap = 0
CounterChain2914.connectInput("en", CounterChain2914_en);
CounterChain2914.connectInput("reset", pipe2920_done);
DFEVar CounterChain2914_maxed = CounterChain2914.getOutput("saturated");
CounterChain2914_done <== stream.offset(CounterChain2914.getOutput("done"), -1);
OffsetExpr CounterChain2914_additionalOffset = new OffsetExpr();
CounterChain2914.connectInput("max0", CounterChain2914_max[0]);
DFEVar Counter2913 = CounterChain2914.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2920 */
DFEVar pipe2920_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2449 = Counter2913;
DFEVector<DFEVar> Vector2450 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2449));
/* Bram_load { */
DFEVector<DFEVar> Vector2915 = new DFEVectorType<DFEVar>(BRAM2854_1.type, 1).newInstance(this, Arrays.asList(BRAM2854_1.connectRport(FixedPoint2449, new int[] {2}))); //r2
/* } Bram_load */
DFEVar Bit2454 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2454 <== FixedPoint2449 < const96_FixedPoint246;
DFEVector<DFEVar> Vector2455 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit2454));
DFEVar FixedPoint2916 = Vector2915[0];
DFEVector<DFEVar> Vector2917 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2916));
// Par_push_fifo(FIFO2912, Vector2917, Vector2455, true);
FIFO2912_writeEn <== pipe2920_ctr_en;
FIFO2912_wdata <== Vector2917;
}
/* } ParPipeForeach pipe2920 */
// void2921: Offchip_store_cmd(DRAM2775,FIFO2912, const0_FixedPoint105, const96_FixedPoint246, 1)
MemoryCmdStLib void2921 = new MemoryCmdStLib(
          this,
          void2921_en, void2921_done,
          DRAM2775, const0_FixedPoint105,
          "DRAM2775_void2921_out",
          const96_FixedPoint246,
          FIFO2912_writeEn, FIFO2912_wdata);
FIFO2912_readEn <== void2921_en;
}
/* } Block void2923 Unitpipe */
// FIFO FIFO2924 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2924_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2924_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2924_readEn = dfeBool().newInstance(this);
DFEVar FIFO2924_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2935) = List()
/* void2935_MPSM void2935 { */
SMIO void2935_sm = addStateMachine("void2935_sm", new void2935_MPSM(this));
    void2935_sm.connectInput("sm_en", void2935_en);
    void2935_done <== stream.offset(void2935_sm.getOutput("sm_done"),-1);
void2935_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2935_rst_en = void2935_sm.getOutput("rst_en");
void2935_sm.connectInput("s0_done", pipe2932_done);
pipe2932_en <== void2935_sm.getOutput("s0_en");
void2935_sm.connectInput("s1_done", void2933_done);
void2933_en <== void2935_sm.getOutput("s1_en");
DFEVar void2935_datapath_en = void2935_en & ~void2935_rst_en;
DFEVar void2935_ctr_en = void2935_datapath_en;
/* } void2935_MPSM void2935 */
/* Block void2935 Unitpipe { */
{
/* ParPipeForeach pipe2932 = ParPipeForeach(CounterChain2926) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2932 { */
OffsetExpr pipe2932_offset = stream.makeOffsetAutoLoop("pipe2932_offset");
SMIO pipe2932_sm = addStateMachine("pipe2932_sm", new PipeSM(this, 1));
    pipe2932_sm.connectInput("sm_en", pipe2932_en);
    pipe2932_done <== stream.offset(pipe2932_sm.getOutput("sm_done"),-1-pipe2932_offset);
DFEVar pipe2932_rst_en = pipe2932_sm.getOutput("rst_en");
pipe2932_sm.connectInput("rst_done", pipe2932_rst_done);
pipe2932_rst_done <== stream.offset(pipe2932_rst_en, -pipe2932_offset-1);
pipe2932_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2925_max_0 = pipe2932_sm.getOutput("ctr_maxOut_0");
pipe2932_sm.connectInput("ctr_done", CounterChain2926_done);
DFEVar pipe2932_datapath_en = pipe2932_sm.getOutput("ctr_en");
DFEVar pipe2932_ctr_en = pipe2932_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2926_en = pipe2932_datapath_en;
DFEVar[] CounterChain2926_max = {const96_FixedPoint246};
int[] CounterChain2926_strides = {1};
OffsetExpr CounterChain2926_offset = stream.makeOffsetAutoLoop("CounterChain2926_offset");
SMIO CounterChain2926 = addStateMachine("CounterChain2926_sm", new CounterChain2926_CtrSM(owner, CounterChain2926_strides)); // gap = 0
CounterChain2926.connectInput("en", CounterChain2926_en);
CounterChain2926.connectInput("reset", pipe2932_done);
DFEVar CounterChain2926_maxed = CounterChain2926.getOutput("saturated");
CounterChain2926_done <== stream.offset(CounterChain2926.getOutput("done"), -1);
OffsetExpr CounterChain2926_additionalOffset = new OffsetExpr();
CounterChain2926.connectInput("max0", CounterChain2926_max[0]);
DFEVar Counter2925 = CounterChain2926.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2932 */
DFEVar pipe2932_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2466 = Counter2925;
DFEVector<DFEVar> Vector2467 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2466));
/* Bram_load { */
DFEVector<DFEVar> Vector2927 = new DFEVectorType<DFEVar>(BRAM2855_2.type, 1).newInstance(this, Arrays.asList(BRAM2855_2.connectRport(FixedPoint2466, new int[] {0}))); //r2
/* } Bram_load */
DFEVar Bit2471 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2471 <== FixedPoint2466 < const96_FixedPoint246;
DFEVector<DFEVar> Vector2472 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit2471));
DFEVar FixedPoint2928 = Vector2927[0];
DFEVector<DFEVar> Vector2929 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2928));
// Par_push_fifo(FIFO2924, Vector2929, Vector2472, true);
FIFO2924_writeEn <== pipe2932_ctr_en;
FIFO2924_wdata <== Vector2929;
}
/* } ParPipeForeach pipe2932 */
// void2933: Offchip_store_cmd(DRAM2777,FIFO2924, const0_FixedPoint105, const96_FixedPoint246, 1)
MemoryCmdStLib void2933 = new MemoryCmdStLib(
          this,
          void2933_en, void2933_done,
          DRAM2777, const0_FixedPoint105,
          "DRAM2777_void2933_out",
          const96_FixedPoint246,
          FIFO2924_writeEn, FIFO2924_wdata);
FIFO2924_readEn <== void2933_en;
}
/* } Block void2935 Unitpipe */
// FIFO FIFO2936 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint116, const0_FixedPoint105);
DFEVector<DFEVar> FIFO2936_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2936_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2936_readEn = dfeBool().newInstance(this);
DFEVar FIFO2936_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2952) = List()
/* void2952_MPSM void2952 { */
SMIO void2952_sm = addStateMachine("void2952_sm", new void2952_MPSM(this));
    void2952_sm.connectInput("sm_en", void2952_en);
    void2952_done <== stream.offset(void2952_sm.getOutput("sm_done"),-1);
void2952_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2952_rst_en = void2952_sm.getOutput("rst_en");
void2952_sm.connectInput("s0_done", pipe2944_done);
pipe2944_en <== void2952_sm.getOutput("s0_en");
void2952_sm.connectInput("s1_done", void2948_done);
void2948_en <== void2952_sm.getOutput("s1_en");
void2952_sm.connectInput("s2_done", void2950_done);
void2950_en <== void2952_sm.getOutput("s2_en");
DFEVar void2952_datapath_en = void2952_en & ~void2952_rst_en;
DFEVar void2952_ctr_en = void2952_datapath_en;
/* } void2952_MPSM void2952 */
/* Block void2952 Unitpipe { */
{
/* ParPipeForeach pipe2944 = ParPipeForeach(CounterChain2938) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2944 { */
OffsetExpr pipe2944_offset = stream.makeOffsetAutoLoop("pipe2944_offset");
SMIO pipe2944_sm = addStateMachine("pipe2944_sm", new PipeSM(this, 1));
    pipe2944_sm.connectInput("sm_en", pipe2944_en);
    pipe2944_done <== stream.offset(pipe2944_sm.getOutput("sm_done"),-1-pipe2944_offset);
DFEVar pipe2944_rst_en = pipe2944_sm.getOutput("rst_en");
pipe2944_sm.connectInput("rst_done", pipe2944_rst_done);
pipe2944_rst_done <== stream.offset(pipe2944_rst_en, -pipe2944_offset-1);
pipe2944_sm.connectInput("sm_maxIn_0", const96_FixedPoint246);
DFEVar Counter2937_max_0 = pipe2944_sm.getOutput("ctr_maxOut_0");
pipe2944_sm.connectInput("ctr_done", CounterChain2938_done);
DFEVar pipe2944_datapath_en = pipe2944_sm.getOutput("ctr_en");
DFEVar pipe2944_ctr_en = pipe2944_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2938_en = pipe2944_datapath_en;
DFEVar[] CounterChain2938_max = {const96_FixedPoint246};
int[] CounterChain2938_strides = {1};
OffsetExpr CounterChain2938_offset = stream.makeOffsetAutoLoop("CounterChain2938_offset");
SMIO CounterChain2938 = addStateMachine("CounterChain2938_sm", new CounterChain2938_CtrSM(owner, CounterChain2938_strides)); // gap = 0
CounterChain2938.connectInput("en", CounterChain2938_en);
CounterChain2938.connectInput("reset", pipe2944_done);
DFEVar CounterChain2938_maxed = CounterChain2938.getOutput("saturated");
CounterChain2938_done <== stream.offset(CounterChain2938.getOutput("done"), -1);
OffsetExpr CounterChain2938_additionalOffset = new OffsetExpr();
CounterChain2938.connectInput("max0", CounterChain2938_max[0]);
DFEVar Counter2937 = CounterChain2938.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2944 */
DFEVar pipe2944_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2483 = Counter2937;
DFEVector<DFEVar> Vector2484 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2483));
/* Bram_load { */
DFEVector<DFEVar> Vector2939 = new DFEVectorType<DFEVar>(BRAM2854_2.type, 1).newInstance(this, Arrays.asList(BRAM2854_2.connectRport(FixedPoint2483, new int[] {4}))); //r2
/* } Bram_load */
DFEVar Bit2488 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2488 <== FixedPoint2483 < const96_FixedPoint246;
DFEVector<DFEVar> Vector2489 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit2488));
DFEVar FixedPoint2940 = Vector2939[0];
DFEVector<DFEVar> Vector2941 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2940));
// Par_push_fifo(FIFO2936, Vector2941, Vector2489, true);
FIFO2936_writeEn <== pipe2944_ctr_en;
FIFO2936_wdata <== Vector2941;
}
/* } ParPipeForeach pipe2944 */
// Unit pipe writtenIn(void2948) = List(Sym(2945))
//   reg2945 = Reflect(Reg_new(Sym(105)),Summary(mutable),List()), isAccum(reg2945) = false
/* PipeSM void2948 { */
OffsetExpr void2948_offset = stream.makeOffsetAutoLoop("void2948_offset");
SMIO void2948_sm = addStateMachine("void2948_sm", new PipeSM(this, 1));
    void2948_sm.connectInput("sm_en", void2948_en);
    void2948_done <== stream.offset(void2948_sm.getOutput("sm_done"),-1-void2948_offset);
DFEVar void2948_rst_en = void2948_sm.getOutput("rst_en");
void2948_sm.connectInput("rst_done", void2948_rst_done);
void2948_rst_done <== stream.offset(void2948_rst_en, -void2948_offset-1);
void2948_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void2948_sm.connectInput("ctr_done", stream.offset(void2948_sm.getOutput("ctr_en"), -1));
DFEVar void2948_datapath_en = void2948_en & ~void2948_rst_en;
DFEVar void2948_ctr_en = void2948_datapath_en;
/* } PipeSM void2948 */
/* Block void2948 Unitpipe { */
{
DFEVar FixedPoint2495 = FixedPoint2363 * const5_FixedPoint143;
DFEVar FixedPoint2496 = FixedPoint2396_chain[3].read() * const96_FixedPoint246;
DFEVar FixedPoint2497 = FixedPoint2495 + FixedPoint2496;
/* Reg_write { */
reg2945_0_lib.write(FixedPoint2497, void2948_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@5ed68cb5, numDuplicates = 1 */
}
/* } Block void2948 Unitpipe */
DFEVar FixedPoint2949 = reg2945_0_lib.read(1); // reg read
// void2950: Offchip_store_cmd(DRAM2774,FIFO2936, FixedPoint2949, const96_FixedPoint246, 1)
MemoryCmdStLib void2950 = new MemoryCmdStLib(
          this,
          void2950_en, void2950_done,
          DRAM2774, FixedPoint2949,
          "DRAM2774_void2950_out",
          const96_FixedPoint246,
          FIFO2936_writeEn, FIFO2936_wdata);
FIFO2936_readEn <== void2950_en;
}
/* } Block void2952 Unitpipe */
}
/* } ParPipeForeach metapipe2954 */
}
/* } ParPipeForeach seq2956 */


























// rdone signals for N-Buffers go here
reg2945_0_lib.connectStageCtrl(void2950_done, void2950_en, new int[] { 1 }); /*read*/
reg2945_0_lib.connectStageCtrl(void2948_done, void2948_en, new int[] { 0 }); /*write*/
reg2945_0_lib.connectUnwrittenPorts(new int[] {1});
reg2945_0_lib.connectUnreadPorts(new int[] {0});
reg2945_0_lib.connectUntouchedPorts(new int[] {});
reg2945_0_lib.connectDummyBroadcast();
BRAM2854_1.connectStageCtrl(void2923_done, void2923_en, new int[] { 2 }); /*read*/
BRAM2854_1.connectStageCtrl(metapipe2899_done, metapipe2899_en, new int[] { 0 }); /*write*/
BRAM2854_1.connectUnwrittenPorts(new int[] {1,2});
BRAM2854_1.connectUnreadPorts(new int[] {0,1});
BRAM2854_1.connectUntouchedPorts(new int[] {1});
BRAM2854_2.connectStageCtrl(void2952_done, void2952_en, new int[] { 4 }); /*read*/
BRAM2854_2.connectStageCtrl(metapipe2899_done, metapipe2899_en, new int[] { 0 }); /*write*/
BRAM2854_2.connectUnwrittenPorts(new int[] {1,2,3,4});
BRAM2854_2.connectUnreadPorts(new int[] {0,1,2,3});
BRAM2854_2.connectUntouchedPorts(new int[] {1,2,3});
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
