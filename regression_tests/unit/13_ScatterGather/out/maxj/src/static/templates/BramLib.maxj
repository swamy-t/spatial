package engine;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;


/*
 * @BramLib: Library that creates Block RAM with multiple banks
 * TODO: Parameterize this library to support the following:
 *  1. Simple dual port: One address stream with write enable
 *  2. Read-only: ROM
 *  3. Support strided interleaving. Currently only round-robin interleaving
 *  is supported - successive words map to different banks.
 */
class BramLib extends KernelLib {

  final int MAX_FFMEM_DEPTH=4;

  int addrBits;
  int[] banks;
  int[] strides;
  int size0;
  int size1;
  int depth;
  int num_libs;
  int contiguous_rows;
  int muxSize;

  // For parallelized writes
  DFEVar[][] muxAddrVec;
  DFEVar[][] muxDataVec;
  int muxInt;
  DFEVar[] muxWen;
  DFEType type;
  BramLib[] ensemble;
  OnChipMem[] m;
  BankMode bm;
  boolean isFF;

  boolean dbg = false;

  void common(int size0, int size1, DFEType type, int[] banks, int[] strides, int muxSize) {
    this.muxSize = muxSize;
    this.type = type;
    this.muxInt = 0;
    this.size0 = size0;
    this.size1 = size1;
    this.depth = size0 * size1;
    this.addrBits = MathUtils.bitsToAddress(this.depth);
    this.banks = banks;
    this.strides = strides;

    if (banks[0] == 1) {
      this.num_libs = 1;
      // TODO: Not really sure about this logic
      if (banks[1] == 1) {this.bm = BankMode.NONE;}
      else if (strides[1] == 1) {this.bm = BankMode.INTERLEAVE;}
      else if ((strides[1] > 1) & (size1 > 1)) {this.bm = BankMode.DIAGONAL;}
      else {this.bm = BankMode.STRIDE;}

      if ((depth/banks[1]) <= MAX_FFMEM_DEPTH) {
        isFF = true;
        m = new FFMem[banks[1]];
        for (int i=0; i<banks[1]; i++) {
          m[i] = new FFMem(this, type, depth/banks[1]);
        }
      } else {
        isFF = false;
        m = new BoxedMem[banks[1]];
        for (int i=0; i<banks[1]; i++) {
          m[i] = new BoxedMem(this, type, depth/banks[1]);
        }
      }
    } else {
      this.num_libs = banks[0];
      if ((strides[0] % size1 != 0) | (size0 % banks[0] != 0)) {
        debug.simPrintf("Strides[0] %d is not a multiple of #cols %d\n -or-\n#rows %d not divisible by vertical banking %d\n", strides[0], size1, size0, banks[0]);
      }
      ensemble = new BramLib[this.num_libs];
      for (int i = 0; i < this.num_libs; i++) {
        ensemble[i] = new BramLib(this, size0/banks[0], size1, type, new int[] {1, banks[1]}, new int[] {1, strides[1]});
      }
      this.contiguous_rows = size1 / strides[0];
    }

    // Connect mux to bram if this is a multiplexed write
    if (muxSize > 1) {
      muxAddrVec = new DFEVar[banks[1]][muxSize];
      muxDataVec = new DFEVar[banks[1]][muxSize];
      muxWen = new DFEVar[muxSize];
      DFEVector<DFEVar> portAddr = new DFEVectorType<DFEVar>(dfeInt(32), banks[1]).newInstance(this);
      DFEVector<DFEVar> portData = new DFEVectorType<DFEVar>(type, banks[1]).newInstance(this);
      DFEVector<DFEVar> sel = new DFEVectorType<DFEVar>(dfeBool(), muxSize).newInstance(this);
      for (int i = 0; i < muxSize; i++) {
        for (int j = 0; j < banks[1]; j++) {
          muxAddrVec[j][i] = dfeInt(32).newInstance(this);
          muxDataVec[j][i] = type.newInstance(this);          
        }
        muxWen[i] = dfeBool().newInstance(this);
        sel[i] <== muxWen[i];
      }
      for (int j = 0; j < banks[1]; j++) {
        portAddr[j] <== control.oneHotMux(sel.pack(), muxAddrVec[j]);
        portData[j] <== control.oneHotMux(sel.pack(), muxDataVec[j]);
      }
      DFEVar portWen = control.oneHotMux(sel.pack(), muxWen);
      this.connectWport(portAddr, portData, portWen);
    }

  }

  BramLib(KernelLib owner, int size0, int size1, DFEType type, int banks, int strides) {
    super(owner);
    common(size0, size1, type, new int[] {1, banks}, new int[] {1, strides}, 1);
  }

  BramLib(KernelLib owner, int size0, int size1, DFEType type, int[] banks, int[] strides) {
    super(owner);
    common(size0, size1, type, banks, strides, 1);
  }

  BramLib(KernelLib owner, int size0, int size1, DFEType type, int banks, int strides, int muxSize) {
    super(owner);
    common(size0, size1, type, new int[] {1, banks}, new int[] {1, strides}, muxSize);
  }

  BramLib(KernelLib owner, int size0, int size1, DFEType type, int[] banks, int[] strides, int muxSize) {
    super(owner);
    common(size0, size1, type, banks, strides, muxSize);
  }



  /**
   *  Enum to distinguish between what kind of address is required
   *  from bankAndLocalAddr.
   */
  public enum AddrMode {
     BANK,
     LOCAL,
     ROWROTATION,
     COLROTATION
  }

  /**
   *  Enum to distinguish between what kind of banking scheme
   *  to implement.
   */
  public enum BankMode {
     NONE,
     INTERLEAVE,
     STRIDE,
     DIAGONAL
  }

  DFEVar rowAddr(DFEVar srcAddrr) {  // Given row addr of whole bram, figure out actual row addr when ou go directly to the ensemble
    DFEVar srcAddr = srcAddrr.cast(dfeUInt(32));
    int cont_rows_bits = MathUtils.bitsToAddress(this.contiguous_rows);
    int banks_bits = MathUtils.bitsToAddress(this.banks[0]);
    int total_bits = MathUtils.bitsToAddress(this.size0);
    if (MathUtils.isPowerOf2(this.banks[0] * this.contiguous_rows)) {
      DFEVar offset = (cont_rows_bits == 0) ? constant.var(srcAddr.getType(), 0) : srcAddr.slice(0, cont_rows_bits).cast(dfeFixOffset(cont_rows_bits,0, SignMode.UNSIGNED)).cast(srcAddr.getType());
      return (srcAddr.slice(banks_bits + cont_rows_bits, total_bits - (banks_bits + cont_rows_bits)).cast(dfeFixOffset(total_bits - (banks_bits + cont_rows_bits), 0, SignMode.UNSIGNED)).cast(srcAddr.getType()) + offset).cast(srcAddrr.getType());
    } else { // TODO: Can separate based on power-of-2ability for either property
      KernelMath.DivModResult d = KernelMath.divMod(srcAddr, 
                                          constant.var(srcAddr.getType(), this.contiguous_rows));
      KernelMath.DivModResult e = KernelMath.divMod(srcAddr, 
                                          constant.var(srcAddr.getType(), this.contiguous_rows*this.banks[0]));
      return (d.getRemainder() + e.getRemainder()).cast(srcAddrr.getType());
    }
  }

  DFEVar ensAddr(DFEVar srcAddrr) { // Given some row address, decide which top-level ensemble it belongs in
    DFEVar srcAddr = srcAddrr.cast(dfeUInt(32));
    int cont_rows_bits = MathUtils.bitsToAddress(this.contiguous_rows);
    int banks_bits = MathUtils.bitsToAddress(this.banks[0]);
    if (MathUtils.isPowerOf2(this.banks[0] * this.contiguous_rows)) {
      return srcAddr.slice(cont_rows_bits, banks_bits).cast(dfeFixOffset(banks_bits,0,SignMode.UNSIGNED));
    } else { // TODO: Can separate based on power-of-2ability for either property
      KernelMath.DivModResult d = KernelMath.divMod(srcAddr, 
                                          constant.var(srcAddr.getType(), this.contiguous_rows));
      KernelMath.DivModResult e = KernelMath.divMod(d.getQuotient(), 
                                          constant.var(srcAddr.getType(), this.banks[0]));
      return e.getRemainder();
    }

  }

  /**
   *  Calculating bank address and local address within a bank
   *  using a single divider.
   *  @param srcAddr: Source address to be split into bank/local address
   *  @param mode: BANK for bank address, LOCAL for bank local address
   *  The 'strides[1]' parameter describes interleaving scheme among banks. In particular,
   *  'strides[1]' refers to the number of consecutive addresses that map to the same bank.
   *  This is typically equal to the number of columns, if the bank is storing
   *  a matrix that is accessed column-wise.
   *  strides[1] == 1 corresponds to round-robin interleaving
   */
  DFEVar bankAndLocalAddr(DFEVar srcAddr, AddrMode mode) {
    switch (bm) {
      case NONE:
        switch (mode) {
          case BANK:
            return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
          case LOCAL:
            return srcAddr;
          case ROWROTATION:
            return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
          case COLROTATION:
            return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
          default:
            return srcAddr;
          }
      case INTERLEAVE:
        // Get x,y dims
        if (MathUtils.isPowerOf2(banks[1])) {
          switch (mode) {
            case BANK:
              return srcAddr.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            case LOCAL:
              return srcAddr.slice(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1])), MathUtils.bitsToAddress(depth/banks[1]));
            case ROWROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            case COLROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            default:
              return srcAddr;
          }
        } else {
          KernelMath.DivModResult d = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), banks[1]));
          switch (mode) {
            case BANK:
              return d.getRemainder();  // addr % banks[1]
            case LOCAL:  // addr / banks[1]
              // return d.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(banks[1])));
              if (depth == banks[1]) {
                constant.var(0);
              } else {
                return d.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(depth/banks[1])));
              }
            case ROWROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            case COLROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            default:
              return srcAddr;
          }
        }
      case STRIDE:
        if (MathUtils.isPowerOf2(strides[1]) & (MathUtils.isPowerOf2(banks[1]))) {
          int stridebits = MathUtils.bitsToAddress(strides[1]);
          int bankbits = MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]));
          switch (mode) {
            case BANK:
              return srcAddr.slice(stridebits, bankbits);
            case LOCAL:
              DFEVar lsb = srcAddr.slice(0, stridebits);
              DFEVar msb = srcAddr.slice(stridebits + bankbits, MathUtils.bitsToAddress(depth) - stridebits - bankbits);
              return msb.cat(lsb);
              case ROWROTATION:
                return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            case COLROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            default:
              return srcAddr;
          }
        } else {  // Fall back to general case if either strides[1] or banks[1] is not a power-of-2
          KernelMath.DivModResult addrByStride = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), constant.var(dfeUInt(MathUtils.bitsToAddress(strides[1])), strides[1]));
          switch(mode) {
            case BANK:
              DFEVar bankAddr = KernelMath.modulo(addrByStride.getQuotient(), banks[1]);
              return bankAddr;
            case LOCAL:
              KernelMath.DivModResult addrByStrideBanks = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), constant.var(dfeUInt(MathUtils.bitsToAddress(strides[1]*banks[1])), strides[1]*banks[1]));
              DFEVar bankLocalAddr = addrByStride.getRemainder().cast(dfeUInt(MathUtils.bitsToAddress(depth/banks[1]))) + strides[1] * (addrByStrideBanks.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(depth/banks[1]))));
              return bankLocalAddr;
            case ROWROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            case COLROTATION:
              return constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), 0);
            default:
              return srcAddr;
          }
        }
      case DIAGONAL:
        // Get x,y dims
        DFEVar dfeStride = constant.var(dfeUInt(addrBits), strides[1]);
        if (MathUtils.isPowerOf2(banks[1])) {
          switch (mode) {
            case BANK:
              return srcAddr.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            case LOCAL:
              return srcAddr.slice(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1])), MathUtils.bitsToAddress(depth/banks[1]));
            case ROWROTATION:
              DFEVar row = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), dfeStride).getQuotient().cast(dfeUInt(addrBits));
              return row.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            case COLROTATION:
              DFEVar col = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), dfeStride).getRemainder().cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
              return col.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            default:
              return srcAddr;
          }
        } else {
          KernelMath.DivModResult d = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), constant.var(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))), banks[1]));
          switch (mode) {
            case BANK:
              return d.getRemainder();
            case LOCAL:  // addr / banks[1]
              // return d.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(banks[1])));
              return d.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(depth/banks[1])));
            case ROWROTATION:
              DFEVar row = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), dfeStride).getQuotient().cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
              return row.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            case COLROTATION:
              DFEVar col = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), dfeStride).getRemainder().cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
              return col.slice(0, MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))).cast(dfeUInt(MathUtils.bitsToAddress((banks[1]==1 ? 2 : banks[1]))));
            default:
              return srcAddr;
          }
        }
        // // OLD DIAGONAL LOGIC
        // DFEVar dfeBanks = constant.var(dfeUInt(addrBits), banks[1]);
        // DFEVar dfeStride = constant.var(dfeUInt(addrBits), strides[1]);
        // KernelMath.DivModResult d = KernelMath.divMod(srcAddr.cast(dfeUInt(MathUtils.bitsToAddress(depth))), dfeStride);
        // DFEVar row = d.getQuotient().cast(dfeUInt(addrBits));
        // DFEVar col = d.getRemainder().cast(dfeUInt(addrBits));
        // DFEVar banksPerRow = constant.var(dfeUInt(addrBits), strides[1]/banks[1]);
        // DFEVar radius = row + col; // Radius from origin (diagonal)
        // switch (mode) {
        //   case BANK:
        //     DFEVar temp = KernelMath.divMod(radius, dfeBanks).getRemainder();
        //     // debug.simPrintf("[bank addr: %d]\n", temp);
        //     return temp;
        //   case LOCAL:
        //     // DFEVar a1 = col;
        //     // DFEVar a2 = dfeBanks;
        //     // DFEVar a3 = KernelMath.divMod(col, dfeBanks).getQuotient().cast(dfeUInt(addrBits));
        //     DFEVar temp1 = row * banksPerRow + KernelMath.divMod(col, dfeBanks).getQuotient().cast(dfeUInt(addrBits));
        //     // debug.simPrintf("[global addr: %d, local addr: %d (%d / %d floor = %d)]\n", srcAddr, temp1, a1, a2, a3);
        //     return temp1;
        //       return row.slice(0, bankbits);
        //   default:
        //     return srcAddr;
        // }
      default:
        return srcAddr;
      }
  }

  DFEVar connectRport(DFEVar srcAddr, int[] p) {
    return connectRport(srcAddr);
  }

  DFEVar connectDirectRport(int bank, DFEVar srcAddr) { // For scatter gather
    return m[bank].read(srcAddr);
  }
  void connectDirectWport(int bank, DFEVector<DFEVar> srcAddr, DFEVector<DFEVar> srcData, DFEVar en) { // For scatter gather
    m[bank].write(srcAddr[0], srcData[0], en);
  }

  DFEVar connectRport(DFEVar srcAddr) {
    DFEVar bank_local_addr = bankAndLocalAddr(srcAddr, AddrMode.LOCAL);
    DFEVar bank_addr = bankAndLocalAddr(srcAddr, AddrMode.BANK);
    DFEVar[] bank_local_rdata = new DFEVar[banks[1]];
    for (int i=0; i<banks[1]; i++) {
      bank_local_rdata[i] = m[i].read(bank_local_addr);
    }
    if (banks[1] == 1) {
      return bank_local_rdata[0];
    } else {
      DFEVar rdata = control.mux(bank_addr, bank_local_rdata);
      if (dbg) {
        debug.simPrintf((srcAddr ^ stream.offset(srcAddr, -1)) !== constant.var(0), "raddr = %d (bank = %d, bank_local_addr = %d), rdata = %d, numBanks = %d\n", srcAddr, bank_addr, bank_local_addr, rdata, banks[1]);
      }
      return rdata;
    }
  }

  DFEVar connectRport(DFEVar srcAddr0, DFEVar srcAddr1, int[] p) {
    return connectRport(srcAddr0, srcAddr1);
  }

  DFEVar connectRport(DFEVar srcAddr0, DFEVar srcAddr1) {
    if (this.num_libs == 1) {
      DFEVar srcAddr = srcAddr0 * constant.var(srcAddr0.getType(), size1) + srcAddr1;
      return connectRport(srcAddr);
    } else {
      DFEVar sub_srcAddr0 = rowAddr(srcAddr0);
      DFEVar sub_bank = ensAddr(srcAddr0);
      DFEVar[] possible_reads = new DFEVar[this.num_libs];
      for (int i = 0; i < this.num_libs; i++) {
        possible_reads[i] = this.ensemble[i].connectRport(sub_srcAddr0, srcAddr1);
      }
      return control.mux(sub_bank, possible_reads);
    }
  }

  /**
   *  Write a single value to this memory bank. The 'start' and 'strides[1]' are used to restrict
   *  the number of banks[1] to which this value could be written. This is useful when the value
   *  produced can only be written to a subset of the banks[1].
   *  @param dstAddr: DFEVar representing address (must decipher bank and local addr from this)
   *  @param data: Data to be written
   *  @param en: Write enable bit
   *  @param start: Starting bank to which this write port should be connected
   *  @param strides[1]: Skip over these many banks[1] when wiring write ports
   */

  DFEVector<DFEVar> connectAport(DFEVar dstAddr, DFEVar data, DFEVar en) {
    if (banks[1] == 1) {
      return new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this,m[0].accum(dstAddr, data, en));
    } else {
      System.out.printf("ERROR: Cannot accumulate one element into banked or hierarchical mem (see BramLib)");
      System.exit(-1);
      return new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this,data);    
    }
  }


  void connectWport(DFEVar dstAddr, DFEVar data, DFEVar en, int[] p) {
    if (this.muxSize == 1) {
      connectWport(dstAddr,data,en);
    } else {
      this.muxAddrVec[0][muxInt] <== dstAddr;
      this.muxDataVec[0][muxInt] <== data;
      this.muxWen[muxInt] <== en;
      muxInt++;
    }
  }

  void connectWport(DFEVar dstAddr, DFEVar data, DFEVar en) {
    if (banks[1] == 1) {
      m[0].write(dstAddr, data, en);
    } else {
      if (this.num_libs == 1) {
        DFEVar bank_local_addr = bankAndLocalAddr(dstAddr, AddrMode.LOCAL);
        DFEVar bank_addr = bankAndLocalAddr(dstAddr, AddrMode.BANK);
        if (dbg) {
            debug.simPrintf(en, "waddr = %d (bank = %d, bank_local_addr = %d), wdata = %d, numBanks = %d, strides[1] = %d\n", dstAddr, bank_addr, bank_local_addr, data, banks[1], this.strides[1]);
        }
        for (int i=0; i<banks[1]; i+=1) {
          DFEVar wen = en & (bank_addr === i);
          m[i].write(bank_local_addr, data, wen);
        }        
      } else {
        DFEVar ens_dstAddr = ensAddr(dstAddr).cast(dstAddr.getType());
        DFEVar sub_dstAddr = rowAddr(dstAddr);
        for (int i = 0; i < this.num_libs; i++) {
          this.ensemble[i].connectWport(sub_dstAddr, data, en & (constant.var(dstAddr.getType(), i) === ens_dstAddr));
        }

      }
    }
  }

  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVar data, DFEVar en, int ens, int[] p) {
    connectWport(dstAddr0,dstAddr1,data,en,ens);
  }


  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVar data, DFEVar en, int ens) {
    if (this.num_libs == 1) {
      DFEVar dstAddr = dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1;
      if (banks[1] == 1) {
        m[0].write(dstAddr, data, en);
      } else {
        DFEVar bank_local_addr = bankAndLocalAddr(dstAddr, AddrMode.LOCAL);
        DFEVar bank_addr = bankAndLocalAddr(dstAddr, AddrMode.BANK);
        for (int i=0; i<banks[1]; i+=1) {
          DFEVar wen = en & (bank_addr === i);
          m[i].write(bank_local_addr, data, wen);
        }
      }
    } else {
      DFEVar sub_dstAddr0 = rowAddr(dstAddr0);
      this.ensemble[ens].connectWport(sub_dstAddr0, dstAddr1, data, en);
    }

  }

  DFEVector<DFEVar> connectAport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVector<DFEVar> data, DFEVar en) {
    return connectAport(dstAddr0, dstAddr1, data[0], en);
  }

  DFEVector<DFEVar> connectAport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVar data, DFEVar en) {
    if (this.num_libs == 1) {
      DFEVar dstAddr = dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1;
      if (banks[1] == 1) {
        return new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this,m[0].accum(dstAddr, data, en));
      } else {
        System.out.printf("ERROR: Cannot accumulate into hierarchical banked mem (see BramLib)");
        System.exit(-1);
        return new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this,data);

        // DFEVar bank_local_addr = bankAndLocalAddr(dstAddr, AddrMode.LOCAL);
        // DFEVar bank_addr = bankAndLocalAddr(dstAddr, AddrMode.BANK);
        // for (int i=0; i<banks[1]; i+=1) {
        //   DFEVar wen = en & (bank_addr === i);
        //   return m[i].accum(bank_local_addr, data, wen);
        // }
      }
    } else {
      System.out.printf("ERROR: Cannot accumulate into hierarchical banked mem (see BramLib)");
      System.exit(-1);
      return new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this,data);
    }
  }


  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVector<DFEVar> dstData, DFEVar en, int[] p) {
    if (this.muxSize == 1) {
      connectWport(dstAddr0, dstAddr1, dstData[0], en);
    } else {
      this.muxAddrVec[0][muxInt] <== dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1;
      this.muxDataVec[0][muxInt] <== dstData[0];
      this.muxWen[muxInt] <== en;
      muxInt++;
    }
  
  }

  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVector<DFEVar> dstData, DFEVar en) {
    connectWport(dstAddr0, dstAddr1, dstData[0], en);
  }

  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVar data, DFEVar en, int[] p) {
    connectWport(dstAddr0, dstAddr1, data, en);
  }

  void connectWport(DFEVar dstAddr0, DFEVar dstAddr1, DFEVar data, DFEVar en) {
    if (this.num_libs == 1) {
      DFEVar dstAddr = dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1;
      if (banks[1] == 1) {
        m[0].write(dstAddr, data, en);
      } else {
        DFEVar bank_local_addr = bankAndLocalAddr(dstAddr, AddrMode.LOCAL);
        DFEVar bank_addr = bankAndLocalAddr(dstAddr, AddrMode.BANK);
        for (int i=0; i<banks[1]; i+=1) {
          DFEVar wen = en & (bank_addr === i);
          m[i].write(bank_local_addr, data, wen);
        }
      }
    } else {
      DFEVar sub_dstAddr0 = rowAddr(dstAddr0);
      DFEVar ens_dstAddr = ensAddr(dstAddr0).cast(dstAddr0.getType());
      for (int i = 0; i < this.num_libs; i++) {
        this.ensemble[i].connectWport(sub_dstAddr0, dstAddr1, data, en & (constant.var(ens_dstAddr.getType(), i) === ens_dstAddr));
      }
    }

  }


  DFEVector<DFEVar> connectRport(int dummy_int, DFEVector<DFEVar> srcAddr1, int[] p) {
    return connectRport(dummy_int, srcAddr1);
  }

  DFEVector<DFEVar> connectRport(int dummy_int, DFEVector<DFEVar> srcAddr1) {
    return connectRport(srcAddr1);
  }

  DFEVector<DFEVar> connectRport(DFEVar srcAddr0, DFEVector<DFEVar> srcAddr1, int[] p) {
    return connectRport(srcAddr0, srcAddr1);
  }

  DFEVector<DFEVar> connectRport(DFEVar srcAddr0, DFEVector<DFEVar> srcAddr1) {
    if (this.num_libs == 1) {
      DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(srcAddr0.getType(), srcAddr1.getSize()).newInstance(this);
      for (int j = 0; j < srcAddr1.getSize(); j++) {
        addr_vec[j] <== srcAddr0 * constant.var(srcAddr0.getType(), this.size1) + srcAddr1[j];
      }
      return connectRport(addr_vec);
    } else {
      DFEVar sub_srcAddr0 = rowAddr(srcAddr0);
      DFEVar sub_bank = ensAddr(srcAddr0);
      DFEVar[][] possible_reads = new DFEVar[srcAddr1.getSize()][this.num_libs];
      for (int i = 0; i < this.num_libs; i++) {
        DFEVector<DFEVar> this_bank_reads = this.ensemble[i].connectRport(sub_srcAddr0, srcAddr1);
        for (int j = 0; j < srcAddr1.getSize(); j++) {
          possible_reads[j][i] = this_bank_reads[j];
        }
      }
      DFEVector<DFEVar> ret_vec = new DFEVectorType<DFEVar>(this.type, srcAddr1.getSize()).newInstance(this);
      for (int j = 0; j < srcAddr1.getSize(); j++) {
        ret_vec[j] <== control.mux(sub_bank.cast(dfeUInt(32)).cast(dfeRawBits(32)).slice(0,MathUtils.bitsToAddress(this.banks[0])), possible_reads[j]);
      }
      return ret_vec;
    }
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr0, DFEVar srcAddr1, int[] p) {
    return connectRport(srcAddr0, srcAddr1);
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr0, DFEVar srcAddr1) {
    if (this.num_libs == 1) {
      DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(srcAddr1.getType(), srcAddr0.getSize()).newInstance(this);
      for (int j = 0; j < srcAddr0.getSize(); j++) {
        addr_vec[j] <== srcAddr0[j] * constant.var(srcAddr1.getType(), this.size1) + srcAddr1;
      }
      return connectRport(addr_vec);
    } else {
      // ASSUME WE ARE REQUESTING BANKS SEQUENTIALLY
      DFEVector<DFEVar> ret_vec = new DFEVectorType<DFEVar>(this.type, srcAddr0.getSize()).newInstance(this);
      for (int j = 0; j < srcAddr0.getSize(); j++) {
        ret_vec[j] <== this.ensemble[j].connectRport(rowAddr(srcAddr0[j]), srcAddr1);
      }
      return ret_vec;
    }
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr, int[] p) {
    return connectRport(srcAddr);
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr) {
    DFEVar[] bank_local_rdata = new DFEVar[banks[1]];
    if (banks[1] != srcAddr.getSize()) {
      // System.out.printf("ERROR: #banks[1] = %d, Vector size = %d do not match!", banks[1], srcAddr.getSize());
      // System.exit(-1);
    }

    // Redirect outputs to appropriate stream slots if necessary
    if (banks[1] == 1){
      for (int i=0; i<banks[1]; i++) {
        DFEVar bank_addr = bankAndLocalAddr(srcAddr[i], AddrMode.BANK);
        DFEVar bank_local_addr = bankAndLocalAddr(srcAddr[i], AddrMode.LOCAL);
        bank_local_rdata[i] = m[i].read(bank_local_addr);
      }
      DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type, banks[1]);
      DFEVector<DFEVar> outstream = vectorType.newInstance(this);
      for (int i=0; i<banks[1]; i++) {
        outstream[i] <== bank_local_rdata[i];
      }
      return outstream;
    } else {
      // If we are reading an element from each row, then srcAddrs MUST be 
      //   multiplexed, as each bank has a different local address:(
      DFEVar rd_delta = srcAddr[1] - srcAddr[0];
      DFEVar dfeSize0 = constant.var(dfeUInt(addrBits), size0);
      DFEVar rd_sel = (srcAddr[1] - srcAddr[0]).cast(dfeUInt(addrBits)).eq(dfeSize0);      
      // Bundle address array into a structure we can mux from
      DFEVar[] srcAddr_4mux = new DFEVar[banks[1]];
      for (int i=0; i<banks[1]; i++) {
        srcAddr_4mux[i] = srcAddr[i];
      }
      for (int i=0; i<banks[1]; i++) {
        DFEVar col_rotation = bankAndLocalAddr(srcAddr[i], AddrMode.COLROTATION);
        DFEVar row_rotation = bankAndLocalAddr(srcAddr[i], AddrMode.ROWROTATION);
        DFEVar vert_adjustment = row_rotation - col_rotation;
        DFEVar shifted_amt = control.mux(rd_sel, constant.var(0), vert_adjustment);
        DFEVar shifted_addr = control.mux(shifted_amt, srcAddr_4mux);
        DFEVar bank_local_addr = bankAndLocalAddr(shifted_addr, AddrMode.LOCAL);
        bank_local_rdata[i] = m[i].read(bank_local_addr);
      }

      DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type, banks[1]);
      DFEVector<DFEVar> outstream = vectorType.newInstance(this);
      // Rotation depends on column for reading rows in parallel,
      //  depends on row for reading cols in parallel
      for (int i=0; i<banks[1]; i++) {
        DFEVar bank_addr = bankAndLocalAddr(srcAddr[i], AddrMode.BANK);
        DFEVar rotation = bankAndLocalAddr(srcAddr[i], AddrMode.ROWROTATION);
        DFEVar effective_bank = bank_addr + rotation;
        DFEVar select = effective_bank.slice(0, MathUtils.bitsToAddress(banks[1]));
        outstream[i] <== control.mux(select, bank_local_rdata);
      }
      return outstream;
    }
  }


  // DFEVector<DFEVar> connectAport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar en) {
  //   if (this.num_libs == 1) {
  //     DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(dstAddr1[0].getType(), dstAddr1.getSize()).newInstance(this);
  //     for (int j = 0; j < dstAddr1.getSize(); j++) {
  //       addr_vec[j] <== dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1[j];
  //     }
  //     connectWport(addr_vec, dstData, en);
  //   } else {
  //     DFEVar sub_srcAddr0 = rowAddr(dstAddr0);
  //     DFEVar sub_bank = ensAddr(dstAddr0);
  //     DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(dstAddr1[0].getType(), dstAddr1.getSize()).newInstance(this);
  //     for (int j = 0; j < dstAddr1.getSize(); j++) {
  //       addr_vec[j] <== sub_srcAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1[j];
  //     }

  //     for (int i = 0; i < this.num_libs; i++) {
  //       this.ensemble[i].connectWport(addr_vec, dstData, en & constant.var(sub_bank.getType(), i) === sub_bank);
  //     }
      
  //   }
  // }

  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar en, int[] p) {
    connectWport(dstAddr0, dstAddr1, dstData, en);
  }

  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar en) {
    if (this.num_libs == 1) {
      DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(dstAddr1[0].getType(), dstAddr1.getSize()).newInstance(this);
      for (int j = 0; j < dstAddr1.getSize(); j++) {
        addr_vec[j] <== dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1[j];
      }
      connectWport(addr_vec, dstData, en);
    } else {
      DFEVar sub_srcAddr0 = rowAddr(dstAddr0);
      DFEVar sub_bank = ensAddr(dstAddr0);
      DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(dstAddr1[0].getType(), dstAddr1.getSize()).newInstance(this);
      for (int j = 0; j < dstAddr1.getSize(); j++) {
        addr_vec[j] <== sub_srcAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1[j];
      }

      for (int i = 0; i < this.num_libs; i++) {
        this.ensemble[i].connectWport(addr_vec, dstData, en & constant.var(sub_bank.getType(), i) === sub_bank);
      }
      
    }
  }

  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar en, int ens, int[] p) {
    connectWport(dstAddr0, dstAddr1, dstData, en, ens);
  }

  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar en, int ens) {
    if (dstAddr1.getSize() == 1) {
      connectWport(dstAddr0, dstAddr1[0], dstData[0], en);
    } else {
      if (this.num_libs == 1) { 
        DFEVector<DFEVar> addr_vec = new DFEVectorType<DFEVar>(dstAddr1[0].getType(), dstAddr1.getSize()).newInstance(this);
        for (int j = 0; j < dstAddr1.getSize(); j++) {
          addr_vec[j] <== dstAddr0 * constant.var(dstAddr0.getType(), this.size1) + dstAddr1[j];
        }
        connectWport(addr_vec, dstData, en);
      } else {
        DFEVar sub_dstAddr0 = rowAddr(dstAddr0);
        this.ensemble[ens].connectWport(sub_dstAddr0, dstAddr1, dstData, en, ens);
      }
    }
  }

  DFEVector<DFEVar> connectBankAport(int bank, DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> data, DFEVar en) {
    DFEVar bank_local_addr = bankAndLocalAddr(dstAddr[0], AddrMode.LOCAL);
    return new DFEVectorType<DFEVar>(data[0].getType(), data.getSize()).newInstance(this,m[bank].accum(bank_local_addr, data[0], en));
  }

  DFEVector<DFEVar> connectBankAport(int bank, DFEVar dstAddr, DFEVar data, DFEVar en) {
    DFEVector<DFEVar> vaddr = new DFEVectorType<DFEVar>(dstAddr.getType(), 1).newInstance(this);
    DFEVector<DFEVar> vdata = new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this);
    vaddr[0] <== dstAddr;
    vdata[0] <== data;
    return connectBankAport(bank, vaddr, vdata, en);
  }

  void connectBankWport(int bank, DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> data, DFEVar en, int[] port) {
    DFEVar bank_local_addr = bankAndLocalAddr(dstAddr[0], AddrMode.LOCAL);
    m[bank].write(bank_local_addr, data[0], en);
  }

  void connectBankWport(int bank, DFEVar dstAddr0, DFEVar dstAddr1, DFEVector<DFEVar> data, DFEVar en, int[] port) {
    DFEVar sub_rowAddr0 = rowAddr(dstAddr0);
    this.ensemble[bank].connectWport(sub_rowAddr0, dstAddr1, data, en, port);
  }

  void connectBankWport(int bank, DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> data, DFEVar en, int[] port) {
    DFEVar sub_rowAddr0 = rowAddr(dstAddr0);
    this.ensemble[bank].connectWport(sub_rowAddr0, dstAddr1, data, en, port);
  }

  void connectBankWport(int bank, DFEVector<DFEVar> dstAddr0, DFEVar dstAddr1, DFEVector<DFEVar> data, DFEVar en, int[] port) {
    System.out.printf("BankWport disallowed for column-major writes!");
    System.exit(-1);
  }

  void connectBankWport(int bank, DFEVar dstAddr, DFEVar data, DFEVar en, int[] port) {
    DFEVector<DFEVar> vaddr = new DFEVectorType<DFEVar>(dstAddr.getType(), 1).newInstance(this);
    DFEVector<DFEVar> vdata = new DFEVectorType<DFEVar>(data.getType(), 1).newInstance(this);
    vaddr[0] <== dstAddr;
    vdata[0] <== data;
    connectBankWport(bank, vaddr, vdata, en, port);
  }

  DFEVector<DFEVar> connectAport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, DFEVar en) {
    if (dstAddr.getSize() == 1) {
      return connectAport(dstAddr[0], dstData[0], en);
    } else {
      DFEVector<DFEVar> retdata = new DFEVectorType<DFEVar>(dstData[0].getType(), dstData.getSize()).newInstance(this);
      if (banks[1] == 1) { // Not sure why there would ever be vectored input to 1-bank mem
        for (int i=0; i<banks[1]; i++) {
          DFEVar bank_local_addr = bankAndLocalAddr(dstAddr[i], AddrMode.LOCAL);
          retdata[i] <== m[i].accum(bank_local_addr, dstData[i], en);
        }
        return retdata;
      } else {
        DFEVar[] dstAddr_array = new DFEVar[banks[1]];
        DFEVar[] dstData_array = new DFEVar[banks[1]];
        for (int i=0; i<banks[1]; i++) {
          dstAddr_array[i] = dstAddr[i];
          dstData_array[i] = dstData[i];
        }

        for (int i=0; i<banks[1]; i++) {
          // All should have same rotation?  As long as we don't read over multiple rows
          DFEVar bank_addr = bankAndLocalAddr(dstAddr[i], AddrMode.BANK);
          DFEVar rotation = bankAndLocalAddr(dstAddr[i], AddrMode.ROWROTATION);
          DFEVar effective_bank = bank_addr - rotation;
          DFEVar select = effective_bank.slice(0, MathUtils.bitsToAddress(banks[1]));
          DFEVar waddr = control.mux(select, dstAddr_array);
          DFEVar wdata = control.mux(select, dstData_array);
          DFEVar bank_local_addr = bankAndLocalAddr(waddr, AddrMode.LOCAL);
          retdata[i] <== m[i].accum(bank_local_addr, wdata, en);
        }
        return retdata;
      }
    }

  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, DFEVar en, int[] p) {
    if (this.muxSize == 1) {
      connectWport(dstAddr, dstData, en);
    } else {
      for (int j = 0; j < this.banks[1]; j++) {
        this.muxAddrVec[j][muxInt] <== dstAddr[j];
        this.muxDataVec[j][muxInt] <== dstData[j];
      }
      this.muxWen[muxInt] <== en;
      muxInt++;        
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, DFEVar en) {
    if (dstAddr.getSize() == 1) {
      connectWport(dstAddr[0], dstData[0], en);
    } else {
      if (banks[1] == 1) { // Not sure why there would ever be vectored input to 1-bank mem
        for (int i=0; i<banks[1]; i++) {
          DFEVar bank_local_addr = bankAndLocalAddr(dstAddr[i], AddrMode.LOCAL);
          m[i].write(bank_local_addr, dstData[i], en);
        }
      } else {
        DFEVar[] dstAddr_array = new DFEVar[banks[1]];
        DFEVar[] dstData_array = new DFEVar[banks[1]];
        for (int i=0; i<banks[1]; i++) {
          dstAddr_array[i] = dstAddr[i];
          dstData_array[i] = dstData[i];
        }

        for (int i=0; i<banks[1]; i++) {
          // All should have same rotation?  As long as we don't read over multiple rows
          DFEVar bank_addr = bankAndLocalAddr(dstAddr[i], AddrMode.BANK);
          DFEVar rotation = bankAndLocalAddr(dstAddr[i], AddrMode.ROWROTATION);
          DFEVar effective_bank = bank_addr - rotation;
          DFEVar select = effective_bank.slice(0, MathUtils.bitsToAddress(banks[1]));
          DFEVar waddr = control.mux(select, dstAddr_array);
          DFEVar wdata = control.mux(select, dstData_array);
          DFEVar bank_local_addr = bankAndLocalAddr(waddr, AddrMode.LOCAL);
          m[i].write(bank_local_addr, wdata, en);
        }
      }
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, int[] p) {
    connectWport(dstAddr, dstData);
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData) {
    if (dstAddr.getSize() == 1) {
      connectWport(dstAddr[0], dstData[0], constant.var(true));
    } else {
      connectWport(dstAddr, dstData, constant.var(true));
    }
  }

  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, int[] p) {
    connectWport(dstAddr0, dstAddr1, dstData);
  }

  void connectWport(DFEVector<DFEVar> dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData, DFEVar wen) { // Interface for 2D NBuf write
    // Let's hope one of them has length of 1
    if (dstAddr0.getSize() == 1) {
      connectWport(dstAddr0[0], dstAddr1, dstData, wen);
    } else if (dstAddr1.getSize() == 1) {
      System.out.printf("ERROR: Cannot write column-major to BRAM! rowpar " + dstAddr0.getSize() + ", colpar " + dstAddr1.getSize());
      System.exit(-1);
    } else {
      System.out.printf("ERROR: Cannot write a 2D tile to BRAM!");
      System.exit(-1);
    }
  }


  void connectWport(DFEVar dstAddr0, DFEVector<DFEVar> dstAddr1, DFEVector<DFEVar> dstData) {
    if (dstAddr1.getSize() == 1) {
      connectWport(dstAddr0, dstAddr1[0], dstData[0], constant.var(true));
    } else {
      connectWport(dstAddr0, dstAddr1, dstData, constant.var(true), 0);
    }
  }
}
