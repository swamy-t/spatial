package engine;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.MemAccessPattern;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration.OptimizationOptions;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration.OptimizationOptions.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;

	class TopManager extends CustomManager {
	  private static final CPUTypes int8_t =    CPUTypes.INT8;
	  private static final CPUTypes int16_t =    CPUTypes.INT16;
	  private static final CPUTypes int32_t =    CPUTypes.INT32;
	  private static final CPUTypes int64_t =    CPUTypes.INT64;
	  private static final CPUTypes uint8_t =    CPUTypes.UINT8;
	  private static final CPUTypes uint16_t =    CPUTypes.UINT16;
	  private static final CPUTypes uint32_t =    CPUTypes.UINT32;
	  private static final CPUTypes uint64_t =    CPUTypes.UINT64;
	  private static final CPUTypes FLOAT = CPUTypes.FLOAT;
	  private static final CPUTypes DOUBLE = CPUTypes.DOUBLE;
	

	  TopManager(EngineParameters engineParameters) {
	    super(engineParameters);

	    // Disable stream status blocks
	    DebugLevel debugLevel = new DebugLevel();
	    debugLevel.setHasStreamStatus(false);
	    debug.setDebugLevel(debugLevel);

	    // Setup stream clock and memory clock
	    config.setDefaultStreamClockFrequency(150);
	    config.setOnCardMemoryFrequency(LMemFrequency.MAX4MAIA_400);
	    config.setEnableAddressGeneratorsInSlowClock(true);

    // Allow non-multiple transitions for parallel tile loaders: may affect area
    config.setAllowNonMultipleTransitions(true);

	    // Setup memory controller clock and config
	//    MemoryControllerConfig mem_cfg = new MemoryControllerConfig();
	////    mem_cfg.setBurstSize(4); //MAX3: 4 = 4*384 bits, 8 = 8*384 bits
	//    mem_cfg.setDataReadFIFOExtraPipelineRegInFabric(true);
	//    mem_cfg.setDataFIFOExtraPipelineRegInFabric(true); //timing-23may
	//    //mem_cfg.setDataFIFOPrimitiveWidth(5*72);
	//    config.setMemoryControllerConfig(mem_cfg);

	    // Create a KernelConfiguration object that sets the OptimizationTechnique
	    // to optimize for area, which is the default in the 2014.1 compiler
	    // TODO: This causes build failures with MaxJ during source annotation. Investigate why
	    KernelConfiguration kernelConfig = getCurrentKernelConfig();
	    kernelConfig.warnings.setWarningBehaviour(KernelConfiguration.WarningOptions.Warning.ALL,
	    	KernelConfiguration.WarningOptions.WarningBehaviour.IGNORE);
	    // kernelConfig.optimization.setOptimizationTechnique(OptimizationTechnique.AREA);
	    // KernelBlock k = addKernel(new TopKernel(makeKernelParameters("TopKernel", kernelConfig)));

	    KernelBlock k = addKernel(new TopKernel(makeKernelParameters("TopKernel")));

	    
	    // Setup CPU <-> FPGA stream
	    DFELink fromcpu = addStreamFromCPU("fromcpu");
	    DFELink tocpu = addStreamToCPU("tocpu");
	    DFELink fromlmem = addStreamFromOnCardMemory("fromlmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
	    DFELink tolmem = addStreamToOnCardMemory("tolmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
	    tolmem <== fromcpu;
	    tocpu <== fromlmem;
	

	    
	    // Setup interrupt stream
	    DFELink intrStream = addStreamToOnCardMemory("intrStream", k.getOutput("intrCmd"));
	    intrStream <== k.getOutput("intrStream");
	
	
    // Setup LMEM -> DFE streams (input streams to DFE)
    // Setup DFE -> LMEM (output streams from DFE)
// Scatter DRAM1776_void1842
    DFELink DRAM1776_void1842_out_rd_0 = addStreamFromOnCardMemory("DRAM1776_void1842_out_rd_0", k.getOutput("DRAM1776_void1842_out_rd_cmd_0"));
    k.getInput("DRAM1776_void1842_out_rd_0") <== DRAM1776_void1842_out_rd_0;
    DFELink DRAM1776_void1842_out_0 = addStreamToOnCardMemory("DRAM1776_void1842_out_0", k.getOutput("DRAM1776_void1842_out_cmd_0"));
    DRAM1776_void1842_out_0 <== k.getOutput("DRAM1776_void1842_out_0");
// Scatter DRAM1776_void1843
    DFELink DRAM1776_void1843_out_rd_0 = addStreamFromOnCardMemory("DRAM1776_void1843_out_rd_0", k.getOutput("DRAM1776_void1843_out_rd_cmd_0"));
    k.getInput("DRAM1776_void1843_out_rd_0") <== DRAM1776_void1843_out_rd_0;
    DFELink DRAM1776_void1843_out_0 = addStreamToOnCardMemory("DRAM1776_void1843_out_0", k.getOutput("DRAM1776_void1843_out_cmd_0"));
    DRAM1776_void1843_out_0 <== k.getOutput("DRAM1776_void1843_out_0");
// Scatter DRAM1776_void1845
    DFELink DRAM1776_void1845_out_rd_0 = addStreamFromOnCardMemory("DRAM1776_void1845_out_rd_0", k.getOutput("DRAM1776_void1845_out_rd_cmd_0"));
    k.getInput("DRAM1776_void1845_out_rd_0") <== DRAM1776_void1845_out_rd_0;
    DFELink DRAM1776_void1845_out_0 = addStreamToOnCardMemory("DRAM1776_void1845_out_0", k.getOutput("DRAM1776_void1845_out_cmd_0"));
    DRAM1776_void1845_out_0 <== k.getOutput("DRAM1776_void1845_out_0");
// Offchip_load_cmd DRAM1774_void1821
    DFELink DRAM1774_void1821_in = addStreamFromOnCardMemory("DRAM1774_void1821_in", k.getOutput("DRAM1774_void1821_in_cmd"));
    k.getInput("DRAM1774_void1821_in") <== DRAM1774_void1821_in;
// Gather DRAM1775_void1837
    DFELink DRAM1775_void1837_in_0 = addStreamFromOnCardMemory("DRAM1775_void1837_in_0", k.getOutput("DRAM1775_void1837_in_cmd_0"));
    k.getInput("DRAM1775_void1837_in_0") <== DRAM1775_void1837_in_0;
// Scatter DRAM1776_void1844
    DFELink DRAM1776_void1844_out_rd_0 = addStreamFromOnCardMemory("DRAM1776_void1844_out_rd_0", k.getOutput("DRAM1776_void1844_out_rd_cmd_0"));
    k.getInput("DRAM1776_void1844_out_rd_0") <== DRAM1776_void1844_out_rd_0;
    DFELink DRAM1776_void1844_out_0 = addStreamToOnCardMemory("DRAM1776_void1844_out_0", k.getOutput("DRAM1776_void1844_out_cmd_0"));
    DRAM1776_void1844_out_0 <== k.getOutput("DRAM1776_void1844_out_0");

  }


	  // CPU -> LMEM (read interface)
	  private static EngineInterface interfaceRead(String name) {
	    EngineInterface ei = new EngineInterface(name);
	    InterfaceParam size = ei.addParam("size", uint32_t);
	    InterfaceParam start = ei.addParam("start", uint32_t);
	    InterfaceParam sizeInBytes = size;

	    // Stop the kernel from running
	    ei.setScalar("TopKernel", "en", 0);

	    // Setup address map and access pattern
	    ei.setLMemLinear("fromlmem", start, sizeInBytes);
	    ei.setStream("tocpu", uint8_t, sizeInBytes);
	    ei.ignoreAll(Direction.IN_OUT);
	    return ei;
	  }
	

	  // LMEM -> CPU (write interface)
	  private static EngineInterface interfaceWrite(String name) {
	    EngineInterface ei = new EngineInterface(name);
	    InterfaceParam size = ei.addParam("size", uint32_t);
	    InterfaceParam start = ei.addParam("start", uint32_t);
	    InterfaceParam sizeInBytes = size;

	    // Stop the kernel from running
	    ei.setScalar("TopKernel", "en", 0);

	    // Setup address map and access pattern
	    ei.setLMemLinear("tolmem", start, sizeInBytes);
	    ei.setStream("fromcpu", uint8_t, sizeInBytes);
	    ei.ignoreAll(Direction.IN_OUT);
	    return ei;
	  }
	

	  // Interface to run DFE (default interface)
	  private static EngineInterface interfaceDefault() {
	    EngineInterface ei = new EngineInterface();
	    ei.setTicks("TopKernel", Long.MAX_VALUE);
	    ei.setScalar("TopKernel", "en", 1);
	
    ei.unignoreScalar("TopKernel", "cycles");

	    ei.setLMemInterruptOn("intrStream");
	    ei.ignoreAll(Direction.IN_OUT);
	    return ei;
	  }
	

	  public static void main(String[] args) {
	    TopManager m = new TopManager(new EngineParameters(args));

	    BuildConfig c = new BuildConfig(BuildConfig.Level.FULL_BUILD);
	    c.setBuildEffort(BuildConfig.Effort.HIGH);
	    c.setEnableTimingAnalysis(true);
	    m.setBuildConfig(c);

	    m.createSLiCinterface(interfaceRead("readLMem"));
	    m.createSLiCinterface(interfaceWrite("writeLMem"));
	    m.createSLiCinterface(interfaceDefault());
	    m.build();
	  }
	}
	
