/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);




int DRAM1774 = 1048576;

int DRAM1775 = 2097152;

int DRAM1776 = 3145728;






































/* Emitting Hwblock dependencies { */
// Dep: const1536_FixedPoint1 = ConstFixPt(1536,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const9216_FixedPoint124 = ConstFixPt(9216,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint177 = ConstFixPt(0,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const384_FixedPoint179 = ConstFixPt(384,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint189 = ConstFixPt(512,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM1774 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: const1_FixedPoint52 = ConstFixPt(1,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$Signed,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B32,ScatterGather$@682f78a8.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM1775 = Reflect(Offchip_new(Sym(124)),Summary(mutable),List())
// Dep: DRAM1776 = Reflect(Offchip_new(Sym(124)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void1853_en = top_en;
top_done <== void1853_done;
// Hwblock: childrenOf(void1853) = List(Sym(1851))
/* void1853_SeqSM void1853 { */
SMIO void1853_sm = addStateMachine("void1853_sm", new void1853_SeqSM(this));
    void1853_sm.connectInput("sm_en", void1853_en);
    void1853_done <== stream.offset(void1853_sm.getOutput("sm_done"),-1);
void1853_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1853_rst_en = void1853_sm.getOutput("rst_en");
void1853_sm.connectInput("s0_done", seq1851_done);
seq1851_en <== void1853_sm.getOutput("s0_en");
DFEVar void1853_datapath_en = void1853_en & ~void1853_rst_en;
DFEVar void1853_ctr_en = void1853_datapath_en;
/* } void1853_SeqSM void1853 */
/* ParPipeForeach seq1851 = ParPipeForeach(CounterChain1818) { */
{
/* SeqSM to be emitted */
/* seq1851_SeqSM seq1851 { */
SMIO seq1851_sm = addStateMachine("seq1851_sm", new seq1851_SeqSM(this));
    seq1851_sm.connectInput("sm_en", seq1851_en);
    seq1851_done <== stream.offset(seq1851_sm.getOutput("sm_done"),-1);
DFEVar seq1851_niter = ((const1536_FixedPoint1 - const0_FixedPoint177) / (const384_FixedPoint179 * 1));
seq1851_sm.connectInput("sm_numIter", seq1851_niter.cast(dfeUInt(32)));
DFEVar seq1851_rst_en = seq1851_sm.getOutput("rst_en");
seq1851_sm.connectInput("s0_done", void1836_done);
void1836_en <== seq1851_sm.getOutput("s0_en");
seq1851_sm.connectInput("s1_done", void1841_done);
void1841_en <== seq1851_sm.getOutput("s1_en");
seq1851_sm.connectInput("s2_done", void1849_done);
void1849_en <== seq1851_sm.getOutput("s2_en");
DFEVar Counter1817_max_0 = const1536_FixedPoint1;
DFEVar seq1851_datapath_en = seq1851_en;
DFEVar seq1851_ctr_en = void1849_done;
/* CustomCounterChain { */
DFEVar CounterChain1818_en = void1849_done;
DFEVar[] CounterChain1818_max = {const1536_FixedPoint1};
int[] CounterChain1818_strides = {384};
OffsetExpr CounterChain1818_offset = stream.makeOffsetAutoLoop("CounterChain1818_offset");
SMIO CounterChain1818 = addStateMachine("CounterChain1818_sm", new CounterChain1818_CtrSM(owner, CounterChain1818_strides)); // gap = 0
CounterChain1818.connectInput("en", CounterChain1818_en);
CounterChain1818.connectInput("reset", seq1851_done);
DFEVar CounterChain1818_maxed = CounterChain1818.getOutput("saturated");
DFEVar CounterChain1818_done = stream.offset(CounterChain1818.getOutput("done"), -1);
OffsetExpr CounterChain1818_additionalOffset = new OffsetExpr();
CounterChain1818.connectInput("max0", CounterChain1818_max[0]);
DFEVar Counter1817 = CounterChain1818.getOutput("counter0");
/* } CustomCounterChain */
/* } seq1851_SeqSM seq1851 */
DFEVar seq1851_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1530 = Counter1817;
// Unit pipe writtenIn(void1836) = List()
/* void1836_MPSM void1836 { */
SMIO void1836_sm = addStateMachine("void1836_sm", new void1836_MPSM(this));
    void1836_sm.connectInput("sm_en", void1836_en);
    void1836_done <== stream.offset(void1836_sm.getOutput("sm_done"),-1);
void1836_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1836_rst_en = void1836_sm.getOutput("rst_en");
void1836_sm.connectInput("s0_done", void1834_done);
void1834_en <== void1836_sm.getOutput("s0_en");
DFEVar void1836_datapath_en = void1836_en & ~void1836_rst_en;
DFEVar void1836_ctr_en = void1836_datapath_en;
/* } void1836_MPSM void1836 */
/* Block void1836 Unitpipe { */
{
// FIFO FIFO1820 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint189, const0_FixedPoint177);
DFEVector<DFEVar> FIFO1820_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this);
DFEVector<DFEVar> FIFO1820_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this);
DFEVar FIFO1820_readEn = dfeBool().newInstance(this);
DFEVar FIFO1820_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1834) = List()
/* void1834_MPSM void1834 { */
SMIO void1834_sm = addStateMachine("void1834_sm", new void1834_MPSM(this));
    void1834_sm.connectInput("sm_en", void1834_en);
    void1834_done <== stream.offset(void1834_sm.getOutput("sm_done"),-1);
void1834_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1834_rst_en = void1834_sm.getOutput("rst_en");
void1834_sm.connectInput("s0_done", void1821_done);
void1821_en <== void1834_sm.getOutput("s0_en");
void1834_sm.connectInput("s1_done", pipe1832_done);
pipe1832_en <== void1834_sm.getOutput("s1_en");
DFEVar void1834_datapath_en = void1834_en & ~void1834_rst_en;
DFEVar void1834_ctr_en = void1834_datapath_en;
/* } void1834_MPSM void1834 */
/* Block void1834 Unitpipe { */
{
MemoryCmdGenLib void1821 = new MemoryCmdGenLib(
              this,
              void1821_en, void1821_done,
              DRAM1774, FixedPoint1530,
              "DRAM1774_void1821_in",
              384,
              FIFO1820_readEn, FIFO1820_rdata);
FIFO1820_writeEn <== void1821_en;
FIFO1820_wdata <== FIFO1820_rdata;
/* ParPipeForeach pipe1832 = ParPipeForeach(CounterChain1823) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1832 { */
OffsetExpr pipe1832_offset = stream.makeOffsetAutoLoop("pipe1832_offset");
SMIO pipe1832_sm = addStateMachine("pipe1832_sm", new PipeSM(this, 1));
    pipe1832_sm.connectInput("sm_en", pipe1832_en);
    pipe1832_done <== stream.offset(pipe1832_sm.getOutput("sm_done"),-1-pipe1832_offset);
DFEVar pipe1832_rst_en = pipe1832_sm.getOutput("rst_en");
pipe1832_sm.connectInput("rst_done", pipe1832_rst_done);
pipe1832_rst_done <== stream.offset(pipe1832_rst_en, -pipe1832_offset-1);
pipe1832_sm.connectInput("sm_maxIn_0", const384_FixedPoint179);
DFEVar Counter1822_max_0 = pipe1832_sm.getOutput("ctr_maxOut_0");
pipe1832_sm.connectInput("ctr_done", CounterChain1823_done);
DFEVar pipe1832_datapath_en = pipe1832_sm.getOutput("ctr_en");
DFEVar pipe1832_ctr_en = pipe1832_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1823_en = pipe1832_datapath_en;
DFEVar[] CounterChain1823_max = {const384_FixedPoint179};
int[] CounterChain1823_strides = {1};
OffsetExpr CounterChain1823_offset = stream.makeOffsetAutoLoop("CounterChain1823_offset");
SMIO CounterChain1823 = addStateMachine("CounterChain1823_sm", new CounterChain1823_CtrSM(owner, CounterChain1823_strides)); // gap = 0
CounterChain1823.connectInput("en", CounterChain1823_en);
CounterChain1823.connectInput("reset", pipe1832_done);
DFEVar CounterChain1823_maxed = CounterChain1823.getOutput("saturated");
CounterChain1823_done <== stream.offset(CounterChain1823.getOutput("done"), -1);
OffsetExpr CounterChain1823_additionalOffset = new OffsetExpr();
CounterChain1823.connectInput("max0", CounterChain1823_max[0]);
DFEVector<DFEVar> Counter1822 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter1822[0] <== CounterChain1823.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter1822[i+1] <== CounterChain1823.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1832 */
DFEVar pipe1832_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1536 = Counter1822[0];
DFEVar FixedPoint1537 = Counter1822[1];
DFEVar FixedPoint1538 = Counter1822[2];
DFEVar FixedPoint1539 = Counter1822[3];
// DFEVar Vector1824 = Par_pop_fifo(FIFO1820, 4);
FIFO1820_readEn <== pipe1832_ctr_en;
DFEVector<DFEVar> Vector1824 = FIFO1820_rdata;
DFEVector<DFEVar> Vector1547 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint1536,FixedPoint1537,FixedPoint1538,FixedPoint1539));
DFEVar FixedPoint1825 = Vector1824[0];
DFEVar FixedPoint1826 = Vector1824[1];
DFEVar FixedPoint1827 = Vector1824[2];
DFEVar FixedPoint1828 = Vector1824[3];
DFEVector<DFEVar> Vector1829 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint1825,FixedPoint1826,FixedPoint1827,FixedPoint1828));
/* Bram_store { */
BRAM1816_0.connectWport(Vector1547, Vector1829, pipe1832_datapath_en, new int[] {0}); //w8
BRAM1816_1.connectWport(Vector1547, Vector1829, pipe1832_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1832 */
}
/* } Block void1834 Unitpipe */
}
/* } Block void1836 Unitpipe */
// Unit pipe writtenIn(void1841) = List()
/* void1841_MPSM void1841 { */
SMIO void1841_sm = addStateMachine("void1841_sm", new void1841_MPSM(this));
    void1841_sm.connectInput("sm_en", void1841_en);
    void1841_done <== stream.offset(void1841_sm.getOutput("sm_done"),-1);
void1841_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1841_rst_en = void1841_sm.getOutput("rst_en");
void1841_sm.connectInput("s0_done", void1839_done);
void1839_en <== void1841_sm.getOutput("s0_en");
DFEVar void1841_datapath_en = void1841_en & ~void1841_rst_en;
DFEVar void1841_ctr_en = void1841_datapath_en;
/* } void1841_MPSM void1841 */
/* Block void1841 Unitpipe { */
{
/* void1839_ParSM void1839 { */
SMIO void1839_sm = addStateMachine("void1839_sm", new void1839_ParSM(this));
    void1839_sm.connectInput("sm_en", void1839_en);
    void1839_done <== stream.offset(void1839_sm.getOutput("sm_done"),-1);
void1839_sm.connectInput("s0_done", void1837_done);
void1837_en <== void1839_sm.getOutput("s0_en");
/* } void1839_ParSM void1839 */
/* Block void1839 Parallel { */
{
DFEVector<DFEVar> void1837_waddr = new DFEVectorType<DFEVar>(BRAM1816_0.type, 1).newInstance(this);
DFEVector<DFEVar> void1837_wdata = new DFEVectorType<DFEVar>(BRAM1819_0.type, 1).newInstance(this);
DFEVar void1837_wen = dfeBool().newInstance(this);
DFEVar void1837_forceLdSt = constant.var(true);
DFEVar void1837_isLdSt = dfeBool().newInstance(this);
GatherLib void1837 = new GatherLib(
        this,
        void1837_en, void1837_done, 
        void1837_isLdSt, void1837_forceLdSt,
        BRAM1816_0, const384_FixedPoint179,
        DRAM1775,  "DRAM1775_void1837_in",
        void1837_waddr, void1837_wdata, void1837_wen);
BRAM1819_0.connectWport(void1837_waddr, void1837_wdata, void1837_wen);
}
/* } Block void1839 Parallel */
}
/* } Block void1841 Unitpipe */
// Unit pipe writtenIn(void1849) = List()
/* void1849_MPSM void1849 { */
SMIO void1849_sm = addStateMachine("void1849_sm", new void1849_MPSM(this));
    void1849_sm.connectInput("sm_en", void1849_en);
    void1849_done <== stream.offset(void1849_sm.getOutput("sm_done"),-1);
void1849_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1849_rst_en = void1849_sm.getOutput("rst_en");
void1849_sm.connectInput("s0_done", void1847_done);
void1847_en <== void1849_sm.getOutput("s0_en");
DFEVar void1849_datapath_en = void1849_en & ~void1849_rst_en;
DFEVar void1849_ctr_en = void1849_datapath_en;
/* } void1849_MPSM void1849 */
/* Block void1849 Unitpipe { */
{
/* void1847_ParSM void1847 { */
SMIO void1847_sm = addStateMachine("void1847_sm", new void1847_ParSM(this));
    void1847_sm.connectInput("sm_en", void1847_en);
    void1847_done <== stream.offset(void1847_sm.getOutput("sm_done"),-1);
void1847_sm.connectInput("s0_done", void1842_done);
void1842_en <== void1847_sm.getOutput("s0_en");
void1847_sm.connectInput("s1_done", void1843_done);
void1843_en <== void1847_sm.getOutput("s1_en");
void1847_sm.connectInput("s2_done", void1844_done);
void1844_en <== void1847_sm.getOutput("s2_en");
void1847_sm.connectInput("s3_done", void1845_done);
void1845_en <== void1847_sm.getOutput("s3_en");
/* } void1847_ParSM void1847 */
/* Block void1847 Parallel { */
{
DFEVar void1842_forceLdSt = constant.var(true);
DFEVar void1842_isLdSt = dfeBool().newInstance(this);
ScatterLib void1842 = new ScatterLib(
        this,
        void1842_en, void1842_done,
        void1842_isLdSt, void1842_forceLdSt,
        BRAM1816_1, BRAM1819_0, const384_FixedPoint179,
        DRAM1776, "DRAM1776_void1842_out");
DFEVar void1843_forceLdSt = constant.var(true);
DFEVar void1843_isLdSt = dfeBool().newInstance(this);
ScatterLib void1843 = new ScatterLib(
        this,
        void1843_en, void1843_done,
        void1843_isLdSt, void1843_forceLdSt,
        BRAM1816_1, BRAM1819_0, const384_FixedPoint179,
        DRAM1776, "DRAM1776_void1843_out");
DFEVar void1844_forceLdSt = constant.var(true);
DFEVar void1844_isLdSt = dfeBool().newInstance(this);
ScatterLib void1844 = new ScatterLib(
        this,
        void1844_en, void1844_done,
        void1844_isLdSt, void1844_forceLdSt,
        BRAM1816_1, BRAM1819_0, const384_FixedPoint179,
        DRAM1776, "DRAM1776_void1844_out");
DFEVar void1845_forceLdSt = constant.var(true);
DFEVar void1845_isLdSt = dfeBool().newInstance(this);
ScatterLib void1845 = new ScatterLib(
        this,
        void1845_en, void1845_done,
        void1845_isLdSt, void1845_forceLdSt,
        BRAM1816_1, BRAM1819_0, const384_FixedPoint179,
        DRAM1776, "DRAM1776_void1845_out");
}
/* } Block void1847 Parallel */
}
/* } Block void1849 Unitpipe */
}
/* } ParPipeForeach seq1851 */




















// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
