/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);









/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint4 = ConstFixPt(0,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$Signed,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B32,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argin549 = Reflect(Argin_new(Sym(4)),Summary(mutable),List())
// Dep: const96_FixedPoint3 = ConstFixPt(96,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$Signed,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B32,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint15 = ConstFixPt(1,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$Signed,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B32,Niter$@eb4d977.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: Bit31 = ConstBit(true)
DFEVar Bit31 = constant.var( true );
// Dep: argout550 = Reflect(Argout_new(Sym(4)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void572_en = top_en;
top_done <== void572_done;
// Hwblock: childrenOf(void572) = List(Sym(570))
/* void572_SeqSM void572 { */
SMIO void572_sm = addStateMachine("void572_sm", new void572_SeqSM(this));
    void572_sm.connectInput("sm_en", void572_en);
    void572_done <== stream.offset(void572_sm.getOutput("sm_done"),-1);
void572_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void572_rst_en = void572_sm.getOutput("rst_en");
void572_sm.connectInput("s0_done", void570_done);
void570_en <== void572_sm.getOutput("s0_en");
DFEVar void572_datapath_en = void572_en & ~void572_rst_en;
DFEVar void572_ctr_en = void572_datapath_en;
/* } void572_SeqSM void572 */
// Unit pipe writtenIn(void570) = List()
/* void570_SeqSM void570 { */
SMIO void570_sm = addStateMachine("void570_sm", new void570_SeqSM(this));
    void570_sm.connectInput("sm_en", void570_en);
    void570_done <== stream.offset(void570_sm.getOutput("sm_done"),-1);
void570_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void570_rst_en = void570_sm.getOutput("rst_en");
void570_sm.connectInput("s0_done", seq568_done);
seq568_en <== void570_sm.getOutput("s0_en");
DFEVar void570_datapath_en = void570_en & ~void570_rst_en;
DFEVar void570_ctr_en = void570_datapath_en;
/* } void570_SeqSM void570 */
/* Block void570 Unitpipe { */
{
/* ParPipeForeach seq568 = ParPipeForeach(CounterChain554) { */
{
/* SeqSM to be emitted */
/* seq568_SeqSM seq568 { */
SMIO seq568_sm = addStateMachine("seq568_sm", new seq568_SeqSM(this));
    seq568_sm.connectInput("sm_en", seq568_en);
    seq568_done <== stream.offset(seq568_sm.getOutput("sm_done"),-1);
DFEVar seq568_niter = ((FixedPoint552 - const0_FixedPoint4) / (const96_FixedPoint3 * 1));
seq568_sm.connectInput("sm_numIter", seq568_niter.cast(dfeUInt(32)));
DFEVar seq568_rst_en = seq568_sm.getOutput("rst_en");
seq568_sm.connectInput("s0_done", pipe562_done);
pipe562_en <== seq568_sm.getOutput("s0_en");
seq568_sm.connectInput("s1_done", void566_done);
void566_en <== seq568_sm.getOutput("s1_en");
DFEVar Counter553_max_0 = FixedPoint552;
DFEVar seq568_datapath_en = seq568_en;
DFEVar seq568_ctr_en = void566_done;
/* CustomCounterChain { */
DFEVar CounterChain554_en = void566_done;
DFEVar[] CounterChain554_max = {FixedPoint552};
int[] CounterChain554_strides = {96};
OffsetExpr CounterChain554_offset = stream.makeOffsetAutoLoop("CounterChain554_offset");
SMIO CounterChain554 = addStateMachine("CounterChain554_sm", new CounterChain554_CtrSM(owner, CounterChain554_strides)); // gap = 0
CounterChain554.connectInput("en", CounterChain554_en);
CounterChain554.connectInput("reset", seq568_done);
DFEVar CounterChain554_maxed = CounterChain554.getOutput("saturated");
DFEVar CounterChain554_done = stream.offset(CounterChain554.getOutput("done"), -1);
OffsetExpr CounterChain554_additionalOffset = new OffsetExpr();
CounterChain554.connectInput("max0", CounterChain554_max[0]);
DFEVar Counter553 = CounterChain554.getOutput("counter0");
/* } CustomCounterChain */
/* } seq568_SeqSM seq568 */
DFEVar seq568_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint427 = Counter553;
/* ParPipeReduce pipe562 = ParPipeReduce(CounterChain557, reg555) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe562 controller { */
/* PipeSM pipe562 { */
OffsetExpr pipe562_offset = stream.makeOffsetAutoLoop("pipe562_offset");
SMIO pipe562_sm = addStateMachine("pipe562_sm", new PipeSM(this, 1));
    pipe562_sm.connectInput("sm_en", pipe562_en);
    pipe562_done <== stream.offset(pipe562_sm.getOutput("sm_done"),-1-pipe562_offset);
DFEVar pipe562_rst_en = pipe562_sm.getOutput("rst_en");
pipe562_sm.connectInput("rst_done", pipe562_rst_done);
pipe562_rst_done <== stream.offset(pipe562_rst_en, -pipe562_offset-1);
pipe562_sm.connectInput("sm_maxIn_0", const96_FixedPoint3);
DFEVar Counter556_max_0 = pipe562_sm.getOutput("ctr_maxOut_0");
pipe562_sm.connectInput("ctr_done", CounterChain557_done);
DFEVar pipe562_datapath_en = pipe562_sm.getOutput("ctr_en");
DFEVar pipe562_loopLengthVal = pipe562_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe562_redLoopChain = control.count.makeCounterChain(pipe562_datapath_en);
DFEVar pipe562_redLoopCtr = pipe562_redLoopChain.addCounter(pipe562_loopLengthVal, 1);
DFEVar pipe562_redLoop_done = stream.offset(pipe562_redLoopChain.getCounterWrap(pipe562_redLoopCtr), -1);
DFEVar pipe562_ctr_en = pipe562_datapath_en & pipe562_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain557_en = pipe562_datapath_en & pipe562_redLoop_done;
DFEVar[] CounterChain557_max = {Counter556_max_0};
int[] CounterChain557_strides = {1};
OffsetExpr CounterChain557_offset = stream.makeOffsetAutoLoop("CounterChain557_offset");
SMIO CounterChain557 = addStateMachine("CounterChain557_sm", new CounterChain557_CtrSM(owner, CounterChain557_strides)); // gap = 0
CounterChain557.connectInput("en", CounterChain557_en);
CounterChain557.connectInput("reset", pipe562_done);
DFEVar CounterChain557_maxed = CounterChain557.getOutput("saturated");
CounterChain557_done <== stream.offset(CounterChain557.getOutput("done"), -1);
OffsetExpr CounterChain557_additionalOffset = new OffsetExpr();
CounterChain557.connectInput("max0", CounterChain557_max[0]);
DFEVector<DFEVar> Counter556 = new DFEVectorType<DFEVar>(dfeInt(32), 8).newInstance(this);
Counter556[0] <== CounterChain557.getOutput("counter0");
for (int i = 0; i < 7; i++) {
  Counter556[i+1] <== CounterChain557.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe562 */
/* } pipe562 controller */
/* ParPipeReduce pipe562 par loop { */
DFEVar FixedPoint439 = Counter556[0];
DFEVar FixedPoint440 = Counter556[1];
DFEVar FixedPoint441 = Counter556[2];
DFEVar FixedPoint442 = Counter556[3];
DFEVar FixedPoint443 = Counter556[4];
DFEVar FixedPoint444 = Counter556[5];
DFEVar FixedPoint445 = Counter556[6];
DFEVar FixedPoint446 = Counter556[7];
/* } pipe562 par loop */
DFEVar FixedPoint559 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe562 func block { */
// FixedPoint558 is just a register read
// FixedPoint447 already emitted in pipe562;
// FixedPoint448 already emitted in pipe562;
// FixedPoint471 already emitted in pipe562;
// FixedPoint449 already emitted in pipe562;
// FixedPoint450 already emitted in pipe562;
// FixedPoint472 already emitted in pipe562;
// FixedPoint475 already emitted in pipe562;
// FixedPoint451 already emitted in pipe562;
// FixedPoint452 already emitted in pipe562;
// FixedPoint473 already emitted in pipe562;
// FixedPoint453 already emitted in pipe562;
// FixedPoint454 already emitted in pipe562;
// FixedPoint474 already emitted in pipe562;
// FixedPoint476 already emitted in pipe562;
// FixedPoint477 already emitted in pipe562;
// FixedPoint559 already emitted in pipe562;
/* Reg_write { */
// Write to accumulator register
DFEVar reg555_en = pipe562_datapath_en & pipe562_redLoop_done;
Accumulator.Params reg555_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe562_done /*because _rst_en goes hi on each iter*/).withEnable(reg555_en);
DFEVar reg555 = Reductions.accumulator.makeAccumulator(FixedPoint559, reg555_accParams);
reg555_1_lib.write(reg555, pipe562_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@c46cddc, numDuplicates = 2 */
/* } pipe562 func block */
new pipe562_reduce_kernel(owner   , FixedPoint559 , FixedPoint427,FixedPoint439,FixedPoint440,FixedPoint441,FixedPoint442,FixedPoint443,FixedPoint444,FixedPoint445,FixedPoint446); // Reduce kernel
}
/* } ParPipeReduce pipe562 */
// Unit pipe writtenIn(void566) = List(Sym(550))
//   argout550 = Reflect(Argout_new(Sym(4)),Summary(mutable),List()), isAccum(argout550) = false
/* PipeSM void566 { */
OffsetExpr void566_offset = stream.makeOffsetAutoLoop("void566_offset");
SMIO void566_sm = addStateMachine("void566_sm", new PipeSM(this, 1));
    void566_sm.connectInput("sm_en", void566_en);
    void566_done <== stream.offset(void566_sm.getOutput("sm_done"),-1-void566_offset);
DFEVar void566_rst_en = void566_sm.getOutput("rst_en");
void566_sm.connectInput("rst_done", void566_rst_done);
void566_rst_done <== stream.offset(void566_rst_en, -void566_offset-1);
void566_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void566_sm.connectInput("ctr_done", stream.offset(void566_sm.getOutput("ctr_en"), -1));
DFEVar void566_datapath_en = void566_en & ~void566_rst_en;
DFEVar void566_ctr_en = void566_datapath_en;
/* } PipeSM void566 */
/* Block void566 Unitpipe { */
{
DFEVar FixedPoint563 = reg555_1; // reg read
/* Reg_write { */
io.scalarOutput("argout550", FixedPoint563, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@27a36de5, numDuplicates = 1 */
}
/* } Block void566 Unitpipe */
}
/* } ParPipeForeach seq568 */
}
/* } Block void570 Unitpipe */



















// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
