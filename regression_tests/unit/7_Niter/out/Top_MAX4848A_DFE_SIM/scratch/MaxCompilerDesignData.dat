#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          41970
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2014-05-20"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Top"
#define MAXFILE_BUILD_DIR  "/local/ssd/home/mattfel/transform_regression_tests_21-24/hyperdsl/spatial/regression_tests/unit/7_Niter/out/./Top_MAX4848A_DFE_SIM"
#define MAXFILE_BUILD_DATE  20161009
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(CONTAINS_PRINTF, 1)
PARAM(MemCtrlPro_TotalNumStreams, 3)
PARAM(MemCtrlPro_NumRdStreams, 1)
PARAM(MemCtrlPro_NumWrStreams, 2)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 432)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_Parity_Mode, 1)
PARAM(MemCtrlPro_ECC_Mode, 1)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 72)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 3)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 103)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "TopKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, DFEMODEL, MAX4848A)
ENGINE_PARAMETERS(maxFileName, STRING, "Top")
ENGINE_PARAMETERS(target, ENUM, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, BOOL, false)
ENGINE_PARAMETERS(MPPRStartCT, INT, 1)
ENGINE_PARAMETERS(MPPREndCT, INT, 1)
ENGINE_PARAMETERS(MPPRThreads, INT, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, INT, 0)
#endif






#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain554_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, pipe562_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain557_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, void566_offset, 0)
#endif


#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(TopKernel, Kernel)
MANAGER_NODE(fromcpu, PCIe_From_Host)
MANAGER_NODE(tocpu, PCIe_To_Host)
MANAGER_NODE(addrgen_cmd_fromlmem, AddrGen)
MANAGER_NODE(cmd_fromlmem_0, Memory_Cmd)
MANAGER_NODE(fromlmem, From_Memory)
MANAGER_NODE(addrgen_cmd_tolmem, AddrGen)
MANAGER_NODE(cmd_tolmem_0, Memory_Cmd)
MANAGER_NODE(tolmem, To_Memory)
MANAGER_NODE(cmd_intrStream, Memory_Cmd)
MANAGER_NODE(intrStream, To_Memory)
MANAGER_NODE(Stream_21, DualAspectReg)
MANAGER_NODE(Stream_16, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_26, StreamPullPushAdapter)
MANAGER_NODE(Stream_30, StreamPullPushAdapter)
MANAGER_NODE(Stream_24, Fifo)
MANAGER_NODE(Stream_28, Fifo)
MANAGER_NODE(Stream_34, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(TopKernel, intrCmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, intrStream, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(fromcpu, fromcpu, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(tocpu, tocpu, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_fromlmem_0, cmd_fromlmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(fromlmem, fromlmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_tolmem_0, cmd_tolmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(tolmem, tolmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(cmd_intrStream, cmd_intrStream, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(intrStream, intrStream, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_21, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_21, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_16, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_26, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_26, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_30, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_30, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_24, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_24, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_28, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_28, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_34, input, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_34, output, OUT, PCIE, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(fromcpu, fromcpu, Stream_28, input, 128)
MANAGER_STREAM(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, cmd_fromlmem_0, cmd_fromlmem_0, 64)
MANAGER_STREAM(fromlmem, fromlmem, Stream_4, input, 1536)
MANAGER_STREAM(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, cmd_tolmem_0, cmd_tolmem_0, 64)
MANAGER_STREAM(TopKernel, intrCmd, cmd_intrStream, cmd_intrStream, 64)
MANAGER_STREAM(TopKernel, intrStream, Stream_24, input, 32)
MANAGER_STREAM(Stream_21, output, Stream_26, input, 1536)
MANAGER_STREAM(Stream_16, output, Stream_30, input, 1536)
MANAGER_STREAM(Stream_4, output, Stream_34, input, 128)
MANAGER_STREAM(Stream_26, output, intrStream, intrStream, 1536)
MANAGER_STREAM(Stream_30, output, tolmem, tolmem, 1536)
MANAGER_STREAM(Stream_24, output, Stream_21, input, 32)
MANAGER_STREAM(Stream_28, output, Stream_16, input, 128)
MANAGER_STREAM(Stream_34, output, tocpu, tocpu, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(TopKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(fromcpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\nengine.TopManager.<init>(MaxJManager.maxj:72)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(tocpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1170)\nengine.TopManager.<init>(MaxJManager.maxj:73)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(cmd_fromlmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(cmd_tolmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(cmd_intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_26, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_30, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_24, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
MANAGER_NODE_STACK_TRACE(Stream_34, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(TopKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(TopKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(TopKernel, TopKernel)
#endif


#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(TopKernel, intrCmd, 0)
DEBUG_OUTPUT_BITS(TopKernel, intrStream, 1)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(TopKernel, TopKernel, "TopKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromcpu, PCIePushSourceSyncMax4, "fromcpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_fromlmem, AddressGeneratorSync, "addrgen_cmd_fromlmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_tolmem, AddressGeneratorSync, "addrgen_cmd_tolmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, FifoPushToPullSync, "Stream_24", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, FifoPushToPullSync, "Stream_28", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, DualAspectRegSync, "Stream_21", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, DualAspectRegSync, "Stream_16", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_34, FifoPushToPushSync, "Stream_34", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_26, PullToPushAdapterSync, "Stream_26")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_30, PullToPushAdapterSync, "Stream_30")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tocpu, PCIePushSinkSyncMax3, "tocpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromlmem, MemoryProxyPullSourceSync, "fromlmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_fromlmem_0, MemoryProxyCommandSinkSync, "cmd_fromlmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_tolmem_0, MemoryProxyCommandSinkSync, "cmd_tolmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_intrStream, MemoryProxyCommandSinkSync, "cmd_intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tolmem, MemoryProxyPushSinkSync, "tolmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(intrStream, MemoryProxyPushSinkSync, "intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 103)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "6a54df41748f633d0918872e1b5c89eb8dfdeedd7a093d460b7783d786ba1e74")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_stall, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_valid, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_stall_vector, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fromlmem, setup, "fromlmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_fromlmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_fromlmem_0, setup, "cmd_fromlmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_tolmem_0, setup, "cmd_tolmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_intrStream, setup, "cmd_intrStream", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(tolmem, setup, "tolmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_tolmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(intrStream, setup, "intrStream", MemoryControllerPro::getDefaultMemoryController(), "cmd_intrStream", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(fromcpu, STREAM_FROM_HOST, 0)
PCIE_STREAM(tocpu, STREAM_TO_HOST, 0)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_fromlmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_tolmem, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(fromlmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(tolmem, 1, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(intrStream, 2, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(TopKernel.en, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.argin549, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(TopKernel.io_intrCmd_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_intrStream_force_disabled, 0x6, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.run_cycle_count, 0x7, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.argout550, 0xd, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(TopKernel.cycles, 0x11, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(TopKernel.current_run_cycle_count, 0x19, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.dbg_ctld_almost_empty, 0x1f, 1, hwBits(0))
REG(TopKernel.dbg_ctld_done, 0x20, 1, hwBits(0))
REG(TopKernel.dbg_ctld_empty, 0x21, 1, hwBits(0))
REG(TopKernel.dbg_ctld_read, 0x22, 1, hwBits(0))
REG(TopKernel.dbg_ctld_read_pipe_dbg, 0x23, 1, hwBits(0))
REG(TopKernel.dbg_ctld_request, 0x24, 1, hwBits(0))
REG(TopKernel.dbg_done_out, 0x25, 1, hwBits(1))
REG(TopKernel.dbg_fill_level, 0x26, 1, hwBits(5))
REG(TopKernel.dbg_flush_level, 0x27, 1, hwBits(5))
REG(TopKernel.dbg_flush_start, 0x28, 1, hwBits(1))
REG(TopKernel.dbg_flush_start_level, 0x29, 1, hwBits(5))
REG(TopKernel.dbg_flushing, 0x2a, 1, hwBits(1))
REG(TopKernel.dbg_full_level, 0x2b, 1, hwBits(5))
REG(TopKernel.dbg_out_stall, 0x2c, 1, hwBits(2))
REG(TopKernel.dbg_out_valid, 0x2d, 1, hwBits(2))
REG(TopKernel.dbg_stall_vector, 0x2e, 1, hwBits(2))
REG(addrgen_cmd_fromlmem._Addr_En, 0x2f, 1, hwBits(1))
REG(addrgen_cmd_fromlmem._CmdSize, 0x30, 1, hwBits(8))
REG(addrgen_cmd_fromlmem._BlockSize_X, 0x31, 5, hwBits(33))
REG(addrgen_cmd_fromlmem._Wrap_X, 0x36, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Start_X_Addr, 0x3a, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Offset_0, 0x3e, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Addr_En, 0x42, 1, hwBits(1))
REG(addrgen_cmd_tolmem._CmdSize, 0x43, 1, hwBits(8))
REG(addrgen_cmd_tolmem._BlockSize_X, 0x44, 5, hwBits(33))
REG(addrgen_cmd_tolmem._Wrap_X, 0x49, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Start_X_Addr, 0x4d, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Offset_0, 0x51, 4, hwBits(32))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x55, 1, hwBits(3))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x56, 1, hwBits(3))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x57, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x58, 1, hwBits(8))
REG(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x59, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x5a, 4, hwBits(32))
REG(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5e, 4, hwBits(32))
REG(ifpga.ifpga_ctrl, 0x62, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x63, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(TopKernel.en, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.argin549, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.io_intrCmd_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_intrStream_force_disabled, 0x6, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.run_cycle_count, 0x7, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.argout550, 0xd, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_READ_ONLY, false)
REG_V2(TopKernel.cycles, 0x11, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.current_run_cycle_count, 0x19, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_almost_empty, 0x1f, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_done, 0x20, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_empty, 0x21, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read, 0x22, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read_pipe_dbg, 0x23, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_request, 0x24, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_done_out, 0x25, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_fill_level, 0x26, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_level, 0x27, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start, 0x28, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start_level, 0x29, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flushing, 0x2a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_full_level, 0x2b, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_stall, 0x2c, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_valid, 0x2d, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_stall_vector, 0x2e, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Addr_En, 0x2f, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._CmdSize, 0x30, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._BlockSize_X, 0x31, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Wrap_X, 0x36, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Start_X_Addr, 0x3a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Offset_0, 0x3e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Addr_En, 0x42, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._CmdSize, 0x43, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._BlockSize_X, 0x44, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Wrap_X, 0x49, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Start_X_Addr, 0x4d, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Offset_0, 0x51, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x55, 1, hwBits(3), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x56, 1, hwBits(3), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x57, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x58, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x59, 1, hwBits(1), HOST_WRITE_ONLY, true)
REG_V2(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x5a, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5e, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x62, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x63, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("6a54df41748f633d0918872e1b5c89eb8dfdeedd7a093d460b7783d786ba1e74")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(maia_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_fromlmem, addrgen_cmd_fromlmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_tolmem, addrgen_cmd_tolmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_intrStream, addrgen_cmd_intrStream., STREAM)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_fromlmem, fromlmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_tolmem, tolmem, 0, 1, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_intrStream, intrStream, 0, 2, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Top
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Top_H
#define SLIC_DECLARATIONS_Top_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Top_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 */
void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	uint8_t *outstream_tocpu; /**<  [out] The stream should be of size param_size bytes. */
} Top_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 */
void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	const uint8_t *instream_fromcpu; /**<  [in] The stream should be of size param_size bytes. */
} Top_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_argin549 Interface Parameter "argin549".
 * \param [out] outscalar_TopKernel_argout550 Output scalar parameter "TopKernel.argout550".
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 */
void Top(
	int32_t param_argin549,
	uint64_t *outscalar_TopKernel_argout550,
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_argin549 Interface Parameter "argin549".
 * \param [out] outscalar_TopKernel_argout550 Output scalar parameter "TopKernel.argout550".
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_nonblock(
	int32_t param_argin549,
	uint64_t *outscalar_TopKernel_argout550,
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_argin549; /**<  [in] Interface Parameter "argin549". */
	uint64_t *outscalar_TopKernel_argout550; /**<  [out] Output scalar parameter "TopKernel.argout550". */
	uint64_t *outscalar_TopKernel_cycles; /**<  [out] Output scalar parameter "TopKernel.cycles". */
} Top_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Top_init(void);

/* Error handling functions */
int Top_has_errors(void);
const char* Top_get_errors(void);
void Top_clear_errors(void);
/* Free statically allocated maxfile data */
void Top_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Top_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(TopKernel, 147, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 191, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream$OffsetExpr.getDFEVar(Stream.java:186)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:128)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 33, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:523)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:130)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 34, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:131)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 36, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:134)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 148, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 182, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 37, NodeStateMachine, "State Machine (CounterChain557_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:138)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 38, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:142)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 150, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 143, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:123)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 5, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.BaseLib.<init>(BaseLib.maxj:49)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 29, NodeStateMachine, "State Machine (pipe562_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:118)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 144, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:120)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 154, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 151, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 61, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:204)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 152, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 145, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:202)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 60, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:203)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 57, NodeStateMachine, "State Machine (void566_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:197)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 153, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 146, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:199)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 2, NodeInputMappedReg, "Scalar input (argin549)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nengine.BaseLib.<init>(BaseLib.maxj:28)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 118, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:971)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:85)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 24, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1002)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:85)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 25, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:86)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 19, NodeStateMachine, "State Machine (seq568_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:82)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 155, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 20, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:84)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 16, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:69)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 14, NodeStateMachine, "State Machine (void570_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:66)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 156, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 15, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:68)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 157, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 195, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x000000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 66, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 67, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernel.<init>(TopKernel.maxj:48)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 0, NodeInputMappedReg, "Scalar input (en)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nengine.TopKernel.<init>(TopKernel.maxj:26)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 1, NodeStateMachine, "State Machine (mainSm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernel.<init>(TopKernel.maxj:32)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 11, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:57)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 9, NodeStateMachine, "State Machine (void572_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:54)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 158, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 10, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:56)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 177, NodeFIFO, "FIFO(11)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 183, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 184, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 159, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 160, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 26, NodeStateMachine, "State Machine (CounterChain554_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:100)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 129, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 161, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 162, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 130, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 163, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 186, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 131, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 165, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 187, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 132, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 167, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 188, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 133, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 169, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 189, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 134, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 171, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 190, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 135, NodeTriAdd, "3 +", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 173, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 136, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:864)\nengine.pipe562_reduce_kernel.common(pipe562_reduce_kernel.maxj:31)\nengine.pipe562_reduce_kernel.<init>(pipe562_reduce_kernel.maxj:54)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:190)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 39, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:184)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 175, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 40, NodeAccumulator, "MaxDCAccumulator_hwOffsetFix(32, 0, TWOSCOMPLEMENT)_MONADIC", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.makeAccumulator(Accumulator.java:107)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:186)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 41, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:187)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 3, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:727)\nengine.DelayLib.common(DelayLib.maxj:26)\nengine.DelayLib.<init>(DelayLib.maxj:63)\nengine.BaseLib.<init>(BaseLib.maxj:39)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 64, NodeOutputMappedReg, "Scalar output (argout550)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:881)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:212)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 185, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 194, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 69, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 70, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 86, NodeInputMappedReg, "Scalar input (io_intrCmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 87, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 88, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 97, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 180, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:156)\n")
PHOTON_NODE_DATA(TopKernel, 123, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 125, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 93, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 127, NodeConstantRawBits, "{HWRawBits:8}\n0x01", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 128, NodeConstantRawBits, "{HWRawBits:32}\n0x00000000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 92, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 94, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 96, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 98, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 89, NodeOutput, "Output(intrCmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 99, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 100, NodeOutputMappedReg, "Scalar output (cycles)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 102, NodeInputMappedReg, "Scalar input (io_intrStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 103, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 104, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 101, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000005; 5.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 105, NodeOutput, "Output(intrStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 110, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 193, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 107, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 108, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 109, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 111, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 192, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 113, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 114, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 116, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 117, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
PHOTON_NODE_DATA(TopKernel, 115, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:146)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Top_has_errors(void)
{	return stored_has_error; }
const char* Top_get_errors(void)
{	return stored_error; }
void Top_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Top_use_simulation[16];
static void Top_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Top_use_simulation, 16, "Top_%05ld_", pid);
}
static const char *Top_check_use_simulation(void)
{
	Top_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Top_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Top_simulation_launch = 0;
int Top_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Top_simulator_stop(void)
{
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Top_static_init(void) 
{
	stored_maxfile = Top_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Top_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Top_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Top_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Top_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Top_simulation_launch == 1) {
		int sim_stat = Top_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Top_simulation_launch = 0;
	}
}

static int Top_get_pcie_alignment(void)
{
#ifdef Top_PCIE_ALIGNMENT
	return ((Top_PCIE_ALIGNMENT < 1) ? 16 : Top_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Top_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Top_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Top_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Top_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_readLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_readLMem_callback_stream_t;

typedef struct Top_readLMem_callback_data {
	Top_readLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_readLMem_callback_data_t;

static void Top_readLMem_callback_internal(void *cb_data)
{
	Top_readLMem_callback_data_t *data = (Top_readLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_readLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_readLMem_convert_internal(
	max_file_t *maxfile,
	Top_readLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_readLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_readLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_readLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_readLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argin549" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argout550" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	/* code for stream tocpu */
	size_t outstream_size_tocpu = param_size;
	if (outstream_size_tocpu > 0) {
		uint8_t *stream_ptr = interface_actions->outstream_tocpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->outstream_tocpu))) {
			uint8_t *aligned_outstream_tocpu = malloc(outstream_size_tocpu);
			if (aligned_outstream_tocpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'tocpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_tocpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_tocpu;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_tocpu;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_tocpu;
		}
		max_queue_output(actions, "tocpu", stream_ptr, outstream_size_tocpu);
		CHECK_ERRORS;
	}
	/* end of code for stream tocpu */
	
	/* code for linear memory-stream "fromlmem" */
	size_t lmem_address_fromlmem = param_start;
	size_t lmem_arr_size_fromlmem = param_size;
	int lmem_burst_size_fromlmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_address_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_fromlmem, lmem_burst_size_fromlmem );
	}
	if ( (lmem_arr_size_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_arr_size_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_fromlmem, lmem_burst_size_fromlmem );
	}
	if (lmem_arr_size_fromlmem > 0) {
		max_lmem_linear(actions, "fromlmem", lmem_address_fromlmem, lmem_arr_size_fromlmem);
	} else {
		max_ignore_lmem(actions, "fromlmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "fromlmem" */
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_readLMem_nonblock(param_size, param_start, outstream_tocpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	Top_readLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.outstream_tocpu = outstream_tocpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_readLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions)
{
	return Top_readLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_writeLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_writeLMem_callback_stream_t;

typedef struct Top_writeLMem_callback_data {
	Top_writeLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_writeLMem_callback_data_t;

static void Top_writeLMem_callback_internal(void *cb_data)
{
	Top_writeLMem_callback_data_t *data = (Top_writeLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_writeLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_writeLMem_convert_internal(
	max_file_t *maxfile,
	Top_writeLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_writeLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_writeLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_writeLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_writeLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argin549" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argout550" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	/* code for stream fromcpu */
	size_t instream_size_fromcpu = param_size;
	if (instream_size_fromcpu > 0) {
		const uint8_t *stream_ptr = interface_actions->instream_fromcpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->instream_fromcpu))) {
			uint8_t *aligned_instream_fromcpu = malloc(instream_size_fromcpu);
			if (aligned_instream_fromcpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'fromcpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_fromcpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_fromcpu;
			(&cb_data->stream[cb_data->count])->size        = instream_size_fromcpu;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_fromcpu, interface_actions->instream_fromcpu, instream_size_fromcpu);
			stream_ptr = aligned_instream_fromcpu;
		}
		max_queue_input(actions, "fromcpu", stream_ptr, instream_size_fromcpu);
		CHECK_ERRORS;
	}
	/* end of code for stream fromcpu */
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	/* code for linear memory-stream "tolmem" */
	size_t lmem_address_tolmem = param_start;
	size_t lmem_arr_size_tolmem = param_size;
	int lmem_burst_size_tolmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_address_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_tolmem, lmem_burst_size_tolmem );
	}
	if ( (lmem_arr_size_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_arr_size_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_tolmem, lmem_burst_size_tolmem );
	}
	if (lmem_arr_size_tolmem > 0) {
		max_lmem_linear(actions, "tolmem", lmem_address_tolmem, lmem_arr_size_tolmem);
	} else {
		max_ignore_lmem(actions, "tolmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "tolmem" */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_writeLMem_nonblock(param_size, param_start, instream_fromcpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	Top_writeLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.instream_fromcpu = instream_fromcpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_writeLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions)
{
	return Top_writeLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_callback_stream_t;

typedef struct Top_callback_data {
	Top_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_callback_data_t;

static void Top_callback_internal(void *cb_data)
{
	Top_callback_data_t *data = (Top_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_convert_internal(
	max_file_t *maxfile,
	Top_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_callback_internal;
	}

	int32_t param_argin549 = interface_actions->param_argin549;
	
	/* code for scalar TopKernel.run_cycle_count */
	uint64_t ticks_TopKernel = 9223372036854775807;
	max_set_ticks(actions, "TopKernel", 9223372036854775807);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.run_cycle_count*/
	
	/* code for scalar TopKernel.argin549 */
	uint64_t inscalar_TopKernel_argin549 = param_argin549;
	max_set_uint64t(actions, "TopKernel", "argin549", inscalar_TopKernel_argin549);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.argin549*/
	
	/* code for scalar TopKernel.argout550 */
	uint64_t *outscalar_TopKernel_argout550 = interface_actions->outscalar_TopKernel_argout550;
	max_get_uint64t(actions, "TopKernel", "argout550", outscalar_TopKernel_argout550);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.argout550*/
	
	/* code for scalar TopKernel.cycles */
	uint64_t *outscalar_TopKernel_cycles = interface_actions->outscalar_TopKernel_cycles;
	max_get_uint64t(actions, "TopKernel", "cycles", outscalar_TopKernel_cycles);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.cycles*/
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 1;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	/* code for memory-stream "intrStream" */
	max_lmem_set_interrupt_on(actions, "intrStream");
	CHECK_ERRORS;
	/* end of code for memory-stream "intrStream" */
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top(
	int32_t param_argin549,
	uint64_t *outscalar_TopKernel_argout550,
	uint64_t *outscalar_TopKernel_cycles)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_nonblock(param_argin549, outscalar_TopKernel_argout550, outscalar_TopKernel_cycles);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_nonblock(
	int32_t param_argin549,
	uint64_t *outscalar_TopKernel_argout550,
	uint64_t *outscalar_TopKernel_cycles)
{
	Top_actions_t interface_actions;
	interface_actions.param_argin549 = param_argin549;
	interface_actions.outscalar_TopKernel_argout550 = outscalar_TopKernel_argout550;
	interface_actions.outscalar_TopKernel_cycles = outscalar_TopKernel_cycles;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_run_t *run = Top_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions)
{
	return Top_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, argin549)	
SLIC_SCALAR_DISABLED(TopKernel, argout550)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM(tocpu, param_size)	
SLIC_LMEM_LINEAR(fromlmem, param_start, param_size)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, argin549)	
SLIC_SCALAR_DISABLED(TopKernel, argout550)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM(fromcpu, param_size)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR(tolmem, param_start, param_size)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, argin549, param_argin549)	
SLIC_SET_TICKS(TopKernel, 9223372036854775807)	
SLIC_SCALAR_UINT64(TopKernel, argin549, param_argin549)	
SLIC_SCALAR_UINT64(TopKernel, en, 1)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_SET_INTERRUPT(intrStream)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlRvcC5oIiBuYW1lPSJUb3Ai
Pjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+
PGVuZ2luZW1vZGUgbmFtZT0icmVhZExNZW0iPjxmdW5jdGlvbiBuYW1lPSJUb3BfcmVhZExNZW0i
IHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3NpemUmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9zaXplIiB0eXBl
PSJ1aW50MzJfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtzdGFy
dCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3N0YXJ0IiB0eXBlPSJ1aW50
MzJfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIHBhcmFtX3Np
emUgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX3RvY3B1IiBzaXpl
PSJwYXJhbV9zaXplIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InVpbnQ4X3QiPjxkaW1lbnNpb24g
aW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9Ii8iIHZhbHVlPSIocGFyYW1fc2l6ZSAvIDEpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9z
aXplIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjEiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2lu
ZW1vZGU+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iVG9wX3dy
aXRlTE1lbSIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7c2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3Np
emUiIHR5cGU9InVpbnQzMl90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3N0YXJ0JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fc3RhcnQiIHR5
cGU9InVpbnQzMl90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUg
cGFyYW1fc2l6ZSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX2Zyb21j
cHUiIHNpemU9InBhcmFtX3NpemUiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0idWludDhfdCI+PGRp
bWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRv
ciBvcGVyYXRvcj0iLyIgdmFsdWU9IihwYXJhbV9zaXplIC8gMSkiPjx1c2VyUGFyYW0gdmFsdWU9
InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMSIvPjwvbnVtQmluYXJ5T3BlcmF0
b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
VG9wIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRl
ciAmcXVvdDthcmdpbjU0OSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2Fy
Z2luNTQ5IiB0eXBlPSJpbnQzMl90Ii8+PHNjYWxhciBkZXNjPSJPdXRwdXQgc2NhbGFyIHBhcmFt
ZXRlciAmcXVvdDtUb3BLZXJuZWwuYXJnb3V0NTUwJnF1b3Q7LiIgZGlyZWN0aW9uPSJPdXRwdXQi
IG5hbWU9Im91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0NTUwIiB0eXBlPSJ1aW50NjRfdCIvPjxz
Y2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7VG9wS2VybmVsLmN5Y2xl
cyZxdW90Oy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRzY2FsYXJfVG9wS2VybmVsX2N5
Y2xlcyIgdHlwZT0idWludDY0X3QiLz48L2Z1bmN0aW9uPjwvZW5naW5lbW9kZT48L21heGZpbGU+

#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBUb3BfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFzX2Vycm9yOyB9
CmNvbnN0IGNoYXIqIFRvcF9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsg
fQp2b2lkIFRvcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3Rv
cmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBU
b3BfdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBUb3BfZGVmX3VzZV9zaW11bGF0aW9u
KHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50
ZihUb3BfdXNlX3NpbXVsYXRpb24sIDE2LCAiVG9wXyUwNWxkXyIsIHBpZCk7Cn0Kc3RhdGljIGNv
bnN0IGNoYXIgKlRvcF9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglUb3BfZGVmX3VzZV9z
aW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5n
KE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVz
ZV9zaW0gPSBUb3BfdXNlX3NpbXVsYXRpb247CgkJbWF4X2NvbmZpZ19zZXRfc3RyaW5nKE1BWF9D
T05GSUdfVVNFX1NJTVVMQVRJT04sIHVzZV9zaW0pOwoJfQoJcmV0dXJuIHVzZV9zaW07Cn0KCnN0
YXRpYyBpbnQgVG9wX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFRvcF9zaW11bGF0b3Jfc3Rh
cnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2No
ZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAx
MDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1B
WDQ4NDhBIC1TIHNpbXV0aWxzIHJlc3RhcnQiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBw
b3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwg
IiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vy
cm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBl
X2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21t
YW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQlpZiAoc3Ryc3Ry
KGJ1ZmYsICJFcnJvciIpKSB7CgkJCXNldF9lcnJvcihidWZmKTsKCQkJcmV0dmFsID0gLTE7CgkJ
fQoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIHJldHZhbDsKfQoKaW50IFRvcF9zaW11bGF0
b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2NoZWNrX3VzZV9zaW11
bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFUSD1z
aW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1TIHNp
bXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIp
OwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBl
eGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJl
dHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7
CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJ
CS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgVG9wX3N0YXRpY19pbml0KHZvaWQpIAp7CglzdG9yZWRf
bWF4ZmlsZSA9IFRvcF9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4
X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
CWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JU
X09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBt
YXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkg
ewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3Jz
KCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRf
bWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRf
dGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFRvcF9j
aGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4Zmls
ZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IFRvcF9zaW11bGF0b3Jfc3RhcnQo
KTsKCQlpZiAoKHNpbV9zdGF0ID09IDApICYmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZp
bGUsIHVzZV9zaW0pID09IDEpKSB7CgkJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBl
bHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5n
IHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3RydWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7
CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQgJ3VzZV9zaW11bGF0aW9uPTxzaW11bGF0
b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsK
CQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhlIGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5
c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9l
bmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwgIioiKTsKCWlmICghbWF4X29rKHN0b3Jl
ZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklH
X1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
XG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5nIG5vdy5cblxuIik7CgkJCWZmbHVzaChz
dGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShz
dG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0g
Cgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7
Cn0Kdm9pZCBUb3BfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJ
bWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlm
IChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxM
KSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAo
VG9wX3NpbXVsYXRpb25fbGF1bmNoID09IDEpIHsKCQlpbnQgc2ltX3N0YXQgPSBUb3Bfc2ltdWxh
dG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJF
cnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9
IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgVG9wX2dldF9wY2llX2FsaWdubWVudCh2b2lkKQp7CiNpZmRl
ZiBUb3BfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKFRvcF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8g
MTYgOiBUb3BfUENJRV9BTElHTk1FTlQpOwojZWxzZQoJcmV0dXJuIDE2OwojZW5kaWYKfQoKc3Rh
dGljIGludCBUb3BfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2ll
X2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9Cgpz
dGF0aWMgdm9pZCAqVG9wX21hbGxvY19hbGlnbmVkKGNvbnN0IHNpemVfdCBzaXplKQp7Cgl2b2lk
ICpwdHI7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhf
bWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFj
ZSByZWFkTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tKi8KCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNU
LT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJy
b3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4
X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tf
TlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAi
IiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0Up
OyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFRvcF9yZWFkTE1lbV9jYWxsYmFja19z
dHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVf
dCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gVG9wX3JlYWRMTWVtX2NhbGxiYWNrX3N0
cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2RhdGEgewoJVG9w
X3JlYWRMTWVtX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQg
bWF4X2NvdW50Owp9IFRvcF9yZWFkTE1lbV9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBU
b3BfcmVhZExNZW1fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJVG9wX3JlYWRM
TWVtX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChUb3BfcmVhZExNZW1fY2FsbGJhY2tfZGF0YV90
KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJ
CVRvcF9yZWFkTE1lbV9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJ
aWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0
ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsK
CX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBUb3BfcmVhZExNZW1fY29u
dmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglUb3BfcmVhZExNZW1fYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoq
Y2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVG9wX3JlYWRMTWVtX2NhbGxi
YWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNr
X2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxi
YWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2Rh
dGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFi
bGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlv
biBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0K
CQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNh
bGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmVG9wX3Jl
YWRMTWVtX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCXVpbnQzMl90IHBhcmFtX3NpemUgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc2l6ZTsKCQoJdWludDMyX3QgcGFyYW1fc3RhcnQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc3RhcnQ7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJUb3BLZXJuZWwiLCAicnVuX2N5Y2xlX2NvdW50IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiVG9wS2VybmVsIiwgImFyZ2luNTQ5IiApOwoJQ0hFQ0tf
RVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiVG9wS2VybmVsIiwgImFyZ291
dDU1MCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlRv
cEtlcm5lbCIsICJjeWNsZXMiICk7CglDSEVDS19FUlJPUlM7CgkKCS8qIGNvZGUgZm9yIHNjYWxh
ciBUb3BLZXJuZWwuZW4gKi8KCXVpbnQ2NF90IGluc2NhbGFyX1RvcEtlcm5lbF9lbiA9IDA7Cglt
YXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJlbiIsIGluc2NhbGFyX1RvcEtl
cm5lbF9lbik7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFRvcEtl
cm5lbC5lbiovCgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJmcm9tY3B1IiApOwoJQ0hF
Q0tfRVJST1JTOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gdG9jcHUgKi8KCXNpemVfdCBvdXRzdHJl
YW1fc2l6ZV90b2NwdSA9IHBhcmFtX3NpemU7CglpZiAob3V0c3RyZWFtX3NpemVfdG9jcHUgPiAw
KSB7CgkJdWludDhfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1f
dG9jcHU7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBUb3BfY2hlY2tfYWxpZ25lZChpbnRl
cmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3RvY3B1KSkpIHsKCQkJdWludDhfdCAqYWxpZ25lZF9v
dXRzdHJlYW1fdG9jcHUgPSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfdG9jcHUpOwoJCQlpZiAoYWxp
Z25lZF9vdXRzdHJlYW1fdG9jcHUgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGlj
KGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxs
b2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAndG9jcHUnIik7CgkJCQlDSEVDS19FUlJP
UlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIg
ICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fdG9jcHU7CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3Qq
KSBhbGlnbmVkX291dHN0cmVhbV90b2NwdTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+
Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV90b2NwdTsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5j
b3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fdG9jcHU7CgkJfQoJ
CW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgInRvY3B1Iiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFt
X3NpemVfdG9jcHUpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJl
YW0gdG9jcHUgKi8KCQoJLyogY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gImZyb21sbWVt
IiAqLwoJc2l6ZV90IGxtZW1fYWRkcmVzc19mcm9tbG1lbSA9IHBhcmFtX3N0YXJ0OwoJc2l6ZV90
IGxtZW1fYXJyX3NpemVfZnJvbWxtZW0gPSBwYXJhbV9zaXplOwoJaW50IGxtZW1fYnVyc3Rfc2l6
ZV9mcm9tbG1lbSA9IG1heF9nZXRfYnVyc3Rfc2l6ZShtYXhmaWxlLCBOVUxMKTsKCWlmICggKGxt
ZW1fYWRkcmVzc19mcm9tbG1lbSAlIGxtZW1fYnVyc3Rfc2l6ZV9mcm9tbG1lbSkgIT0gMCApIHsK
CQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIGZyb21sbWVtIHBh
cmFtZXRlciAnbG1lbV9hZGRyZXNzX2Zyb21sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBt
dXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1l
bV9hZGRyZXNzX2Zyb21sbWVtLCBsbWVtX2J1cnN0X3NpemVfZnJvbWxtZW0gKTsKCX0KCWlmICgg
KGxtZW1fYXJyX3NpemVfZnJvbWxtZW0gJSBsbWVtX2J1cnN0X3NpemVfZnJvbWxtZW0pICE9IDAg
KSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBmcm9tbG1l
bSBwYXJhbWV0ZXIgJ2xtZW1fYXJyX3NpemVfZnJvbWxtZW0nIGlzIHNldCB0byAlemQgYnl0ZXM7
IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9f
LCBsbWVtX2Fycl9zaXplX2Zyb21sbWVtLCBsbWVtX2J1cnN0X3NpemVfZnJvbWxtZW0gKTsKCX0K
CWlmIChsbWVtX2Fycl9zaXplX2Zyb21sbWVtID4gMCkgewoJCW1heF9sbWVtX2xpbmVhcihhY3Rp
b25zLCAiZnJvbWxtZW0iLCBsbWVtX2FkZHJlc3NfZnJvbWxtZW0sIGxtZW1fYXJyX3NpemVfZnJv
bWxtZW0pOwoJfSBlbHNlIHsKCQltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgImZyb21sbWVtIik7
Cgl9CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJl
YW0gImZyb21sbWVtIiAqLwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInRvbG1lbSIgKTsK
CUNIRUNLX0VSUk9SUzsKCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAw
KSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlm
cmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoK
dm9pZCBUb3BfcmVhZExNZW0oCgl1aW50MzJfdCBwYXJhbV9zaXplLAoJdWludDMyX3QgcGFyYW1f
c3RhcnQsCgl1aW50OF90ICpvdXRzdHJlYW1fdG9jcHUpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2Uo
JnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0
b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1
biA9IFRvcF9yZWFkTE1lbV9ub25ibG9jayhwYXJhbV9zaXplLCBwYXJhbV9zdGFydCwgb3V0c3Ry
ZWFtX3RvY3B1KTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsK
CW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqVG9wX3JlYWRMTWVtX25vbmJsb2NrKAoJdWlu
dDMyX3QgcGFyYW1fc2l6ZSwKCXVpbnQzMl90IHBhcmFtX3N0YXJ0LAoJdWludDhfdCAqb3V0c3Ry
ZWFtX3RvY3B1KQp7CglUb3BfcmVhZExNZW1fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJ
aW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fc2l6ZSA9IHBhcmFtX3NpemU7CglpbnRlcmZhY2VfYWN0
aW9ucy5wYXJhbV9zdGFydCA9IHBhcmFtX3N0YXJ0OwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3Ry
ZWFtX3RvY3B1ID0gb3V0c3RyZWFtX3RvY3B1OwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19i
c19pc19pbml0aWFsaXNlZCwgVG9wX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21h
eGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYyko
dm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlv
bnNfdCAqYWN0aW9ucyA9IFRvcF9yZWFkTE1lbV9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19O
VUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlk
YXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJS
T1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVu
YyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rp
b25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9l
bmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIFRv
cF9yZWFkTE1lbV9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVRvcF9yZWFkTE1lbV9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFRvcF9yZWFkTE1l
bV9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVu
X3QgKlRvcF9yZWFkTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVRv
cF9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICpt
YXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVu
Yykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2Fj
dGlvbnNfdCAqYWN0aW9ucyA9IFRvcF9yZWFkTE1lbV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUs
IGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfRVJST1JT
X1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxM
KSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsK
CQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5j
LCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwg
TlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgog
KiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVy
ZmFjZSAncmVhZExNZW0nLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgog
KiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAq
IFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3Jv
dXAuCiAqLwp2b2lkIFRvcF9yZWFkTE1lbV9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBU
b3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpy
dW4gPSBUb3BfcmVhZExNZW1fcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0
aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhf
d2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5v
bi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0nLgogKiAKICoK
ICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxh
YmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9m
IHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1
c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmlu
ZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50
YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3Vw
IHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4u
CiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlv
bnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqVG9wX3JlYWRMTWVt
X3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIFRvcF9yZWFkTE1lbV9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dy
b3VwX2dldF9tYXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX3Jl
YWRMTWVtX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5V
TEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2so
YWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7Cglt
YXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJ
bWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVm
IEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3Jl
YWRMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2Vz
IHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBv
ZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBh
cnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0
IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBUb3BfcmVhZExNZW1fcnVuX2Fy
cmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgVG9wX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBUb3BfcmVhZExNZW1fcnVuX2Fy
cmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAq
IFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0nLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRo
ZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGlt
bWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2gg
dGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hl
Y2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBv
bmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBj
YW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBk
ZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5
IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24g
c3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhf
cnVuX3QgKlRvcF9yZWFkTE1lbV9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVu
Z2FycmF5LCBUb3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7Cglt
YXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSwg
MCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJheV9pbml0
KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSByZXR1cm4g
TlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJheS0+c2l6
ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXkt
PnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX3JlYWRMTWVtX2Nv
bnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5V
TEwpOwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ld
ID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9Cglt
YXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5
KTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9u
c19mcmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJ
ZnJlZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0
cyBhIHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZh
Y2UgbWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVy
bmFsIHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRp
YyBpbnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNl
LgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmlj
IGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25z
IHRvIHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogVG9w
X3JlYWRMTWVtX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgVG9wX3JlYWRMTWVtX2FjdGlv
bnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBUb3BfcmVhZExNZW1fY29udmVydF9p
bnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1
bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgoKCi8qLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSB3cml0ZUxN
ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSov
CgoKI2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3Jz
KSkgeyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFj
ZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNf
dHJhY2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFM
VUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmlu
dGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9y
ZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJu
IFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX3N0cmVhbSB7
Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAgc2l6
ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX3N0cmVhbV90
OwoKdHlwZWRlZiBzdHJ1Y3QgVG9wX3dyaXRlTE1lbV9jYWxsYmFja19kYXRhIHsKCVRvcF93cml0
ZUxNZW1fY2FsbGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzJdOyAKCWludCBjb3VudDsKCWludCBtYXhf
Y291bnQ7Cn0gVG9wX3dyaXRlTE1lbV9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBUb3Bf
d3JpdGVMTWVtX2NhbGxiYWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCVRvcF93cml0ZUxN
ZW1fY2FsbGJhY2tfZGF0YV90ICpkYXRhID0gKFRvcF93cml0ZUxNZW1fY2FsbGJhY2tfZGF0YV90
KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJ
CVRvcF93cml0ZUxNZW1fY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJ
CWlmIChzLT5pc19vdXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9w
dHIsIHMtPmFsaWduZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7
Cgl9CglmcmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogVG9wX3dyaXRlTE1lbV9j
b252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCVRvcF93cml0ZUxNZW1fYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQg
KCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9h
Y3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYo
YWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190
cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVG9wX3dyaXRlTE1lbV9j
YWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxsYmFjayA9IChjYWxs
YmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwpOwoJaWYgKHVzZV9j
YWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKFRvcF93cml0ZUxNZW1fY2FsbGJh
Y2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJCQlmcHJpbnRmKHN0ZGVyciwg
IlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBjYWxsYmFjayBkYXRhIGluIGZ1
bmN0aW9uIFRvcF93cml0ZUxNZW1fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxM
OwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7
CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAm
VG9wX3dyaXRlTE1lbV9jYWxsYmFja19pbnRlcm5hbDsKCX0KCgl1aW50MzJfdCBwYXJhbV9zaXpl
ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX3NpemU7CgkKCXVpbnQzMl90IHBhcmFtX3N0YXJ0
ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX3N0YXJ0OwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAiVG9wS2VybmVsIiwgInJ1bl9jeWNsZV9jb3VudCIgKTsKCUNIRUNLX0VSUk9SUzsK
CQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJhcmdpbjU0OSIgKTsK
CUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlRvcEtlcm5lbCIs
ICJhcmdvdXQ1NTAiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlv
bnMsICJUb3BLZXJuZWwiLCAiY3ljbGVzIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgkvKiBjb2RlIGZv
ciBzY2FsYXIgVG9wS2VybmVsLmVuICovCgl1aW50NjRfdCBpbnNjYWxhcl9Ub3BLZXJuZWxfZW4g
PSAwOwoJbWF4X3NldF91aW50NjR0KGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiZW4iLCBpbnNjYWxh
cl9Ub3BLZXJuZWxfZW4pOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxh
ciBUb3BLZXJuZWwuZW4qLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gZnJvbWNwdSAqLwoJc2l6ZV90
IGluc3RyZWFtX3NpemVfZnJvbWNwdSA9IHBhcmFtX3NpemU7CglpZiAoaW5zdHJlYW1fc2l6ZV9m
cm9tY3B1ID4gMCkgewoJCWNvbnN0IHVpbnQ4X3QgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0
aW9ucy0+aW5zdHJlYW1fZnJvbWNwdTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFRvcF9j
aGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9mcm9tY3B1KSkpIHsKCQkJ
dWludDhfdCAqYWxpZ25lZF9pbnN0cmVhbV9mcm9tY3B1ID0gbWFsbG9jKGluc3RyZWFtX3NpemVf
ZnJvbWNwdSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2Zyb21jcHUgPT0gTlVMTCkgewoJCQkJ
bWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9f
LCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnZnJv
bWNwdSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9k
YXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMt
Pmluc3RyZWFtX2Zyb21jcHU7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2Zyb21jcHU7CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1f
c2l6ZV9mcm9tY3B1OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2lu
c3RyZWFtX2Zyb21jcHUsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9mcm9tY3B1LCBpbnN0
cmVhbV9zaXplX2Zyb21jcHUpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9mcm9t
Y3B1OwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImZyb21jcHUiLCBzdHJlYW1fcHRy
LCBpbnN0cmVhbV9zaXplX2Zyb21jcHUpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBj
b2RlIGZvciBzdHJlYW0gZnJvbWNwdSAqLwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAi
dG9jcHUiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAiZnJv
bWxtZW0iICk7CglDSEVDS19FUlJPUlM7CgkKCS8qIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3Ry
ZWFtICJ0b2xtZW0iICovCglzaXplX3QgbG1lbV9hZGRyZXNzX3RvbG1lbSA9IHBhcmFtX3N0YXJ0
OwoJc2l6ZV90IGxtZW1fYXJyX3NpemVfdG9sbWVtID0gcGFyYW1fc2l6ZTsKCWludCBsbWVtX2J1
cnN0X3NpemVfdG9sbWVtID0gbWF4X2dldF9idXJzdF9zaXplKG1heGZpbGUsIE5VTEwpOwoJaWYg
KCAobG1lbV9hZGRyZXNzX3RvbG1lbSAlIGxtZW1fYnVyc3Rfc2l6ZV90b2xtZW0pICE9IDAgKSB7
CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSB0b2xtZW0gcGFy
YW1ldGVyICdsbWVtX2FkZHJlc3NfdG9sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0
IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9h
ZGRyZXNzX3RvbG1lbSwgbG1lbV9idXJzdF9zaXplX3RvbG1lbSApOwoJfQoJaWYgKCAobG1lbV9h
cnJfc2l6ZV90b2xtZW0gJSBsbWVtX2J1cnN0X3NpemVfdG9sbWVtKSAhPSAwICkgewoJCWZwcmlu
dGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gdG9sbWVtIHBhcmFtZXRlciAn
bG1lbV9hcnJfc2l6ZV90b2xtZW0nIGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBt
dWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2Fycl9zaXpl
X3RvbG1lbSwgbG1lbV9idXJzdF9zaXplX3RvbG1lbSApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVf
dG9sbWVtID4gMCkgewoJCW1heF9sbWVtX2xpbmVhcihhY3Rpb25zLCAidG9sbWVtIiwgbG1lbV9h
ZGRyZXNzX3RvbG1lbSwgbG1lbV9hcnJfc2l6ZV90b2xtZW0pOwoJfSBlbHNlIHsKCQltYXhfaWdu
b3JlX2xtZW0oYWN0aW9ucywgInRvbG1lbSIpOwoJfQoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9m
IGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJ0b2xtZW0iICovCgkKCWlmICh1c2VfY2Fs
bGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsK
CQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rp
b25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgVG9wX3dyaXRlTE1lbSgKCXVpbnQzMl90
IHBhcmFtX3NpemUsCgl1aW50MzJfdCBwYXJhbV9zdGFydCwKCWNvbnN0IHVpbnQ4X3QgKmluc3Ry
ZWFtX2Zyb21jcHUpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlz
ZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4Zmls
ZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IFRvcF93cml0ZUxNZW1fbm9u
YmxvY2socGFyYW1fc2l6ZSwgcGFyYW1fc3RhcnQsIGluc3RyZWFtX2Zyb21jcHUpOwoJQ0hFQ0tf
TlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoK
bWF4X3J1bl90ICpUb3Bfd3JpdGVMTWVtX25vbmJsb2NrKAoJdWludDMyX3QgcGFyYW1fc2l6ZSwK
CXVpbnQzMl90IHBhcmFtX3N0YXJ0LAoJY29uc3QgdWludDhfdCAqaW5zdHJlYW1fZnJvbWNwdSkK
ewoJVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZhY2Vf
YWN0aW9ucy5wYXJhbV9zaXplID0gcGFyYW1fc2l6ZTsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFt
X3N0YXJ0ID0gcGFyYW1fc3RhcnQ7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9mcm9tY3B1
ID0gaW5zdHJlYW1fZnJvbWNwdTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5p
dGlhbGlzZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAi
TWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9
IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFj
dGlvbnMgPSBUb3Bfd3JpdGVMTWVtX2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZp
bnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0
aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0
aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qo
c3RvcmVkX2VuZ2luZSwgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5V
TEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJ
fSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwg
YWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJ
bWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgVG9wX3dyaXRl
TE1lbV9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVRvcF93cml0ZUxNZW1fYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBUb3Bfd3JpdGVMTWVtX3J1
bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAi
VW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAq
VG9wX3dyaXRlTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVRvcF93
cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4
ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMp
KHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBUb3Bfd3JpdGVMTWVtX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwg
aW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19FUlJPUlNf
U1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwp
IHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJ
CXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMs
IGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBO
VUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAq
IFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJm
YWNlICd3cml0ZUxNZW0nLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgog
KiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAq
IFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3Jv
dXAuCiAqLwp2b2lkIFRvcF93cml0ZUxNZW1fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwg
VG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3Qg
KnJ1biA9IFRvcF93cml0ZUxNZW1fcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2Vf
YWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7Cglt
YXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGlj
IG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnd3JpdGVMTWVtJy4KICog
CiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2
YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1
cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRo
YXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1
bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1
bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBH
cm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8g
cnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBh
Y3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKlRvcF93cml0
ZUxNZW1fcnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgVG9wX3dyaXRlTE1l
bV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0g
bWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0g
VG9wX3dyaXRlTE1lbV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25z
LCAxLCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZigh
bWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlv
bnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rp
b25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAq
IFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJm
YWNlICd3cml0ZUxNZW0nLgogKiAKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9m
IGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhl
IGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMg
b24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25z
CiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqLwp2b2lkIFRvcF93cml0ZUxN
ZW1fcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgVG9wX3dyaXRlTE1lbV9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3dyaXRl
TE1lbV9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5n
IGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICd3cml0ZUxNZW0nLgogKiAKICoKICogU2NoZWR1
bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBh
bmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25z
IG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1
biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAq
IG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lh
dGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRo
ZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlv
bnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRo
ZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJy
b3IuCiAqLwptYXhfcnVuX3QgKlRvcF93cml0ZUxNZW1fcnVuX2FycmF5X25vbmJsb2NrKG1heF9l
bmdhcnJheV90ICplbmdhcnJheSwgVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9m
aWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4
X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09
IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9j
KGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7
IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBU
b3Bfd3JpdGVMTWVtX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNb
aV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJ
CWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwg
YWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5n
YXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsr
ICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2Zy
ZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAq
IFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEg
ZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0
aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlv
bnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhl
IG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50
ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWlu
dGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4
X2FjdGlvbnNfdCogVG9wX3dyaXRlTE1lbV9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIFRv
cF93cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIFRvcF93
cml0ZUxNZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwg
TlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwK
CgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLSovCgoKI2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYo
IW1heF9vayhTVC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xu
IiwgbWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2Fu
ZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVm
aW5lIENIRUNLX05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBp
ZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRf
T05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09
IE5VTEwpID8gIiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJv
cihNRVNTQUdFKTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBUb3BfY2FsbGJhY2tf
c3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXpl
X3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IFRvcF9jYWxsYmFja19zdHJlYW1fdDsK
CnR5cGVkZWYgc3RydWN0IFRvcF9jYWxsYmFja19kYXRhIHsKCVRvcF9jYWxsYmFja19zdHJlYW1f
dCBzdHJlYW1bMl07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBUb3BfY2FsbGJhY2tf
ZGF0YV90OwoKc3RhdGljIHZvaWQgVG9wX2NhbGxiYWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEp
CnsKCVRvcF9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoVG9wX2NhbGxiYWNrX2RhdGFfdCopIGNi
X2RhdGE7Cglmb3IgKGludCBpID0gMCA7IGkgPCBkYXRhLT5jb3VudCA7IGkrKyApIHsKCQlUb3Bf
Y2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRw
dXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRf
cHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEp
Owp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogVG9wX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmls
ZV90ICptYXhmaWxlLAoJVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMsCglpbnQgIGlz
X2ludGVybmFsX2NhbGwsCgl2b2lkICgqKmNhbGxiYWNrX2Z1bmMpKHZvaWQqKSwKCXZvaWQgKipj
YWxsYmFja19kYXRhKQp7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gbWF4X2FjdGlvbnNfaW5p
dChtYXhmaWxlLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgojZGVm
aW5lIENIRUNLX0VSUk9SUyBpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHsgc2V0X2Vycm9y
X2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoYWN0aW9ucy0+ZXJyb3JzKSk7IHJldHVybiBOVUxM
OyB9IAoKCVRvcF9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxs
YmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwp
OwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKFRvcF9jYWxs
YmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJy
LCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4g
ZnVuY3Rpb24gVG9wX2NvbnZlcnRfaW50ZXJuYWxcbiIpOwoJCQlyZXR1cm4gTlVMTDsKCQl9CgkJ
Y2JfZGF0YS0+bWF4X2NvdW50ID0gMjsKCQljYl9kYXRhLT5jb3VudCAgICAgPSAwOwoJCSpjYWxs
YmFja19kYXRhICAgICA9IGNiX2RhdGE7CgkJKmNhbGxiYWNrX2Z1bmMgICAgID0gJlRvcF9jYWxs
YmFja19pbnRlcm5hbDsKCX0KCglpbnQzMl90IHBhcmFtX2FyZ2luNTQ5ID0gaW50ZXJmYWNlX2Fj
dGlvbnMtPnBhcmFtX2FyZ2luNTQ5OwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLnJ1
bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfVG9wS2VybmVsID0gOTIyMzM3MjAzNjg1
NDc3NTgwNzsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIlRvcEtlcm5lbCIsIDkyMjMzNzIwMzY4
NTQ3NzU4MDcpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUb3BL
ZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5h
cmdpbjU0OSAqLwoJdWludDY0X3QgaW5zY2FsYXJfVG9wS2VybmVsX2FyZ2luNTQ5ID0gcGFyYW1f
YXJnaW41NDk7CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJhcmdpbjU0
OSIsIGluc2NhbGFyX1RvcEtlcm5lbF9hcmdpbjU0OSk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQg
b2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5hcmdpbjU0OSovCgkKCS8qIGNvZGUgZm9yIHNj
YWxhciBUb3BLZXJuZWwuYXJnb3V0NTUwICovCgl1aW50NjRfdCAqb3V0c2NhbGFyX1RvcEtlcm5l
bF9hcmdvdXQ1NTAgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c2NhbGFyX1RvcEtlcm5lbF9hcmdv
dXQ1NTA7CgltYXhfZ2V0X3VpbnQ2NHQoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJhcmdvdXQ1NTAi
LCBvdXRzY2FsYXJfVG9wS2VybmVsX2FyZ291dDU1MCk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQg
b2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5hcmdvdXQ1NTAqLwoJCgkvKiBjb2RlIGZvciBz
Y2FsYXIgVG9wS2VybmVsLmN5Y2xlcyAqLwoJdWludDY0X3QgKm91dHNjYWxhcl9Ub3BLZXJuZWxf
Y3ljbGVzID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHNjYWxhcl9Ub3BLZXJuZWxfY3ljbGVzOwoJ
bWF4X2dldF91aW50NjR0KGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiY3ljbGVzIiwgb3V0c2NhbGFy
X1RvcEtlcm5lbF9jeWNsZXMpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNj
YWxhciBUb3BLZXJuZWwuY3ljbGVzKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5l
biAqLwoJdWludDY0X3QgaW5zY2FsYXJfVG9wS2VybmVsX2VuID0gMTsKCW1heF9zZXRfdWludDY0
dChhY3Rpb25zLCAiVG9wS2VybmVsIiwgImVuIiwgaW5zY2FsYXJfVG9wS2VybmVsX2VuKTsKCUNI
RUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLmVuKi8KCQoJ
bWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImZyb21jcHUiICk7CglDSEVDS19FUlJPUlM7CgkK
CW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJ0b2NwdSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJ
LyogY29kZSBmb3IgbWVtb3J5LXN0cmVhbSAiaW50clN0cmVhbSIgKi8KCW1heF9sbWVtX3NldF9p
bnRlcnJ1cHRfb24oYWN0aW9ucywgImludHJTdHJlYW0iKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVu
ZCBvZiBjb2RlIGZvciBtZW1vcnktc3RyZWFtICJpbnRyU3RyZWFtIiAqLwoJCgltYXhfaWdub3Jl
X2xtZW0oYWN0aW9ucywgImZyb21sbWVtIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3Jl
X2xtZW0oYWN0aW9ucywgInRvbG1lbSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJaWYgKHVzZV9jYWxs
YmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJ
CSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlv
bnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBUb3AoCglpbnQzMl90IHBhcmFtX2FyZ2lu
NTQ5LAoJdWludDY0X3QgKm91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0NTUwLAoJdWludDY0X3Qg
Km91dHNjYWxhcl9Ub3BLZXJuZWxfY3ljbGVzKQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGlj
X2JzX2lzX2luaXRpYWxpc2VkLCBUb3Bfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRf
bWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBU
b3Bfbm9uYmxvY2socGFyYW1fYXJnaW41NDksIG91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0NTUw
LCBvdXRzY2FsYXJfVG9wS2VybmVsX2N5Y2xlcyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlRvcF9ub25i
bG9jaygKCWludDMyX3QgcGFyYW1fYXJnaW41NDksCgl1aW50NjRfdCAqb3V0c2NhbGFyX1RvcEtl
cm5lbF9hcmdvdXQ1NTAsCgl1aW50NjRfdCAqb3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNsZXMpCnsK
CVRvcF9hY3Rpb25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJh
bV9hcmdpbjU0OSA9IHBhcmFtX2FyZ2luNTQ5OwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c2NhbGFy
X1RvcEtlcm5lbF9hcmdvdXQ1NTAgPSBvdXRzY2FsYXJfVG9wS2VybmVsX2FyZ291dDU1MDsKCWlu
dGVyZmFjZV9hY3Rpb25zLm91dHNjYWxhcl9Ub3BLZXJuZWxfY3ljbGVzID0gb3V0c2NhbGFyX1Rv
cEtlcm5lbF9jeWNsZXM7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxp
c2VkLCBUb3Bfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZp
bGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxM
OwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25z
ID0gVG9wX2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9u
cywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0
byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19F
UlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwg
TlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBt
YXhfcnVuX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4g
PSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVu
YywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
IE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJl
ZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgVG9wX3J1bigKCW1heF9lbmdpbmVfdCAq
ZW5naW5lLAoJVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAq
cnVuID0gVG9wX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNL
X05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0K
Cm1heF9ydW5fdCAqVG9wX3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJVG9w
X2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBt
YXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikg
PSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICph
Y3Rpb25zID0gVG9wX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMs
IDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7
CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVu
X25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25z
X2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4g
YWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICog
CiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGlu
dGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24g
dGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBUb3BfcnVu
X2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnMpCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50
ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMi
LCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2Vk
IHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQn
LgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZp
Y2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUg
c3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5v
dGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tp
bmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2Nr
IGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdy
b3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9u
cyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2Yg
dGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqVG9w
X3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIFRvcF9hY3Rpb25zX3QgKmlu
dGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9t
YXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX2NvbnZlcnRfaW50
ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
cmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1h
eF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShh
Y3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNl
ZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBh
cmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0g
W2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgog
KgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBU
aGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2Yg
ZW5nYXJyYXkuCiAqLwp2b2lkIFRvcF9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5
LCBUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9
IFRvcF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5n
IGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxl
IHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5k
IHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4g
Y2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBu
b3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRl
ZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUg
YXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25z
IFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUg
ZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9y
LgogKi8KbWF4X3J1bl90ICpUb3BfcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICpl
bmdhcnJheSwgVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50
IGk7CgltYXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxl
LCBlbmdhcnJheS0+c2l6ZSk7CglpZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7Cglt
YXhfYWN0aW9uc190ICoqYXJyX2FjdGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXpl
b2YobWF4X2FjdGlvbnNfdCopKTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBp
KysgKSB7CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF9jb252ZXJ0X2ludGVybmFsKG1h
eGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4
X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBt
YXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7
IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9u
c1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMp
OwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJm
YWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qg
c3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0
aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgog
KiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0g
aW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4K
ICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwg
aW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3QqIFRvcF9jb252ZXJ0KG1heF9maWxl
X3QgKm1heGZpbGUsIFRvcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4g
VG9wX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEws
IE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(TopKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 191, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 182, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 153, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 195, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 184, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 186, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 187, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 167, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 188, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 189, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 171, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 190, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 185, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 87, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 88, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 180, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 103, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 104, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 115, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02142bb88b1dd3e823b70354e015ca0bea31b8eee3130214257867067a5155bf05694a8a66bc140d412c6176")
#endif

