/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);









/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint4 = ConstFixPt(0,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$Signed,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B32,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint0 = ConstFixPt(96,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$Signed,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B32,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint8 = ConstFixPt(1,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$Signed,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B32,SimpleReduce$@5cb2dd2c.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argin469 = Reflect(Argin_new(Sym(4)),Summary(mutable),List())
// Dep: Bit27 = ConstBit(true)
DFEVar Bit27 = constant.var( true );
// Dep: argout470 = Reflect(Argout_new(Sym(4)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void487_en = top_en;
top_done <== void487_done;
// Hwblock: childrenOf(void487) = List(Sym(481), Sym(485))
/* void487_SeqSM void487 { */
SMIO void487_sm = addStateMachine("void487_sm", new void487_SeqSM(this));
    void487_sm.connectInput("sm_en", void487_en);
    void487_done <== stream.offset(void487_sm.getOutput("sm_done"),-1);
void487_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void487_rst_en = void487_sm.getOutput("rst_en");
void487_sm.connectInput("s0_done", pipe481_done);
pipe481_en <== void487_sm.getOutput("s0_en");
void487_sm.connectInput("s1_done", void485_done);
void485_en <== void487_sm.getOutput("s1_en");
DFEVar void487_datapath_en = void487_en & ~void487_rst_en;
DFEVar void487_ctr_en = void487_datapath_en;
/* } void487_SeqSM void487 */
/* ParPipeReduce pipe481 = ParPipeReduce(CounterChain474, reg472) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe481 controller { */
/* PipeSM pipe481 { */
OffsetExpr pipe481_offset = stream.makeOffsetAutoLoop("pipe481_offset");
SMIO pipe481_sm = addStateMachine("pipe481_sm", new PipeSM(this, 1));
    pipe481_sm.connectInput("sm_en", pipe481_en);
    pipe481_done <== stream.offset(pipe481_sm.getOutput("sm_done"),-1-pipe481_offset);
DFEVar pipe481_rst_en = pipe481_sm.getOutput("rst_en");
pipe481_sm.connectInput("rst_done", pipe481_rst_done);
pipe481_rst_done <== stream.offset(pipe481_rst_en, -pipe481_offset-1);
pipe481_sm.connectInput("sm_maxIn_0", const96_FixedPoint0);
DFEVar Counter473_max_0 = pipe481_sm.getOutput("ctr_maxOut_0");
pipe481_sm.connectInput("ctr_done", CounterChain474_done);
DFEVar pipe481_datapath_en = pipe481_sm.getOutput("ctr_en");
DFEVar pipe481_loopLengthVal = pipe481_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe481_redLoopChain = control.count.makeCounterChain(pipe481_datapath_en);
DFEVar pipe481_redLoopCtr = pipe481_redLoopChain.addCounter(pipe481_loopLengthVal, 1);
DFEVar pipe481_redLoop_done = stream.offset(pipe481_redLoopChain.getCounterWrap(pipe481_redLoopCtr), -1);
DFEVar pipe481_ctr_en = pipe481_datapath_en & pipe481_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain474_en = pipe481_datapath_en & pipe481_redLoop_done;
DFEVar[] CounterChain474_max = {const96_FixedPoint0};
int[] CounterChain474_strides = {1};
OffsetExpr CounterChain474_offset = stream.makeOffsetAutoLoop("CounterChain474_offset");
SMIO CounterChain474 = addStateMachine("CounterChain474_sm", new CounterChain474_CtrSM(owner, CounterChain474_strides)); // gap = 0
CounterChain474.connectInput("en", CounterChain474_en);
CounterChain474.connectInput("reset", pipe481_done);
DFEVar CounterChain474_maxed = CounterChain474.getOutput("saturated");
CounterChain474_done <== stream.offset(CounterChain474.getOutput("done"), -1);
OffsetExpr CounterChain474_additionalOffset = new OffsetExpr();
CounterChain474.connectInput("max0", CounterChain474_max[0]);
DFEVar Counter473 = CounterChain474.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe481 */
/* } pipe481 controller */
/* ParPipeReduce pipe481 par loop { */
DFEVar FixedPoint398 = Counter473;
/* } pipe481 par loop */
DFEVar FixedPoint478 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe481 func block { */
// FixedPoint476 is just a register read
// FixedPoint477 already emitted in pipe481;
// FixedPoint478 already emitted in pipe481;
/* Reg_write { */
// Write to accumulator register
DFEVar reg472_en = pipe481_datapath_en & pipe481_redLoop_done;
Accumulator.Params reg472_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe481_done /*because _rst_en goes hi on each iter*/).withEnable(reg472_en);
DFEVar reg472 = Reductions.accumulator.makeAccumulator(FixedPoint478, reg472_accParams);
reg472_1_lib.write(reg472, pipe481_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@3fecfb6, numDuplicates = 2 */
/* } pipe481 func block */
new pipe481_reduce_kernel(owner   , FixedPoint478 , FixedPoint398,FixedPoint475); // Reduce kernel
}
/* } ParPipeReduce pipe481 */
DFEVar FixedPoint482 = reg472_1; // reg read
// Unit pipe writtenIn(void485) = List(Sym(470))
//   argout470 = Reflect(Argout_new(Sym(4)),Summary(mutable),List()), isAccum(argout470) = false
/* PipeSM void485 { */
OffsetExpr void485_offset = stream.makeOffsetAutoLoop("void485_offset");
SMIO void485_sm = addStateMachine("void485_sm", new PipeSM(this, 1));
    void485_sm.connectInput("sm_en", void485_en);
    void485_done <== stream.offset(void485_sm.getOutput("sm_done"),-1-void485_offset);
DFEVar void485_rst_en = void485_sm.getOutput("rst_en");
void485_sm.connectInput("rst_done", void485_rst_done);
void485_rst_done <== stream.offset(void485_rst_en, -void485_offset-1);
void485_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void485_sm.connectInput("ctr_done", stream.offset(void485_sm.getOutput("ctr_en"), -1));
DFEVar void485_datapath_en = void485_en & ~void485_rst_en;
DFEVar void485_ctr_en = void485_datapath_en;
/* } PipeSM void485 */
/* Block void485 Unitpipe { */
{
/* Reg_write { */
io.scalarOutput("argout470", FixedPoint482, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@4bbfc699, numDuplicates = 1 */
}
/* } Block void485 Unitpipe */













// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
