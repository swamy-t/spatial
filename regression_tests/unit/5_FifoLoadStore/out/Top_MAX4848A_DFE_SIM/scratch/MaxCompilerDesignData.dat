#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          41970
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2014-05-20"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Top"
#define MAXFILE_BUILD_DIR  "/local/ssd/home/mattfel/transform_regression_tests_21-24/hyperdsl/spatial/regression_tests/unit/5_FifoLoadStore/out/./Top_MAX4848A_DFE_SIM"
#define MAXFILE_BUILD_DATE  20161009
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(CONTAINS_PRINTF, 1)
PARAM(MemCtrlPro_TotalNumStreams, 5)
PARAM(MemCtrlPro_NumRdStreams, 2)
PARAM(MemCtrlPro_NumWrStreams, 3)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 432)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_Parity_Mode, 1)
PARAM(MemCtrlPro_ECC_Mode, 1)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 72)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 3)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 103)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "TopKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, DFEMODEL, MAX4848A)
ENGINE_PARAMETERS(maxFileName, STRING, "Top")
ENGINE_PARAMETERS(target, ENUM, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, BOOL, false)
ENGINE_PARAMETERS(MPPRStartCT, INT, 1)
ENGINE_PARAMETERS(MPPREndCT, INT, 1)
ENGINE_PARAMETERS(MPPRThreads, INT, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, INT, 0)
#endif






#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, pipe1091_offset, 0)
STREAM_OFFSET_AUTO_LOOP_VAR(TopKernel, CounterChain1088_offset, 0)
#endif


#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(TopKernel, Kernel)
MANAGER_NODE(fromcpu, PCIe_From_Host)
MANAGER_NODE(tocpu, PCIe_To_Host)
MANAGER_NODE(addrgen_cmd_fromlmem, AddrGen)
MANAGER_NODE(cmd_fromlmem_0, Memory_Cmd)
MANAGER_NODE(fromlmem, From_Memory)
MANAGER_NODE(addrgen_cmd_tolmem, AddrGen)
MANAGER_NODE(cmd_tolmem_0, Memory_Cmd)
MANAGER_NODE(tolmem, To_Memory)
MANAGER_NODE(cmd_intrStream, Memory_Cmd)
MANAGER_NODE(intrStream, To_Memory)
MANAGER_NODE(cmd_DRAM1037_void1079_in, Memory_Cmd)
MANAGER_NODE(DRAM1037_void1079_in, From_Memory)
MANAGER_NODE(cmd_DRAM1038_void1082_out, Memory_Cmd)
MANAGER_NODE(DRAM1038_void1082_out, To_Memory)
MANAGER_NODE(Stream_16, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_28, DualAspectMux)
MANAGER_NODE(Stream_33, DualAspectReg)
MANAGER_NODE(Stream_21, DualAspectReg)
MANAGER_NODE(Stream_38, StreamPullPushAdapter)
MANAGER_NODE(Stream_50, StreamPullPushAdapter)
MANAGER_NODE(Stream_54, StreamPullPushAdapter)
MANAGER_NODE(Stream_36, Fifo)
MANAGER_NODE(Stream_42, Fifo)
MANAGER_NODE(Stream_46, Fifo)
MANAGER_NODE(Stream_48, Fifo)
MANAGER_NODE(Stream_52, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(TopKernel, DRAM1037_void1079_in, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(TopKernel, DRAM1037_void1079_in_cmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, DRAM1038_void1082_out_cmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, DRAM1038_void1082_out, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(TopKernel, intrCmd, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(TopKernel, intrStream, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(fromcpu, fromcpu, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(tocpu, tocpu, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_fromlmem_0, cmd_fromlmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(fromlmem, fromlmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, OUT, CCLK, 64, PUSH)
MANAGER_NODE_IO(cmd_tolmem_0, cmd_tolmem_0, IN, CCLK, 64, PUSH)
MANAGER_NODE_IO(tolmem, tolmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(cmd_intrStream, cmd_intrStream, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(intrStream, intrStream, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(cmd_DRAM1037_void1079_in, cmd_DRAM1037_void1079_in, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(DRAM1037_void1079_in, DRAM1037_void1079_in, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(cmd_DRAM1038_void1082_out, cmd_DRAM1038_void1082_out, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(DRAM1038_void1082_out, DRAM1038_void1082_out, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_16, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_28, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_28, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_33, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_33, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_21, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_21, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_38, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_38, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_50, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_50, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_54, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_54, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_36, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_36, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_42, input, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_42, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_46, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_46, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_48, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_48, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_52, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_52, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(fromcpu, fromcpu, Stream_36, input, 128)
MANAGER_STREAM(addrgen_cmd_fromlmem, addrgen_cmd_fromlmem_0, cmd_fromlmem_0, cmd_fromlmem_0, 64)
MANAGER_STREAM(fromlmem, fromlmem, Stream_4, input, 1536)
MANAGER_STREAM(addrgen_cmd_tolmem, addrgen_cmd_tolmem_0, cmd_tolmem_0, cmd_tolmem_0, 64)
MANAGER_STREAM(TopKernel, intrCmd, cmd_intrStream, cmd_intrStream, 64)
MANAGER_STREAM(TopKernel, intrStream, Stream_52, input, 32)
MANAGER_STREAM(TopKernel, DRAM1037_void1079_in_cmd, cmd_DRAM1037_void1079_in, cmd_DRAM1037_void1079_in, 64)
MANAGER_STREAM(DRAM1037_void1079_in, DRAM1037_void1079_in, Stream_28, input, 1536)
MANAGER_STREAM(TopKernel, DRAM1038_void1082_out_cmd, cmd_DRAM1038_void1082_out, cmd_DRAM1038_void1082_out, 64)
MANAGER_STREAM(TopKernel, DRAM1038_void1082_out, Stream_48, input, 32)
MANAGER_STREAM(Stream_16, output, Stream_38, input, 1536)
MANAGER_STREAM(Stream_4, output, Stream_42, input, 128)
MANAGER_STREAM(Stream_28, output, Stream_46, input, 32)
MANAGER_STREAM(Stream_33, output, Stream_50, input, 1536)
MANAGER_STREAM(Stream_21, output, Stream_54, input, 1536)
MANAGER_STREAM(Stream_38, output, tolmem, tolmem, 1536)
MANAGER_STREAM(Stream_50, output, DRAM1038_void1082_out, DRAM1038_void1082_out, 1536)
MANAGER_STREAM(Stream_54, output, intrStream, intrStream, 1536)
MANAGER_STREAM(Stream_36, output, Stream_16, input, 128)
MANAGER_STREAM(Stream_42, output, tocpu, tocpu, 128)
MANAGER_STREAM(Stream_46, output, TopKernel, DRAM1037_void1079_in, 32)
MANAGER_STREAM(Stream_48, output, Stream_33, input, 32)
MANAGER_STREAM(Stream_52, output, Stream_21, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(TopKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(fromcpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\nengine.TopManager.<init>(MaxJManager.maxj:72)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(tocpu, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1170)\nengine.TopManager.<init>(MaxJManager.maxj:73)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(cmd_fromlmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(fromlmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1206)\nengine.TopManager.<init>(MaxJManager.maxj:74)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(addrgen_cmd_tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(cmd_tolmem_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(tolmem, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1202)\nengine.TopManager.<init>(MaxJManager.maxj:75)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(cmd_intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(intrStream, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:82)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(cmd_DRAM1037_void1079_in, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1219)\nengine.TopManager.<init>(MaxJManager.maxj:89)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(DRAM1037_void1079_in, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromOnCardMemory(CustomManager.java:1219)\nengine.TopManager.<init>(MaxJManager.maxj:89)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(cmd_DRAM1038_void1082_out, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:92)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(DRAM1038_void1082_out, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToOnCardMemory(CustomManager.java:1215)\nengine.TopManager.<init>(MaxJManager.maxj:92)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_33, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_38, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_50, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_54, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_36, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_42, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_46, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_48, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
MANAGER_NODE_STACK_TRACE(Stream_52, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(TopKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(TopKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(TopKernel, TopKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(TopKernel, DRAM1037_void1079_in, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(TopKernel, DRAM1037_void1079_in_cmd, 0)
DEBUG_OUTPUT_BITS(TopKernel, DRAM1038_void1082_out_cmd, 1)
DEBUG_OUTPUT_BITS(TopKernel, DRAM1038_void1082_out, 2)
DEBUG_OUTPUT_BITS(TopKernel, intrCmd, 3)
DEBUG_OUTPUT_BITS(TopKernel, intrStream, 4)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromcpu, PCIePushSourceSyncMax4, "fromcpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_fromlmem, AddressGeneratorSync, "addrgen_cmd_fromlmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_tolmem, AddressGeneratorSync, "addrgen_cmd_tolmem", 1, MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_36, FifoPushToPullSync, "Stream_36", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, DualAspectMuxSync, "Stream_28", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, DualAspectRegSync, "Stream_16", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_42, FifoPushToPushSync, "Stream_42", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_46, FifoPushToPullSync, "Stream_46", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_38, PullToPushAdapterSync, "Stream_38")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tocpu, PCIePushSinkSyncMax3, "tocpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(TopKernel, TopKernel, "TopKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_48, FifoPushToPullSync, "Stream_48", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_52, FifoPushToPullSync, "Stream_52", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_33, DualAspectRegSync, "Stream_33", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, DualAspectRegSync, "Stream_21", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_50, PullToPushAdapterSync, "Stream_50")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_54, PullToPushAdapterSync, "Stream_54")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fromlmem, MemoryProxyPullSourceSync, "fromlmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_fromlmem_0, MemoryProxyCommandSinkSync, "cmd_fromlmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_tolmem_0, MemoryProxyCommandSinkSync, "cmd_tolmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_intrStream, MemoryProxyCommandSinkSync, "cmd_intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DRAM1037_void1079_in, MemoryProxyPullSourceSync, "DRAM1037_void1079_in")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_DRAM1037_void1079_in, MemoryProxyCommandSinkSync, "cmd_DRAM1037_void1079_in")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_DRAM1038_void1082_out, MemoryProxyCommandSinkSync, "cmd_DRAM1038_void1082_out")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(tolmem, MemoryProxyPushSinkSync, "tolmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(intrStream, MemoryProxyPushSinkSync, "intrStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DRAM1038_void1082_out, MemoryProxyPushSinkSync, "DRAM1038_void1082_out")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax4Config(8,72,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 103)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "8f066893af1c9e41e654e46574fdee7c5ae50f4632b0d2b899ca8a434f9ff969")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_stall, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_out_valid, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TopKernel, addDebugRegister, reg_dbg_stall_vector, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fromlmem, setup, "fromlmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_fromlmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_fromlmem_0, setup, "cmd_fromlmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_tolmem_0, setup, "cmd_tolmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_intrStream, setup, "cmd_intrStream", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DRAM1037_void1079_in, setup, "DRAM1037_void1079_in", MemoryControllerPro::getDefaultMemoryController(), "cmd_DRAM1037_void1079_in", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_DRAM1037_void1079_in, setup, "cmd_DRAM1037_void1079_in", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_DRAM1038_void1082_out, setup, "cmd_DRAM1038_void1082_out", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(tolmem, setup, "tolmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_tolmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(intrStream, setup, "intrStream", MemoryControllerPro::getDefaultMemoryController(), "cmd_intrStream", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DRAM1038_void1082_out, setup, "DRAM1038_void1082_out", MemoryControllerPro::getDefaultMemoryController(), "cmd_DRAM1038_void1082_out", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(fromcpu, STREAM_FROM_HOST, 0)
PCIE_STREAM(tocpu, STREAM_TO_HOST, 0)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_fromlmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_tolmem, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(fromlmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(DRAM1037_void1079_in, 1, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(tolmem, 2, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(intrStream, 3, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(DRAM1038_void1082_out, 4, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(addrgen_cmd_fromlmem._Addr_En, 0x0, 1, hwBits(1))
REG(addrgen_cmd_fromlmem._CmdSize, 0x1, 1, hwBits(8))
REG(addrgen_cmd_fromlmem._BlockSize_X, 0x2, 5, hwBits(33))
REG(addrgen_cmd_fromlmem._Wrap_X, 0x7, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Start_X_Addr, 0xb, 4, hwBits(32))
REG(addrgen_cmd_fromlmem._Offset_0, 0xf, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Addr_En, 0x13, 1, hwBits(1))
REG(addrgen_cmd_tolmem._CmdSize, 0x14, 1, hwBits(8))
REG(addrgen_cmd_tolmem._BlockSize_X, 0x15, 5, hwBits(33))
REG(addrgen_cmd_tolmem._Wrap_X, 0x1a, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Start_X_Addr, 0x1e, 4, hwBits(32))
REG(addrgen_cmd_tolmem._Offset_0, 0x22, 4, hwBits(32))
REG(TopKernel.en, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1037_void1079_in_cmd_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1037_void1079_in_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1038_void1082_out_cmd_force_disabled, 0x29, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_DRAM1038_void1082_out_force_disabled, 0x2a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_intrCmd_force_disabled, 0x2b, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.io_intrStream_force_disabled, 0x2c, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TopKernel.run_cycle_count, 0x2d, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.argout1039, 0x33, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(TopKernel.cycles, 0x37, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(TopKernel.current_run_cycle_count, 0x3f, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TopKernel.dbg_ctld_almost_empty, 0x45, 1, hwBits(1))
REG(TopKernel.dbg_ctld_done, 0x46, 1, hwBits(1))
REG(TopKernel.dbg_ctld_empty, 0x47, 1, hwBits(1))
REG(TopKernel.dbg_ctld_read, 0x48, 1, hwBits(1))
REG(TopKernel.dbg_ctld_read_pipe_dbg, 0x49, 1, hwBits(3))
REG(TopKernel.dbg_ctld_request, 0x4a, 1, hwBits(1))
REG(TopKernel.dbg_done_out, 0x4b, 1, hwBits(1))
REG(TopKernel.dbg_fill_level, 0x4c, 1, hwBits(5))
REG(TopKernel.dbg_flush_level, 0x4d, 1, hwBits(5))
REG(TopKernel.dbg_flush_start, 0x4e, 1, hwBits(1))
REG(TopKernel.dbg_flush_start_level, 0x4f, 1, hwBits(5))
REG(TopKernel.dbg_flushing, 0x50, 1, hwBits(1))
REG(TopKernel.dbg_full_level, 0x51, 1, hwBits(5))
REG(TopKernel.dbg_out_stall, 0x52, 1, hwBits(5))
REG(TopKernel.dbg_out_valid, 0x53, 1, hwBits(5))
REG(TopKernel.dbg_stall_vector, 0x54, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x55, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x56, 1, hwBits(5))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x57, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x58, 1, hwBits(8))
REG(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x59, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x5a, 4, hwBits(32))
REG(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5e, 4, hwBits(32))
REG(ifpga.ifpga_ctrl, 0x62, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x63, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(addrgen_cmd_fromlmem._Addr_En, 0x0, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._CmdSize, 0x1, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._BlockSize_X, 0x2, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Wrap_X, 0x7, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Start_X_Addr, 0xb, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_fromlmem._Offset_0, 0xf, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Addr_En, 0x13, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._CmdSize, 0x14, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._BlockSize_X, 0x15, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Wrap_X, 0x1a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Start_X_Addr, 0x1e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_tolmem._Offset_0, 0x22, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.en, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.io_DRAM1037_void1079_in_cmd_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1037_void1079_in_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1038_void1082_out_cmd_force_disabled, 0x29, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_DRAM1038_void1082_out_force_disabled, 0x2a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_intrCmd_force_disabled, 0x2b, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.io_intrStream_force_disabled, 0x2c, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TopKernel.run_cycle_count, 0x2d, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TopKernel.argout1039, 0x33, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_READ_ONLY, false)
REG_V2(TopKernel.cycles, 0x37, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.current_run_cycle_count, 0x3f, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_almost_empty, 0x45, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_done, 0x46, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_empty, 0x47, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read, 0x48, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_read_pipe_dbg, 0x49, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_ctld_request, 0x4a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_done_out, 0x4b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_fill_level, 0x4c, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_level, 0x4d, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start, 0x4e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flush_start_level, 0x4f, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_flushing, 0x50, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_full_level, 0x51, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_stall, 0x52, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_out_valid, 0x53, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(TopKernel.dbg_stall_vector, 0x54, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0x55, 1, hwBits(5), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0x56, 1, hwBits(5), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x57, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x58, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Debug_Reset, 0x59, 1, hwBits(1), HOST_WRITE_ONLY, true)
REG_V2(MemoryControllerPro.MemoryControllerPro_Corrected_Errors, 0x5a, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_UnCorrected_Errors, 0x5e, 4, hwBits(32), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x62, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x63, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("8f066893af1c9e41e654e46574fdee7c5ae50f4632b0d2b899ca8a434f9ff969")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(maia_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_fromlmem, addrgen_cmd_fromlmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_tolmem, addrgen_cmd_tolmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_intrStream, addrgen_cmd_intrStream., STREAM)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_DRAM1037_void1079_in, addrgen_cmd_DRAM1037_void1079_in., STREAM)
MANAGER_MEMCTL_CONTROL_GROUP(maia_sodimms, cmd_DRAM1038_void1082_out, addrgen_cmd_DRAM1038_void1082_out., STREAM)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_fromlmem, fromlmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_DRAM1037_void1079_in, DRAM1037_void1079_in, 0, 1, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_tolmem, tolmem, 0, 2, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_intrStream, intrStream, 0, 3, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(maia_sodimms, cmd_DRAM1038_void1082_out, DRAM1038_void1082_out, 0, 4, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Top
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Top_H
#define SLIC_DECLARATIONS_Top_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Top_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 */
void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [out] outstream_tocpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	uint8_t *outstream_tocpu; /**<  [out] The stream should be of size param_size bytes. */
} Top_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 */
void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_start Interface Parameter "start".
 * \param [in] instream_fromcpu The stream should be of size param_size bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	uint32_t param_size; /**<  [in] Interface Parameter "size". */
	uint32_t param_start; /**<  [in] Interface Parameter "start". */
	const uint8_t *instream_fromcpu; /**<  [in] The stream should be of size param_size bytes. */
} Top_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [out] outscalar_TopKernel_argout1039 Output scalar parameter "TopKernel.argout1039".
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 */
void Top(
	uint64_t *outscalar_TopKernel_argout1039,
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [out] outscalar_TopKernel_argout1039 Output scalar parameter "TopKernel.argout1039".
 * \param [out] outscalar_TopKernel_cycles Output scalar parameter "TopKernel.cycles".
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Top_nonblock(
	uint64_t *outscalar_TopKernel_argout1039,
	uint64_t *outscalar_TopKernel_cycles);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t *outscalar_TopKernel_argout1039; /**<  [out] Output scalar parameter "TopKernel.argout1039". */
	uint64_t *outscalar_TopKernel_cycles; /**<  [out] Output scalar parameter "TopKernel.cycles". */
} Top_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Top_init(void);

/* Error handling functions */
int Top_has_errors(void);
const char* Top_get_errors(void);
void Top_clear_errors(void);
/* Free statically allocated maxfile data */
void Top_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Top_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Top_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(TopKernel, 269, NodeConstantRawBits, "{HWOffsetFix:17, 0, UNSIGNED}\n0x00010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:121)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 27, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:106)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 34, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count$Params.withReset(Count.java:138)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:118)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 36, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:121)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 268, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x000f; 15.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:122)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 38, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:122)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 39, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:123)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 248, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 238, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 19, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:104)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 267, NodeConstantRawBits, "{HWOffsetFix:17, 0, UNSIGNED}\n0x00002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:100)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 91, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count$Params.withReset(Count.java:138)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:97)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 93, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:100)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 266, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:101)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 95, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:101)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 96, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:102)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 239, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 84, NodeStateMachine, "State Machine (DRAM1038_void1082_outldSM)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:85)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 85, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:87)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 240, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 81, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:130)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 79, NodeStateMachine, "State Machine (void1084_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:127)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 80, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:129)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 241, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 14, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:88)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 2, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000c0; 192.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.BaseLib.<init>(BaseLib.maxj:47)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:30)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 137, NodeStateMachine, "State Machine (CounterChain1088_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:173)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 242, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 138, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:177)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 243, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 236, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:162)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 134, NodeStateMachine, "State Machine (pipe1091_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:157)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 244, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 237, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:159)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 245, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 12, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:76)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 246, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 265, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x000000060; 96.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 142, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:383)\nengine.TopKernel.<init>(TopKernel.maxj:47)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 143, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernel.<init>(TopKernel.maxj:48)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 247, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 7, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:60)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 0, NodeInputMappedReg, "Scalar input (en)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nengine.TopKernel.<init>(TopKernel.maxj:26)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 1, NodeStateMachine, "State Machine (mainSm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernel.<init>(TopKernel.maxj:32)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 8, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:61)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 6, NodeStateMachine, "State Machine (void1095_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:58)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 11, NodeStateMachine, "State Machine (void1093_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:74)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 15, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:89)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 13, NodeStateMachine, "State Machine (void1086_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:86)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 20, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:105)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 18, NodeStateMachine, "State Machine (void1081_sm)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:102)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 26, NodeStateMachine, "State Machine (DRAM1037_void1079_inldSM)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:104)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 249, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 264, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 41, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 42, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:125)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 60, NodeInputMappedReg, "Scalar input (io_DRAM1037_void1079_in_cmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 61, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 62, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 194, NodeConstantRawBits, "{HWRawBits:1}\n0x0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 199, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 47, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:127)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 67, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 204, NodeConstantRawBits, "{HWRawBits:8}\n0x02", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 208, NodeConstantRawBits, "{HWRawBits:32}\n0x00100000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 66, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 68, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 70, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 72, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 63, NodeOutput, "Output(DRAM1037_void1079_in_cmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:132)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 250, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 263, NodeConstantRawBits, "{HWOffsetFix:16, 0, UNSIGNED}\n0x0000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 98, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 99, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:104)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 116, NodeInputMappedReg, "Scalar input (io_DRAM1038_void1082_out_cmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 117, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 118, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 209, NodeConstantRawBits, "{HWRawBits:1}\n0x0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 214, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 103, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:106)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 123, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 219, NodeConstantRawBits, "{HWRawBits:8}\n0x02", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 223, NodeConstantRawBits, "{HWRawBits:32}\n0x00200000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 122, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 124, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 126, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 128, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 119, NodeOutput, "Output(DRAM1038_void1082_out_cmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:111)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 251, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 129, NodeInputMappedReg, "Scalar input (io_DRAM1038_void1082_out_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 130, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 131, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 254, NodeFIFO, "FIFO(22)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 73, NodeInputMappedReg, "Scalar input (io_DRAM1037_void1079_in_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 74, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 75, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 253, NodeFIFO, "FIFO(16)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 76, NodeInput, "Input(DRAM1037_void1079_in)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 78, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nengine.MemoryCmdGenLib.common(MemoryCmdGen.maxj:144)\nengine.MemoryCmdGenLib.<init>(MemoryCmdGen.maxj:192)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:114)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 133, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 132, NodeOutput, "Output(DRAM1038_void1082_out)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.MemoryCmdStLib.common(MemoryCmdSt.maxj:121)\nengine.MemoryCmdStLib.<init>(MemoryCmdSt.maxj:138)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:140)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 140, NodeOutputMappedReg, "Scalar output (argout1039)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:881)\nengine.TopKernelLib.<init>(TopKernelLib.maxj:186)\nengine.TopKernel.<init>(TopKernel.maxj:42)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 259, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 262, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 145, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 146, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\nengine.TopKernel.<init>(TopKernel.maxj:51)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 162, NodeInputMappedReg, "Scalar input (io_intrCmd_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 163, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 164, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 173, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 257, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\nengine.TopManager.main(MaxJManager.maxj:160)\n")
PHOTON_NODE_DATA(TopKernel, 228, NodeConstantRawBits, "{HWRawBits:15}\n0x0001", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 230, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 169, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 232, NodeConstantRawBits, "{HWRawBits:8}\n0x01", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 233, NodeConstantRawBits, "{HWRawBits:32}\n0x00000000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 168, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 170, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 172, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 174, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 165, NodeOutput, "Output(intrCmd)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream.makeKernelOutput(LMemCommandStream.java:78)\nengine.TopKernel.<init>(TopKernel.maxj:50)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 175, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 176, NodeOutputMappedReg, "Scalar output (cycles)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarOutput(IO.java:1056)\nengine.TopKernel.<init>(TopKernel.maxj:59)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 178, NodeInputMappedReg, "Scalar input (io_intrStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 179, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 180, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 177, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000005; 5.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 181, NodeOutput, "Output(intrStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nengine.TopKernel.<init>(TopKernel.maxj:60)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 186, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 261, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 183, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 184, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 185, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 187, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 260, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 189, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 190, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 192, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 193, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
PHOTON_NODE_DATA(TopKernel, 191, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\nengine.TopManager.<init>(MaxJManager.maxj:68)\nengine.TopManager.main(MaxJManager.maxj:150)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Top_has_errors(void)
{	return stored_has_error; }
const char* Top_get_errors(void)
{	return stored_error; }
void Top_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Top_use_simulation[16];
static void Top_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Top_use_simulation, 16, "Top_%05ld_", pid);
}
static const char *Top_check_use_simulation(void)
{
	Top_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Top_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Top_simulation_launch = 0;
int Top_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Top_simulator_stop(void)
{
	const char *use_sim = Top_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Top_static_init(void) 
{
	stored_maxfile = Top_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Top_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Top_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Top_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Top_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Top_simulation_launch == 1) {
		int sim_stat = Top_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Top_simulation_launch = 0;
	}
}

static int Top_get_pcie_alignment(void)
{
#ifdef Top_PCIE_ALIGNMENT
	return ((Top_PCIE_ALIGNMENT < 1) ? 16 : Top_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Top_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Top_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Top_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Top_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_readLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_readLMem_callback_stream_t;

typedef struct Top_readLMem_callback_data {
	Top_readLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_readLMem_callback_data_t;

static void Top_readLMem_callback_internal(void *cb_data)
{
	Top_readLMem_callback_data_t *data = (Top_readLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_readLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_readLMem_convert_internal(
	max_file_t *maxfile,
	Top_readLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_readLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_readLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_readLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_readLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argout1039" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	/* code for stream tocpu */
	size_t outstream_size_tocpu = param_size;
	if (outstream_size_tocpu > 0) {
		uint8_t *stream_ptr = interface_actions->outstream_tocpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->outstream_tocpu))) {
			uint8_t *aligned_outstream_tocpu = malloc(outstream_size_tocpu);
			if (aligned_outstream_tocpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'tocpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_tocpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_tocpu;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_tocpu;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_tocpu;
		}
		max_queue_output(actions, "tocpu", stream_ptr, outstream_size_tocpu);
		CHECK_ERRORS;
	}
	/* end of code for stream tocpu */
	
	/* code for linear memory-stream "fromlmem" */
	size_t lmem_address_fromlmem = param_start;
	size_t lmem_arr_size_fromlmem = param_size;
	int lmem_burst_size_fromlmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_address_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_fromlmem, lmem_burst_size_fromlmem );
	}
	if ( (lmem_arr_size_fromlmem % lmem_burst_size_fromlmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem fromlmem parameter 'lmem_arr_size_fromlmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_fromlmem, lmem_burst_size_fromlmem );
	}
	if (lmem_arr_size_fromlmem > 0) {
		max_lmem_linear(actions, "fromlmem", lmem_address_fromlmem, lmem_arr_size_fromlmem);
	} else {
		max_ignore_lmem(actions, "fromlmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "fromlmem" */
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_readLMem(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_readLMem_nonblock(param_size, param_start, outstream_tocpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	uint8_t *outstream_tocpu)
{
	Top_readLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.outstream_tocpu = outstream_tocpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_readLMem_run(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_readLMem_run_nonblock(
	max_engine_t *engine,
	Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_readLMem_run_group(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_readLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_group_nonblock(max_group_t *group, Top_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_readLMem_run_array(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_readLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_readLMem_run_array_nonblock(max_engarray_t *engarray, Top_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_readLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_readLMem_convert(max_file_t *maxfile, Top_readLMem_actions_t *interface_actions)
{
	return Top_readLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_writeLMem_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_writeLMem_callback_stream_t;

typedef struct Top_writeLMem_callback_data {
	Top_writeLMem_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_writeLMem_callback_data_t;

static void Top_writeLMem_callback_internal(void *cb_data)
{
	Top_writeLMem_callback_data_t *data = (Top_writeLMem_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_writeLMem_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_writeLMem_convert_internal(
	max_file_t *maxfile,
	Top_writeLMem_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_writeLMem_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_writeLMem_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_writeLMem_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_writeLMem_callback_internal;
	}

	uint32_t param_size = interface_actions->param_size;
	
	uint32_t param_start = interface_actions->param_start;
	
	max_ignore_scalar(actions, "TopKernel", "run_cycle_count" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "argout1039" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "TopKernel", "cycles" );
	CHECK_ERRORS;
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 0;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	/* code for stream fromcpu */
	size_t instream_size_fromcpu = param_size;
	if (instream_size_fromcpu > 0) {
		const uint8_t *stream_ptr = interface_actions->instream_fromcpu;
		if (use_callback && (1 == Top_check_aligned(interface_actions->instream_fromcpu))) {
			uint8_t *aligned_instream_fromcpu = malloc(instream_size_fromcpu);
			if (aligned_instream_fromcpu == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'fromcpu'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_fromcpu;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_fromcpu;
			(&cb_data->stream[cb_data->count])->size        = instream_size_fromcpu;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_fromcpu, interface_actions->instream_fromcpu, instream_size_fromcpu);
			stream_ptr = aligned_instream_fromcpu;
		}
		max_queue_input(actions, "fromcpu", stream_ptr, instream_size_fromcpu);
		CHECK_ERRORS;
	}
	/* end of code for stream fromcpu */
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	/* code for linear memory-stream "tolmem" */
	size_t lmem_address_tolmem = param_start;
	size_t lmem_arr_size_tolmem = param_size;
	int lmem_burst_size_tolmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_address_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_tolmem, lmem_burst_size_tolmem );
	}
	if ( (lmem_arr_size_tolmem % lmem_burst_size_tolmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem tolmem parameter 'lmem_arr_size_tolmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_tolmem, lmem_burst_size_tolmem );
	}
	if (lmem_arr_size_tolmem > 0) {
		max_lmem_linear(actions, "tolmem", lmem_address_tolmem, lmem_arr_size_tolmem);
	} else {
		max_ignore_lmem(actions, "tolmem");
	}
	CHECK_ERRORS;
	/* end of code for linear memory-stream "tolmem" */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top_writeLMem(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_writeLMem_nonblock(param_size, param_start, instream_fromcpu);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_nonblock(
	uint32_t param_size,
	uint32_t param_start,
	const uint8_t *instream_fromcpu)
{
	Top_writeLMem_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.param_start = param_start;
	interface_actions.instream_fromcpu = instream_fromcpu;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_writeLMem_run(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_writeLMem_run_nonblock(
	max_engine_t *engine,
	Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_writeLMem_run_group(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = Top_writeLMem_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_group_nonblock(max_group_t *group, Top_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_writeLMem_run_array(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = Top_writeLMem_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_writeLMem_run_array_nonblock(max_engarray_t *engarray, Top_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_writeLMem_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_writeLMem_convert(max_file_t *maxfile, Top_writeLMem_actions_t *interface_actions)
{
	return Top_writeLMem_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Top_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Top_callback_stream_t;

typedef struct Top_callback_data {
	Top_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Top_callback_data_t;

static void Top_callback_internal(void *cb_data)
{
	Top_callback_data_t *data = (Top_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Top_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Top_convert_internal(
	max_file_t *maxfile,
	Top_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Top_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Top_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Top_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Top_callback_internal;
	}

	/* code for scalar TopKernel.run_cycle_count */
	uint64_t ticks_TopKernel = 9223372036854775807;
	max_set_ticks(actions, "TopKernel", 9223372036854775807);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.run_cycle_count*/
	
	/* code for scalar TopKernel.argout1039 */
	uint64_t *outscalar_TopKernel_argout1039 = interface_actions->outscalar_TopKernel_argout1039;
	max_get_uint64t(actions, "TopKernel", "argout1039", outscalar_TopKernel_argout1039);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.argout1039*/
	
	/* code for scalar TopKernel.cycles */
	uint64_t *outscalar_TopKernel_cycles = interface_actions->outscalar_TopKernel_cycles;
	max_get_uint64t(actions, "TopKernel", "cycles", outscalar_TopKernel_cycles);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.cycles*/
	
	/* code for scalar TopKernel.en */
	uint64_t inscalar_TopKernel_en = 1;
	max_set_uint64t(actions, "TopKernel", "en", inscalar_TopKernel_en);
	CHECK_ERRORS;
	/* end of code for scalar TopKernel.en*/
	
	max_ignore_stream(actions, "fromcpu" );
	CHECK_ERRORS;
	
	max_ignore_stream(actions, "tocpu" );
	CHECK_ERRORS;
	
	/* code for memory-stream "intrStream" */
	max_lmem_set_interrupt_on(actions, "intrStream");
	CHECK_ERRORS;
	/* end of code for memory-stream "intrStream" */
	
	max_ignore_lmem(actions, "fromlmem" );
	CHECK_ERRORS;
	
	max_ignore_lmem(actions, "tolmem" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Top(
	uint64_t *outscalar_TopKernel_argout1039,
	uint64_t *outscalar_TopKernel_cycles)
{
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Top_nonblock(outscalar_TopKernel_argout1039, outscalar_TopKernel_cycles);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_nonblock(
	uint64_t *outscalar_TopKernel_argout1039,
	uint64_t *outscalar_TopKernel_cycles)
{
	Top_actions_t interface_actions;
	interface_actions.outscalar_TopKernel_argout1039 = outscalar_TopKernel_argout1039;
	interface_actions.outscalar_TopKernel_cycles = outscalar_TopKernel_cycles;
	(void) pthread_once(&slic_bs_is_initialised, Top_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Top_run(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Top_run_nonblock(
	max_engine_t *engine,
	Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Top_run_group(max_group_t *group, Top_actions_t *interface_actions)
{
	max_run_t *run = Top_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_group_nonblock(max_group_t *group, Top_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Top_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Top_run_array(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_run_t *run = Top_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Top_run_array_nonblock(max_engarray_t *engarray, Top_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Top_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Top_convert(max_file_t *maxfile, Top_actions_t *interface_actions)
{
	return Top_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, argout1039)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM(tocpu, param_size)	
SLIC_LMEM_LINEAR(fromlmem, param_start, param_size)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(uint32_t, size, param_size)	
SLIC_PARAMETER_UINT64(uint32_t, start, param_start)	
SLIC_SCALAR_DISABLED(TopKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(TopKernel, argout1039)	
SLIC_SCALAR_DISABLED(TopKernel, cycles)	
SLIC_SCALAR_UINT64(TopKernel, en, 0)	
SLIC_STREAM(fromcpu, param_size)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR(tolmem, param_start, param_size)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(default)	
SLIC_SET_TICKS(TopKernel, 9223372036854775807)	
SLIC_SCALAR_UINT64(TopKernel, en, 1)	
SLIC_STREAM_DISABLED(fromcpu)	
SLIC_STREAM_DISABLED(tocpu)	
SLIC_LMEM_SET_INTERRUPT(intrStream)	
SLIC_LMEM_LINEAR_DISABLED(fromlmem)	
SLIC_LMEM_LINEAR_DISABLED(tolmem)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlRvcC5oIiBuYW1lPSJUb3Ai
Pjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+
PGVuZ2luZW1vZGUgbmFtZT0icmVhZExNZW0iPjxmdW5jdGlvbiBuYW1lPSJUb3BfcmVhZExNZW0i
IHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3NpemUmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9zaXplIiB0eXBl
PSJ1aW50MzJfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtzdGFy
dCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3N0YXJ0IiB0eXBlPSJ1aW50
MzJfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIHBhcmFtX3Np
emUgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX3RvY3B1IiBzaXpl
PSJwYXJhbV9zaXplIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InVpbnQ4X3QiPjxkaW1lbnNpb24g
aW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9Ii8iIHZhbHVlPSIocGFyYW1fc2l6ZSAvIDEpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9z
aXplIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjEiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2lu
ZW1vZGU+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iVG9wX3dy
aXRlTE1lbSIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7c2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3Np
emUiIHR5cGU9InVpbnQzMl90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZx
dW90O3N0YXJ0JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fc3RhcnQiIHR5
cGU9InVpbnQzMl90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUg
cGFyYW1fc2l6ZSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX2Zyb21j
cHUiIHNpemU9InBhcmFtX3NpemUiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0idWludDhfdCI+PGRp
bWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRv
ciBvcGVyYXRvcj0iLyIgdmFsdWU9IihwYXJhbV9zaXplIC8gMSkiPjx1c2VyUGFyYW0gdmFsdWU9
InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMSIvPjwvbnVtQmluYXJ5T3BlcmF0
b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
VG9wIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJh
bWV0ZXIgJnF1b3Q7VG9wS2VybmVsLmFyZ291dDEwMzkmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1
dCIgbmFtZT0ib3V0c2NhbGFyX1RvcEtlcm5lbF9hcmdvdXQxMDM5IiB0eXBlPSJ1aW50NjRfdCIv
PjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7VG9wS2VybmVsLmN5
Y2xlcyZxdW90Oy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRzY2FsYXJfVG9wS2VybmVs
X2N5Y2xlcyIgdHlwZT0idWludDY0X3QiLz48L2Z1bmN0aW9uPjwvZW5naW5lbW9kZT48L21heGZp
bGU+
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBUb3BfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFzX2Vycm9yOyB9
CmNvbnN0IGNoYXIqIFRvcF9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsg
fQp2b2lkIFRvcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3Rv
cmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBU
b3BfdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBUb3BfZGVmX3VzZV9zaW11bGF0aW9u
KHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50
ZihUb3BfdXNlX3NpbXVsYXRpb24sIDE2LCAiVG9wXyUwNWxkXyIsIHBpZCk7Cn0Kc3RhdGljIGNv
bnN0IGNoYXIgKlRvcF9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglUb3BfZGVmX3VzZV9z
aW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5n
KE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVz
ZV9zaW0gPSBUb3BfdXNlX3NpbXVsYXRpb247CgkJbWF4X2NvbmZpZ19zZXRfc3RyaW5nKE1BWF9D
T05GSUdfVVNFX1NJTVVMQVRJT04sIHVzZV9zaW0pOwoJfQoJcmV0dXJuIHVzZV9zaW07Cn0KCnN0
YXRpYyBpbnQgVG9wX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFRvcF9zaW11bGF0b3Jfc3Rh
cnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2No
ZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAx
MDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1B
WDQ4NDhBIC1TIHNpbXV0aWxzIHJlc3RhcnQiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBw
b3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwg
IiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vy
cm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBl
X2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21t
YW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQlpZiAoc3Ryc3Ry
KGJ1ZmYsICJFcnJvciIpKSB7CgkJCXNldF9lcnJvcihidWZmKTsKCQkJcmV0dmFsID0gLTE7CgkJ
fQoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIHJldHZhbDsKfQoKaW50IFRvcF9zaW11bGF0
b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVG9wX2NoZWNrX3VzZV9zaW11
bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFUSD1z
aW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1TIHNp
bXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIp
OwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBl
eGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJl
dHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7
CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJ
CS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgVG9wX3N0YXRpY19pbml0KHZvaWQpIAp7CglzdG9yZWRf
bWF4ZmlsZSA9IFRvcF9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4
X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
CWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JU
X09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBt
YXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkg
ewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3Jz
KCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRf
bWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRf
dGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFRvcF9j
aGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4Zmls
ZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IFRvcF9zaW11bGF0b3Jfc3RhcnQo
KTsKCQlpZiAoKHNpbV9zdGF0ID09IDApICYmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZp
bGUsIHVzZV9zaW0pID09IDEpKSB7CgkJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBl
bHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5n
IHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3RydWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7
CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQgJ3VzZV9zaW11bGF0aW9uPTxzaW11bGF0
b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsK
CQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhlIGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5
c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9l
bmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwgIioiKTsKCWlmICghbWF4X29rKHN0b3Jl
ZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklH
X1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
XG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5nIG5vdy5cblxuIik7CgkJCWZmbHVzaChz
dGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShz
dG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0g
Cgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7
Cn0Kdm9pZCBUb3BfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJ
bWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlm
IChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxM
KSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAo
VG9wX3NpbXVsYXRpb25fbGF1bmNoID09IDEpIHsKCQlpbnQgc2ltX3N0YXQgPSBUb3Bfc2ltdWxh
dG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJF
cnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVRvcF9zaW11bGF0aW9uX2xhdW5jaCA9
IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgVG9wX2dldF9wY2llX2FsaWdubWVudCh2b2lkKQp7CiNpZmRl
ZiBUb3BfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKFRvcF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8g
MTYgOiBUb3BfUENJRV9BTElHTk1FTlQpOwojZWxzZQoJcmV0dXJuIDE2OwojZW5kaWYKfQoKc3Rh
dGljIGludCBUb3BfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2ll
X2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9Cgpz
dGF0aWMgdm9pZCAqVG9wX21hbGxvY19hbGlnbmVkKGNvbnN0IHNpemVfdCBzaXplKQp7Cgl2b2lk
ICpwdHI7CglpbnQgYWxpZ25tZW50ID0gVG9wX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhf
bWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFj
ZSByZWFkTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tKi8KCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNU
LT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJy
b3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4
X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tf
TlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAi
IiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0Up
OyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFRvcF9yZWFkTE1lbV9jYWxsYmFja19z
dHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVf
dCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gVG9wX3JlYWRMTWVtX2NhbGxiYWNrX3N0
cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2RhdGEgewoJVG9w
X3JlYWRMTWVtX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQg
bWF4X2NvdW50Owp9IFRvcF9yZWFkTE1lbV9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBU
b3BfcmVhZExNZW1fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJVG9wX3JlYWRM
TWVtX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChUb3BfcmVhZExNZW1fY2FsbGJhY2tfZGF0YV90
KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJ
CVRvcF9yZWFkTE1lbV9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJ
aWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0
ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsK
CX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBUb3BfcmVhZExNZW1fY29u
dmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglUb3BfcmVhZExNZW1fYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoq
Y2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVG9wX3JlYWRMTWVtX2NhbGxi
YWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNr
X2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxi
YWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoVG9wX3JlYWRMTWVtX2NhbGxiYWNrX2Rh
dGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFi
bGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlv
biBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0K
CQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNh
bGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmVG9wX3Jl
YWRMTWVtX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCXVpbnQzMl90IHBhcmFtX3NpemUgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc2l6ZTsKCQoJdWludDMyX3QgcGFyYW1fc3RhcnQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fc3RhcnQ7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJUb3BLZXJuZWwiLCAicnVuX2N5Y2xlX2NvdW50IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiVG9wS2VybmVsIiwgImFyZ291dDEwMzkiICk7CglDSEVD
S19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiY3lj
bGVzIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLmVu
ICovCgl1aW50NjRfdCBpbnNjYWxhcl9Ub3BLZXJuZWxfZW4gPSAwOwoJbWF4X3NldF91aW50NjR0
KGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiZW4iLCBpbnNjYWxhcl9Ub3BLZXJuZWxfZW4pOwoJQ0hF
Q0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUb3BLZXJuZWwuZW4qLwoJCglt
YXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAiZnJvbWNwdSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJ
LyogY29kZSBmb3Igc3RyZWFtIHRvY3B1ICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfdG9jcHUg
PSBwYXJhbV9zaXplOwoJaWYgKG91dHN0cmVhbV9zaXplX3RvY3B1ID4gMCkgewoJCXVpbnQ4X3Qg
KnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3RvY3B1OwoJCWlmICh1
c2VfY2FsbGJhY2sgJiYgKDEgPT0gVG9wX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMt
Pm91dHN0cmVhbV90b2NwdSkpKSB7CgkJCXVpbnQ4X3QgKmFsaWduZWRfb3V0c3RyZWFtX3RvY3B1
ID0gbWFsbG9jKG91dHN0cmVhbV9zaXplX3RvY3B1KTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFt
X3RvY3B1ID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJv
cnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQg
bWVtb3J5IGZvciBzdHJlYW0gJ3RvY3B1JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3Qq
KSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3RvY3B1OwoJCQkoJmNiX2RhdGEtPnN0cmVh
bVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRz
dHJlYW1fdG9jcHU7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUg
ICAgICAgID0gb3V0c3RyZWFtX3NpemVfdG9jcHU7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMTsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJ
c3RyZWFtX3B0ciA9IGFsaWduZWRfb3V0c3RyZWFtX3RvY3B1OwoJCX0KCQltYXhfcXVldWVfb3V0
cHV0KGFjdGlvbnMsICJ0b2NwdSIsIHN0cmVhbV9wdHIsIG91dHN0cmVhbV9zaXplX3RvY3B1KTsK
CQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIHRvY3B1ICovCgkK
CS8qIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJmcm9tbG1lbSIgKi8KCXNpemVfdCBs
bWVtX2FkZHJlc3NfZnJvbWxtZW0gPSBwYXJhbV9zdGFydDsKCXNpemVfdCBsbWVtX2Fycl9zaXpl
X2Zyb21sbWVtID0gcGFyYW1fc2l6ZTsKCWludCBsbWVtX2J1cnN0X3NpemVfZnJvbWxtZW0gPSBt
YXhfZ2V0X2J1cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChsbWVtX2FkZHJlc3NfZnJv
bWxtZW0gJSBsbWVtX2J1cnN0X3NpemVfZnJvbWxtZW0pICE9IDAgKSB7CgkJZnByaW50ZihzdGRv
dXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBmcm9tbG1lbSBwYXJhbWV0ZXIgJ2xtZW1f
YWRkcmVzc19mcm9tbG1lbScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRp
cGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc19mcm9t
bG1lbSwgbG1lbV9idXJzdF9zaXplX2Zyb21sbWVtICk7Cgl9CglpZiAoIChsbWVtX2Fycl9zaXpl
X2Zyb21sbWVtICUgbG1lbV9idXJzdF9zaXplX2Zyb21sbWVtKSAhPSAwICkgewoJCWZwcmludGYo
c3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gZnJvbWxtZW0gcGFyYW1ldGVyICds
bWVtX2Fycl9zaXplX2Zyb21sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEg
bXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9hcnJfc2l6
ZV9mcm9tbG1lbSwgbG1lbV9idXJzdF9zaXplX2Zyb21sbWVtICk7Cgl9CglpZiAobG1lbV9hcnJf
c2l6ZV9mcm9tbG1lbSA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgImZyb21sbWVt
IiwgbG1lbV9hZGRyZXNzX2Zyb21sbWVtLCBsbWVtX2Fycl9zaXplX2Zyb21sbWVtKTsKCX0gZWxz
ZSB7CgkJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJmcm9tbG1lbSIpOwoJfQoJQ0hFQ0tfRVJS
T1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJmcm9tbG1lbSIg
Ki8KCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJ0b2xtZW0iICk7CglDSEVDS19FUlJPUlM7
CgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFj
a19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsK
CX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgVG9wX3JlYWRM
TWVtKAoJdWludDMyX3QgcGFyYW1fc2l6ZSwKCXVpbnQzMl90IHBhcmFtX3N0YXJ0LAoJdWludDhf
dCAqb3V0c3RyZWFtX3RvY3B1KQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2lu
aXRpYWxpc2VkLCBUb3Bfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwg
Ik1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBUb3BfcmVhZExN
ZW1fbm9uYmxvY2socGFyYW1fc2l6ZSwgcGFyYW1fc3RhcnQsIG91dHN0cmVhbV90b2NwdSk7CglD
SEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4p
Owp9CgptYXhfcnVuX3QgKlRvcF9yZWFkTE1lbV9ub25ibG9jaygKCXVpbnQzMl90IHBhcmFtX3Np
emUsCgl1aW50MzJfdCBwYXJhbV9zdGFydCwKCXVpbnQ4X3QgKm91dHN0cmVhbV90b2NwdSkKewoJ
VG9wX3JlYWRMTWVtX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX3NpemUgPSBwYXJhbV9zaXplOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fc3Rh
cnQgPSBwYXJhbV9zdGFydDsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV90b2NwdSA9IG91
dHN0cmVhbV90b2NwdTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlz
ZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4Zmls
ZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7
Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFj
ZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAi
VW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsK
CUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRf
ZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJ
CXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2Ug
ewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25z
LCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBh
Y3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0
aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBUb3BfcmVhZExNZW1fcnVu
KAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBUb3BfcmVhZExNZW1fcnVuX25vbmJsb2Nr
KGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8g
cnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpUb3BfcmVhZExN
ZW1fcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3BfcmVhZExNZW1fYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9l
bmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5V
TEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlv
bnMgPSBUb3BfcmVhZExNZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0
aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1h
eF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1
bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9
CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2Fj
dGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3Vw
IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3JlYWRMTWVt
Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixv
dXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlv
bnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBU
b3BfcmVhZExNZW1fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgVG9wX3JlYWRMTWVtX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3JlYWRM
TWVtX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tf
TlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoK
Ci8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVu
Y3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3JlYWRMTWVtJy4KICogCiAqCiAqIFNjaGVkdWxlIHRo
ZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3Jv
dXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3Qg
YmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25v
d2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgog
KiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3Jl
IGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxw
YXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEg
aGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGlu
IGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKlRvcF9yZWFkTE1lbV9ydW5fZ3JvdXBfbm9u
YmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBUb3BfcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2Zp
bGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF9yZWFkTE1lbV9jb252ZXJ0
X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxMKTsKCWlm
KGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4g
PSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2Zy
ZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2
YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdyZWFkTE1lbScuCiAqIAog
KiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxw
YXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBy
dW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5l
cy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6
ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgVG9wX3JlYWRMTWVtX3J1bl9hcnJheShtYXhfZW5nYXJy
YXlfdCAqZW5nYXJyYXksIFRvcF9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
W10pCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3JlYWRMTWVtX3J1bl9hcnJheV9ub25ibG9jayhl
bmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8g
cnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ3JlYWRMTWVtJy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0
aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICog
VGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVu
Z2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5
IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICpt
dXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2Vk
LgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2Uu
CiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRv
IHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUg
YWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpUb3BfcmVh
ZExNZW1fcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgVG9wX3Jl
YWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4
ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50IGk7Cglt
YXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdh
cnJheS0+c2l6ZSk7CglpZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgltYXhfYWN0
aW9uc190ICoqYXJyX2FjdGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4
X2FjdGlvbnNfdCopKTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBpKysgKSB7
CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF9yZWFkTE1lbV9jb252ZXJ0X2ludGVybmFs
KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJ
bWF4X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4g
PSBtYXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0g
MCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0
aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlv
bnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50
ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25z
X3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1
bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgog
KgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1
bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5V
TEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3QqIFRvcF9yZWFkTE1lbV9jb252
ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIFRvcF9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CglyZXR1cm4gVG9wX3JlYWRMTWVtX2NvbnZlcnRfaW50ZXJuYWwobWF4Zmls
ZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJS
T1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2Ugd3JpdGVMTWVtIC0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCiNkZWZpbmUgQ0hF
Q0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykpIHsgaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykp
OyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJv
cnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVFLCBNRVNTQUdFLCBS
RVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJ
R19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVz
XG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVkX2Vycm9yLCBNRVNT
QUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBSRVQ7IH0KCiAKdHlw
ZWRlZiBzdHJ1Y3QgVG9wX3dyaXRlTE1lbV9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNl
cl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBp
c19vdXRwdXQ7Cn0gVG9wX3dyaXRlTE1lbV9jYWxsYmFja19zdHJlYW1fdDsKCnR5cGVkZWYgc3Ry
dWN0IFRvcF93cml0ZUxNZW1fY2FsbGJhY2tfZGF0YSB7CglUb3Bfd3JpdGVMTWVtX2NhbGxiYWNr
X3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IFRvcF93
cml0ZUxNZW1fY2FsbGJhY2tfZGF0YV90OwoKc3RhdGljIHZvaWQgVG9wX3dyaXRlTE1lbV9jYWxs
YmFja19pbnRlcm5hbCh2b2lkICpjYl9kYXRhKQp7CglUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX2Rh
dGFfdCAqZGF0YSA9IChUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX2RhdGFfdCopIGNiX2RhdGE7Cglm
b3IgKGludCBpID0gMCA7IGkgPCBkYXRhLT5jb3VudCA7IGkrKyApIHsKCQlUb3Bfd3JpdGVMTWVt
X2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0
cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVk
X3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxpZ25lZF9wdHIpOwoJfQoJZnJlZShkYXRh
KTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3QqIFRvcF93cml0ZUxNZW1fY29udmVydF9pbnRlcm5h
bCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJm
YWNlX2FjdGlvbnMsCglpbnQgIGlzX2ludGVybmFsX2NhbGwsCgl2b2lkICgqKmNhbGxiYWNrX2Z1
bmMpKHZvaWQqKSwKCXZvaWQgKipjYWxsYmFja19kYXRhKQp7CgltYXhfYWN0aW9uc190ICphY3Rp
b25zID0gbWF4X2FjdGlvbnNfaW5pdChtYXhmaWxlLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVM
TCkgcmV0dXJuIE5VTEw7CgojZGVmaW5lIENIRUNLX0VSUk9SUyBpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHsgc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoYWN0aW9ucy0+
ZXJyb3JzKSk7IHJldHVybiBOVUxMOyB9IAoKCVRvcF93cml0ZUxNZW1fY2FsbGJhY2tfZGF0YV90
ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJhY2sgPSAoY2FsbGJhY2tfZnVuYyAhPSBO
VUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsKCWlmICh1c2VfY2FsbGJhY2spIHsKCQlj
Yl9kYXRhID0gbWFsbG9jKHNpemVvZihUb3Bfd3JpdGVMTWVtX2NhbGxiYWNrX2RhdGFfdCkpOwoJ
CWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxs
b2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBUb3Bfd3Jp
dGVMTWVtX2NvbnZlcnRfaW50ZXJuYWxcbiIpOwoJCQlyZXR1cm4gTlVMTDsKCQl9CgkJY2JfZGF0
YS0+bWF4X2NvdW50ID0gMjsKCQljYl9kYXRhLT5jb3VudCAgICAgPSAwOwoJCSpjYWxsYmFja19k
YXRhICAgICA9IGNiX2RhdGE7CgkJKmNhbGxiYWNrX2Z1bmMgICAgID0gJlRvcF93cml0ZUxNZW1f
Y2FsbGJhY2tfaW50ZXJuYWw7Cgl9CgoJdWludDMyX3QgcGFyYW1fc2l6ZSA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9zaXplOwoJCgl1aW50MzJfdCBwYXJhbV9zdGFydCA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9zdGFydDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlRvcEtl
cm5lbCIsICJydW5fY3ljbGVfY291bnQiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVf
c2NhbGFyKGFjdGlvbnMsICJUb3BLZXJuZWwiLCAiYXJnb3V0MTAzOSIgKTsKCUNIRUNLX0VSUk9S
UzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJjeWNsZXMiICk7
CglDSEVDS19FUlJPUlM7CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBUb3BLZXJuZWwuZW4gKi8KCXVp
bnQ2NF90IGluc2NhbGFyX1RvcEtlcm5lbF9lbiA9IDA7CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9u
cywgIlRvcEtlcm5lbCIsICJlbiIsIGluc2NhbGFyX1RvcEtlcm5lbF9lbik7CglDSEVDS19FUlJP
UlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5lbiovCgkKCS8qIGNvZGUg
Zm9yIHN0cmVhbSBmcm9tY3B1ICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9mcm9tY3B1ID0gcGFy
YW1fc2l6ZTsKCWlmIChpbnN0cmVhbV9zaXplX2Zyb21jcHUgPiAwKSB7CgkJY29uc3QgdWludDhf
dCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9mcm9tY3B1OwoJCWlm
ICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gVG9wX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlv
bnMtPmluc3RyZWFtX2Zyb21jcHUpKSkgewoJCQl1aW50OF90ICphbGlnbmVkX2luc3RyZWFtX2Zy
b21jcHUgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9mcm9tY3B1KTsKCQkJaWYgKGFsaWduZWRfaW5z
dHJlYW1fZnJvbWNwdSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9u
cy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBh
bGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdmcm9tY3B1JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJ
CQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0g
KHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fZnJvbWNwdTsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFs
aWduZWRfaW5zdHJlYW1fZnJvbWNwdTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2Zyb21jcHU7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291
bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1fZnJvbWNwdSwgaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX2Zyb21jcHUsIGluc3RyZWFtX3NpemVfZnJvbWNwdSk7CgkJCXN0cmVh
bV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX2Zyb21jcHU7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChh
Y3Rpb25zLCAiZnJvbWNwdSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfZnJvbWNwdSk7CgkJ
Q0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBmcm9tY3B1ICovCgkK
CW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJ0b2NwdSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJ
bWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJmcm9tbG1lbSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJ
LyogY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gInRvbG1lbSIgKi8KCXNpemVfdCBsbWVt
X2FkZHJlc3NfdG9sbWVtID0gcGFyYW1fc3RhcnQ7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV90b2xt
ZW0gPSBwYXJhbV9zaXplOwoJaW50IGxtZW1fYnVyc3Rfc2l6ZV90b2xtZW0gPSBtYXhfZ2V0X2J1
cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChsbWVtX2FkZHJlc3NfdG9sbWVtICUgbG1l
bV9idXJzdF9zaXplX3RvbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBF
cnJvcjogJXM6JWQgOiBMTWVtIHRvbG1lbSBwYXJhbWV0ZXIgJ2xtZW1fYWRkcmVzc190b2xtZW0n
IGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xu
IiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2FkZHJlc3NfdG9sbWVtLCBsbWVtX2J1cnN0X3Np
emVfdG9sbWVtICk7Cgl9CglpZiAoIChsbWVtX2Fycl9zaXplX3RvbG1lbSAlIGxtZW1fYnVyc3Rf
c2l6ZV90b2xtZW0pICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVz
OiVkIDogTE1lbSB0b2xtZW0gcGFyYW1ldGVyICdsbWVtX2Fycl9zaXplX3RvbG1lbScgaXMgc2V0
IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJ
TEVfXywgX19MSU5FX18sIGxtZW1fYXJyX3NpemVfdG9sbWVtLCBsbWVtX2J1cnN0X3NpemVfdG9s
bWVtICk7Cgl9CglpZiAobG1lbV9hcnJfc2l6ZV90b2xtZW0gPiAwKSB7CgkJbWF4X2xtZW1fbGlu
ZWFyKGFjdGlvbnMsICJ0b2xtZW0iLCBsbWVtX2FkZHJlc3NfdG9sbWVtLCBsbWVtX2Fycl9zaXpl
X3RvbG1lbSk7Cgl9IGVsc2UgewoJCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAidG9sbWVtIik7
Cgl9CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJl
YW0gInRvbG1lbSIgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAw
KSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlm
cmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoK
dm9pZCBUb3Bfd3JpdGVMTWVtKAoJdWludDMyX3QgcGFyYW1fc2l6ZSwKCXVpbnQzMl90IHBhcmFt
X3N0YXJ0LAoJY29uc3QgdWludDhfdCAqaW5zdHJlYW1fZnJvbWNwdSkKewoJKHZvaWQpIHB0aHJl
YWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVG9wX3N0YXRpY19pbml0KTsKCUNIRUNL
X05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9y
dW5fdCAqcnVuID0gVG9wX3dyaXRlTE1lbV9ub25ibG9jayhwYXJhbV9zaXplLCBwYXJhbV9zdGFy
dCwgaW5zdHJlYW1fZnJvbWNwdSk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0
aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlRvcF93cml0ZUxNZW1fbm9u
YmxvY2soCgl1aW50MzJfdCBwYXJhbV9zaXplLAoJdWludDMyX3QgcGFyYW1fc3RhcnQsCgljb25z
dCB1aW50OF90ICppbnN0cmVhbV9mcm9tY3B1KQp7CglUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCBp
bnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX3NpemUgPSBwYXJhbV9z
aXplOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fc3RhcnQgPSBwYXJhbV9zdGFydDsKCWludGVy
ZmFjZV9hY3Rpb25zLmluc3RyZWFtX2Zyb21jcHUgPSBpbnN0cmVhbV9mcm9tY3B1OwoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVG9wX3N0YXRpY19pbml0KTsK
CUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgTlVM
TCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAg
ICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF93cml0ZUxNZW1fY29udmVy
dF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVu
YywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rp
b25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9y
dW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxv
Y2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsK
CX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVD
S19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJ
cmV0dXJuIHJ1bjsKfQoKdm9pZCBUb3Bfd3JpdGVMTWVtX3J1bigKCW1heF9lbmdpbmVfdCAqZW5n
aW5lLAoJVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhf
cnVuX3QgKnJ1biA9IFRvcF93cml0ZUxNZW1fcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNl
X2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJ
bWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpUb3Bfd3JpdGVMTWVtX3J1bl9ub25ibG9jaygK
CW1heF9lbmdpbmVfdCAqZW5naW5lLAoJVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2Zp
bGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9k
YXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF93cml0ZUxN
ZW1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1
bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9ydW5f
dCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2so
ZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRo
X2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBz
dGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRlTE1lbScuCiAqIAogKiBccGFy
YW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2Vf
YWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJz
dCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZvaWQgVG9wX3dyaXRlTE1lbV9y
dW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gVG9wX3dyaXRlTE1lbV9ydW5fZ3Jv
dXBfbm9uYmxvY2soZ3JvdXAsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAi
VW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJy
aWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0
aGUgaW50ZXJmYWNlICd3cml0ZUxNZW0nLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMg
dG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0
dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2Vk
IHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHBy
b2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUg
OjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRp
b24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0g
aW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24g
dGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBl
cnJvci4KICovCm1heF9ydW5fdCAqVG9wX3dyaXRlTE1lbV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4
X2dyb3VwX3QgKmdyb3VwLCBUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3Vw
KTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBUb3Bfd3JpdGVMTWVtX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9y
dW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRlTE1lbScuCiAqIAogKiBccGFy
YW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAq
CiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRo
ZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBl
bmdhcnJheS4KICovCnZvaWQgVG9wX3dyaXRlTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3Qg
KmVuZ2FycmF5LCBUb3Bfd3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkK
ewoJbWF4X3J1bl90ICpydW4gPSBUb3Bfd3JpdGVMTWVtX3J1bl9hcnJheV9ub25ibG9jayhlbmdh
cnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVu
IGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVu
IGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2Ug
J3dyaXRlTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlv
bnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRo
ZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdh
cnJheS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6
Om1heF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVz
dCogYmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4K
ICoKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgog
KiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBy
dW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFj
dGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqVG9wX3dyaXRl
TE1lbV9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBUb3Bfd3Jp
dGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4
ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50IGk7Cglt
YXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdh
cnJheS0+c2l6ZSk7CglpZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgltYXhfYWN0
aW9uc190ICoqYXJyX2FjdGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4
X2FjdGlvbnNfdCopKTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBpKysgKSB7
CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFRvcF93cml0ZUxNZW1fY29udmVydF9pbnRlcm5h
bChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFj
dGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJ
CW1heF9zZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVu
ID0gbWF4X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9
IDAgOyBpIDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2Fj
dGlvbnNbaV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWlu
dGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9u
c190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBm
dW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4K
ICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBb
aW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBy
dW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBUb3Bfd3JpdGVMTWVtX2Nv
bnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgVG9wX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4gVG9wX3dyaXRlTE1lbV9jb252ZXJ0X2ludGVybmFsKG1h
eGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNL
X0VSUk9SU19TVAojdW5kZWYgQ0hFQ0tfTlVMTAoKCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8K
LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgojZGVmaW5l
IENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1h
eF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VS
Uk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJv
cnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+
ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FH
RSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIs
ICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwg
TUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9Cgog
CnR5cGVkZWYgc3RydWN0IFRvcF9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7
Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRw
dXQ7Cn0gVG9wX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgVG9wX2NhbGxiYWNr
X2RhdGEgewoJVG9wX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7Cglp
bnQgbWF4X2NvdW50Owp9IFRvcF9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBUb3BfY2Fs
bGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJVG9wX2NhbGxiYWNrX2RhdGFfdCAqZGF0
YSA9IChUb3BfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8
IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCVRvcF9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRh
LT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1l
bWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMt
PmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBU
b3BfY29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglUb3BfYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2Fs
bGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2so
YWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShh
Y3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVG9wX2NhbGxiYWNrX2RhdGFfdCAq
Y2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVM
TCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2Jf
ZGF0YSA9IG1hbGxvYyhzaXplb2YoVG9wX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRh
ID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5
IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBUb3BfY29udmVydF9pbnRlcm5h
bFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNi
X2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkq
Y2FsbGJhY2tfZnVuYyAgICAgPSAmVG9wX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCS8qIGNvZGUg
Zm9yIHNjYWxhciBUb3BLZXJuZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19U
b3BLZXJuZWwgPSA5MjIzMzcyMDM2ODU0Nzc1ODA3OwoJbWF4X3NldF90aWNrcyhhY3Rpb25zLCAi
VG9wS2VybmVsIiwgOTIyMzM3MjAzNjg1NDc3NTgwNyk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQg
b2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCgkvKiBjb2Rl
IGZvciBzY2FsYXIgVG9wS2VybmVsLmFyZ291dDEwMzkgKi8KCXVpbnQ2NF90ICpvdXRzY2FsYXJf
VG9wS2VybmVsX2FyZ291dDEwMzkgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c2NhbGFyX1RvcEtl
cm5lbF9hcmdvdXQxMDM5OwoJbWF4X2dldF91aW50NjR0KGFjdGlvbnMsICJUb3BLZXJuZWwiLCAi
YXJnb3V0MTAzOSIsIG91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0MTAzOSk7CglDSEVDS19FUlJP
UlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5hcmdvdXQxMDM5Ki8KCQoJ
LyogY29kZSBmb3Igc2NhbGFyIFRvcEtlcm5lbC5jeWNsZXMgKi8KCXVpbnQ2NF90ICpvdXRzY2Fs
YXJfVG9wS2VybmVsX2N5Y2xlcyA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzY2FsYXJfVG9wS2Vy
bmVsX2N5Y2xlczsKCW1heF9nZXRfdWludDY0dChhY3Rpb25zLCAiVG9wS2VybmVsIiwgImN5Y2xl
cyIsIG91dHNjYWxhcl9Ub3BLZXJuZWxfY3ljbGVzKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBv
ZiBjb2RlIGZvciBzY2FsYXIgVG9wS2VybmVsLmN5Y2xlcyovCgkKCS8qIGNvZGUgZm9yIHNjYWxh
ciBUb3BLZXJuZWwuZW4gKi8KCXVpbnQ2NF90IGluc2NhbGFyX1RvcEtlcm5lbF9lbiA9IDE7Cglt
YXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIlRvcEtlcm5lbCIsICJlbiIsIGluc2NhbGFyX1RvcEtl
cm5lbF9lbik7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFRvcEtl
cm5lbC5lbiovCgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJmcm9tY3B1IiApOwoJQ0hF
Q0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAidG9jcHUiICk7CglDSEVD
S19FUlJPUlM7CgkKCS8qIGNvZGUgZm9yIG1lbW9yeS1zdHJlYW0gImludHJTdHJlYW0iICovCglt
YXhfbG1lbV9zZXRfaW50ZXJydXB0X29uKGFjdGlvbnMsICJpbnRyU3RyZWFtIik7CglDSEVDS19F
UlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3IgbWVtb3J5LXN0cmVhbSAiaW50clN0cmVhbSIgKi8K
CQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJmcm9tbG1lbSIgKTsKCUNIRUNLX0VSUk9SUzsK
CQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJ0b2xtZW0iICk7CglDSEVDS19FUlJPUlM7CgkK
CWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19k
YXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0K
CXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgVG9wKAoJdWludDY0
X3QgKm91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0MTAzOSwKCXVpbnQ2NF90ICpvdXRzY2FsYXJf
VG9wS2VybmVsX2N5Y2xlcykKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0
aWFsaXNlZCwgVG9wX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJN
YXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gVG9wX25vbmJsb2Nr
KG91dHNjYWxhcl9Ub3BLZXJuZWxfYXJnb3V0MTAzOSwgb3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNs
ZXMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dh
aXQocnVuKTsKfQoKbWF4X3J1bl90ICpUb3Bfbm9uYmxvY2soCgl1aW50NjRfdCAqb3V0c2NhbGFy
X1RvcEtlcm5lbF9hcmdvdXQxMDM5LAoJdWludDY0X3QgKm91dHNjYWxhcl9Ub3BLZXJuZWxfY3lj
bGVzKQp7CglUb3BfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMub3V0c2NhbGFyX1RvcEtlcm5lbF9hcmdvdXQxMDM5ID0gb3V0c2NhbGFyX1RvcEtlcm5lbF9h
cmdvdXQxMDM5OwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c2NhbGFyX1RvcEtlcm5lbF9jeWNsZXMg
PSBvdXRzY2FsYXJfVG9wS2VybmVsX2N5Y2xlczsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIFRvcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9t
YXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMp
KHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBUb3BfY29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmlu
dGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rp
b25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rp
b25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChz
dG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVM
TCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9
IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBh
Y3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRv
IHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7Cglt
YXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBUb3BfcnVuKAoJ
bWF4X2VuZ2luZV90ICplbmdpbmUsCglUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykK
ewoJbWF4X3J1bl90ICpydW4gPSBUb3BfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4
X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpUb3BfcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90
ICplbmdpbmUsCglUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNi
X2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBUb3BfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRl
cmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9SU19TVChh
Y3Rpb25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJ
CXJ1biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVu
ID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2Jf
ZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwp
OwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJy
aWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2Ug
J2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFy
YW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0
aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAq
Lwp2b2lkIFRvcF9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBUb3BfYWN0aW9uc190ICpp
bnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBUb3BfcnVuX2dyb3VwX25vbmJs
b2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91
cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVy
ZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24g
dGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRp
YXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1h
eF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3
aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5f
Z3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICog
XHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2Vf
YWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpUb3BfcnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgVG9w
X2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBt
YXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBU
b3BfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwg
TlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rp
b25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9y
dW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhf
YWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJy
YXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVs
dCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1
c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0
aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkg
b2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRj
aCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgVG9wX3J1bl9hcnJheShtYXhfZW5nYXJy
YXlfdCAqZW5nYXJyYXksIFRvcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1h
eF9ydW5fdCAqcnVuID0gVG9wX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNl
X2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJ
bWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRp
YyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAK
ICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBv
ZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVy
ZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0
dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1h
eF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28g
dGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5d
IGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50
ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEg
aGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGlu
IGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKlRvcF9ydW5fYXJyYXlfbm9uYmxvY2sobWF4
X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBUb3BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1td
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdh
cnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJh
eV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJh
eS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0
YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVG9wX2NvbnZl
cnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwp
OwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0g
YWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhf
cnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsK
CWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19m
cmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJl
ZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBh
IHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2Ug
bWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFs
IHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBp
bnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgog
KiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFj
dGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRv
IHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogVG9wX2Nv
bnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgVG9wX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnMpCnsKCXJldHVybiBUb3BfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0
aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENI
RUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(TopKernel, 269, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 268, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 248, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 238, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 267, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 266, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 240, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 241, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 243, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 236, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 244, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 237, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 245, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 246, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 265, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 247, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 264, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 61, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 62, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 208, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 250, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 263, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 117, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 118, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 209, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 214, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 219, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 251, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 130, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 131, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 254, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 74, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 75, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 253, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 259, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 262, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 163, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 164, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 257, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 228, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 230, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 232, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 233, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 168, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 170, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 172, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 176, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 178, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 179, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 180, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TopKernel, 177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 181, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 186, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 261, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 184, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 185, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 187, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 260, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 189, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 190, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TopKernel, 191, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02144c542228049a468c630a10cbfcfa7f6e2f2fddd7021470d3acb763af64f5b2953cd04e0cd9be3f733e2d")
#endif

