/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

int DRAM1037 = 1048576;

int DRAM1038 = 2097152;








/* Emitting Hwblock dependencies { */
// Dep: const192_FixedPoint1 = ConstFixPt(192,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$Signed,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B32,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint50 = ConstFixPt(0,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$Signed,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B32,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM1037 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: DRAM1038 = Reflect(Offchip_new(Sym(1)),Summary(mutable),List())
// Dep: const1_FixedPoint66 = ConstFixPt(1,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$Signed,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B32,FifoLoadStore$@2649fe73.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argout1039 = Reflect(Argout_new(Sym(50)),Summary(mutable),List())
// Dep: Bit72 = ConstBit(true)
DFEVar Bit72 = constant.var( true );
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void1095_en = top_en;
top_done <== void1095_done;
// Hwblock: childrenOf(void1095) = List(Sym(1093))
/* void1095_SeqSM void1095 { */
SMIO void1095_sm = addStateMachine("void1095_sm", new void1095_SeqSM(this));
    void1095_sm.connectInput("sm_en", void1095_en);
    void1095_done <== stream.offset(void1095_sm.getOutput("sm_done"),-1);
void1095_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1095_rst_en = void1095_sm.getOutput("rst_en");
void1095_sm.connectInput("s0_done", void1093_done);
void1093_en <== void1095_sm.getOutput("s0_en");
DFEVar void1095_datapath_en = void1095_en & ~void1095_rst_en;
DFEVar void1095_ctr_en = void1095_datapath_en;
/* } void1095_SeqSM void1095 */
// FIFO FIFO1078 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const192_FixedPoint1, const0_FixedPoint50);
DFEVector<DFEVar> FIFO1078_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO1078_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO1078_readEn = dfeBool().newInstance(this);
DFEVar FIFO1078_writeEn = dfeBool().newInstance(this);
/* void1093_ParSM void1093 { */
SMIO void1093_sm = addStateMachine("void1093_sm", new void1093_ParSM(this));
    void1093_sm.connectInput("sm_en", void1093_en);
    void1093_done <== stream.offset(void1093_sm.getOutput("sm_done"),-1);
void1093_sm.connectInput("s0_done", void1086_done);
void1086_en <== void1093_sm.getOutput("s0_en");
void1093_sm.connectInput("s1_done", pipe1091_done);
pipe1091_en <== void1093_sm.getOutput("s1_en");
/* } void1093_ParSM void1093 */
/* Block void1093 Parallel { */
{
// Unit pipe writtenIn(void1086) = List()
/* void1086_SeqSM void1086 { */
SMIO void1086_sm = addStateMachine("void1086_sm", new void1086_SeqSM(this));
    void1086_sm.connectInput("sm_en", void1086_en);
    void1086_done <== stream.offset(void1086_sm.getOutput("sm_done"),-1);
void1086_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1086_rst_en = void1086_sm.getOutput("rst_en");
void1086_sm.connectInput("s0_done", void1081_done);
void1081_en <== void1086_sm.getOutput("s0_en");
void1086_sm.connectInput("s1_done", void1084_done);
void1084_en <== void1086_sm.getOutput("s1_en");
DFEVar void1086_datapath_en = void1086_en & ~void1086_rst_en;
DFEVar void1086_ctr_en = void1086_datapath_en;
/* } void1086_SeqSM void1086 */
/* Block void1086 Unitpipe { */
{
// Unit pipe writtenIn(void1081) = List()
/* void1081_MPSM void1081 { */
SMIO void1081_sm = addStateMachine("void1081_sm", new void1081_MPSM(this));
    void1081_sm.connectInput("sm_en", void1081_en);
    void1081_done <== stream.offset(void1081_sm.getOutput("sm_done"),-1);
void1081_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1081_rst_en = void1081_sm.getOutput("rst_en");
void1081_sm.connectInput("s0_done", void1079_done);
void1079_en <== void1081_sm.getOutput("s0_en");
DFEVar void1081_datapath_en = void1081_en & ~void1081_rst_en;
DFEVar void1081_ctr_en = void1081_datapath_en;
/* } void1081_MPSM void1081 */
/* Block void1081 Unitpipe { */
{
MemoryCmdGenLib void1079 = new MemoryCmdGenLib(
              this,
              void1079_en, void1079_done,
              DRAM1037, const0_FixedPoint50,
              "DRAM1037_void1079_in",
              192,
              FIFO1078_readEn, FIFO1078_rdata);
FIFO1078_writeEn <== void1079_en;
FIFO1078_wdata <== FIFO1078_rdata;
}
/* } Block void1081 Unitpipe */
// Unit pipe writtenIn(void1084) = List()
/* void1084_MPSM void1084 { */
SMIO void1084_sm = addStateMachine("void1084_sm", new void1084_MPSM(this));
    void1084_sm.connectInput("sm_en", void1084_en);
    void1084_done <== stream.offset(void1084_sm.getOutput("sm_done"),-1);
void1084_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1084_rst_en = void1084_sm.getOutput("rst_en");
void1084_sm.connectInput("s0_done", void1082_done);
void1082_en <== void1084_sm.getOutput("s0_en");
DFEVar void1084_datapath_en = void1084_en & ~void1084_rst_en;
DFEVar void1084_ctr_en = void1084_datapath_en;
/* } void1084_MPSM void1084 */
/* Block void1084 Unitpipe { */
{
// void1082: Offchip_store_cmd(DRAM1038,FIFO1078, const0_FixedPoint50, const192_FixedPoint1, 1)
MemoryCmdStLib void1082 = new MemoryCmdStLib(
          this,
          void1082_en, void1082_done,
          DRAM1038, const0_FixedPoint50,
          "DRAM1038_void1082_out",
          const192_FixedPoint1,
          FIFO1078_writeEn, FIFO1078_wdata);
FIFO1078_readEn <== void1082_en;
}
/* } Block void1084 Unitpipe */
}
/* } Block void1086 Unitpipe */
/* ParPipeForeach pipe1091 = ParPipeForeach(CounterChain1088) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1091 { */
OffsetExpr pipe1091_offset = stream.makeOffsetAutoLoop("pipe1091_offset");
SMIO pipe1091_sm = addStateMachine("pipe1091_sm", new PipeSM(this, 1));
    pipe1091_sm.connectInput("sm_en", pipe1091_en);
    pipe1091_done <== stream.offset(pipe1091_sm.getOutput("sm_done"),-1-pipe1091_offset);
DFEVar pipe1091_rst_en = pipe1091_sm.getOutput("rst_en");
pipe1091_sm.connectInput("rst_done", pipe1091_rst_done);
pipe1091_rst_done <== stream.offset(pipe1091_rst_en, -pipe1091_offset-1);
pipe1091_sm.connectInput("sm_maxIn_0", const192_FixedPoint1);
DFEVar Counter1087_max_0 = pipe1091_sm.getOutput("ctr_maxOut_0");
pipe1091_sm.connectInput("ctr_done", CounterChain1088_done);
DFEVar pipe1091_datapath_en = pipe1091_sm.getOutput("ctr_en");
DFEVar pipe1091_ctr_en = pipe1091_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1088_en = pipe1091_datapath_en;
DFEVar[] CounterChain1088_max = {const192_FixedPoint1};
int[] CounterChain1088_strides = {1};
OffsetExpr CounterChain1088_offset = stream.makeOffsetAutoLoop("CounterChain1088_offset");
SMIO CounterChain1088 = addStateMachine("CounterChain1088_sm", new CounterChain1088_CtrSM(owner, CounterChain1088_strides)); // gap = 0
CounterChain1088.connectInput("en", CounterChain1088_en);
CounterChain1088.connectInput("reset", pipe1091_done);
DFEVar CounterChain1088_maxed = CounterChain1088.getOutput("saturated");
CounterChain1088_done <== stream.offset(CounterChain1088.getOutput("done"), -1);
OffsetExpr CounterChain1088_additionalOffset = new OffsetExpr();
CounterChain1088.connectInput("max0", CounterChain1088_max[0]);
DFEVar Counter1087 = CounterChain1088.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1091 */
DFEVar pipe1091_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint922 = Counter1087;
/* Reg_write { */
io.scalarOutput("argout1039", FixedPoint922, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@196f4e87, numDuplicates = 1 */
}
/* } ParPipeForeach pipe1091 */
}
/* } Block void1093 Parallel */


















// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
