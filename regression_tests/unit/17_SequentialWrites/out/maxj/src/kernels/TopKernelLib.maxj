/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

int DRAM1250 = 1048576;

int DRAM1251 = 2097152;












/* Emitting Hwblock dependencies { */
// Dep: const96_FixedPoint3 = ConstFixPt(96,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$Signed,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B32,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint53 = ConstFixPt(0,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$Signed,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B32,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint61 = ConstFixPt(512,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$Signed,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B32,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM1250 = Reflect(Offchip_new(Sym(3)),Summary(mutable),List())
// Dep: const1_FixedPoint64 = ConstFixPt(1,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$Signed,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B32,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const5_FixedPoint75 = ConstFixPt(5,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$Signed,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B32,SequentialWrites$@4f685995.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argin1252 = Reflect(Argin_new(Sym(53)),Summary(mutable),List())
// Dep: DRAM1251 = Reflect(Offchip_new(Sym(3)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(1317) -> Map(), Sym(1327) -> Map(Sym(1091) -> _chain[0].read())) */
DFEVar void1343_en = top_en;
top_done <== void1343_done;
// Hwblock: childrenOf(void1343) = List(Sym(1304), Sym(1329), Sym(1341))
/* void1343_SeqSM void1343 { */
SMIO void1343_sm = addStateMachine("void1343_sm", new void1343_SeqSM(this));
    void1343_sm.connectInput("sm_en", void1343_en);
    void1343_done <== stream.offset(void1343_sm.getOutput("sm_done"),-1);
void1343_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1343_rst_en = void1343_sm.getOutput("rst_en");
void1343_sm.connectInput("s0_done", void1304_done);
void1304_en <== void1343_sm.getOutput("s0_en");
void1343_sm.connectInput("s1_done", metapipe1329_done);
metapipe1329_en <== void1343_sm.getOutput("s1_en");
void1343_sm.connectInput("s2_done", void1341_done);
void1341_en <== void1343_sm.getOutput("s2_en");
DFEVar void1343_datapath_en = void1343_en & ~void1343_rst_en;
DFEVar void1343_ctr_en = void1343_datapath_en;
/* } void1343_SeqSM void1343 */
// FIFO FIFO1293 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint61, const0_FixedPoint53);
DFEVector<DFEVar> FIFO1293_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO1293_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO1293_readEn = dfeBool().newInstance(this);
DFEVar FIFO1293_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1304) = List()
/* void1304_MPSM void1304 { */
SMIO void1304_sm = addStateMachine("void1304_sm", new void1304_MPSM(this));
    void1304_sm.connectInput("sm_en", void1304_en);
    void1304_done <== stream.offset(void1304_sm.getOutput("sm_done"),-1);
void1304_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1304_rst_en = void1304_sm.getOutput("rst_en");
void1304_sm.connectInput("s0_done", void1294_done);
void1294_en <== void1304_sm.getOutput("s0_en");
void1304_sm.connectInput("s1_done", pipe1302_done);
pipe1302_en <== void1304_sm.getOutput("s1_en");
DFEVar void1304_datapath_en = void1304_en & ~void1304_rst_en;
DFEVar void1304_ctr_en = void1304_datapath_en;
/* } void1304_MPSM void1304 */
/* Block void1304 Unitpipe { */
{
MemoryCmdGenLib void1294 = new MemoryCmdGenLib(
              this,
              void1294_en, void1294_done,
              DRAM1250, const0_FixedPoint53,
              "DRAM1250_void1294_in",
              96,
              FIFO1293_readEn, FIFO1293_rdata);
FIFO1293_writeEn <== void1294_en;
FIFO1293_wdata <== FIFO1293_rdata;
/* ParPipeForeach pipe1302 = ParPipeForeach(CounterChain1296) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1302 { */
OffsetExpr pipe1302_offset = stream.makeOffsetAutoLoop("pipe1302_offset");
SMIO pipe1302_sm = addStateMachine("pipe1302_sm", new PipeSM(this, 1));
    pipe1302_sm.connectInput("sm_en", pipe1302_en);
    pipe1302_done <== stream.offset(pipe1302_sm.getOutput("sm_done"),-1-pipe1302_offset);
DFEVar pipe1302_rst_en = pipe1302_sm.getOutput("rst_en");
pipe1302_sm.connectInput("rst_done", pipe1302_rst_done);
pipe1302_rst_done <== stream.offset(pipe1302_rst_en, -pipe1302_offset-1);
pipe1302_sm.connectInput("sm_maxIn_0", const96_FixedPoint3);
DFEVar Counter1295_max_0 = pipe1302_sm.getOutput("ctr_maxOut_0");
pipe1302_sm.connectInput("ctr_done", CounterChain1296_done);
DFEVar pipe1302_datapath_en = pipe1302_sm.getOutput("ctr_en");
DFEVar pipe1302_ctr_en = pipe1302_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1296_en = pipe1302_datapath_en;
DFEVar[] CounterChain1296_max = {const96_FixedPoint3};
int[] CounterChain1296_strides = {1};
OffsetExpr CounterChain1296_offset = stream.makeOffsetAutoLoop("CounterChain1296_offset");
SMIO CounterChain1296 = addStateMachine("CounterChain1296_sm", new CounterChain1296_CtrSM(owner, CounterChain1296_strides)); // gap = 0
CounterChain1296.connectInput("en", CounterChain1296_en);
CounterChain1296.connectInput("reset", pipe1302_done);
DFEVar CounterChain1296_maxed = CounterChain1296.getOutput("saturated");
CounterChain1296_done <== stream.offset(CounterChain1296.getOutput("done"), -1);
OffsetExpr CounterChain1296_additionalOffset = new OffsetExpr();
CounterChain1296.connectInput("max0", CounterChain1296_max[0]);
DFEVar Counter1295 = CounterChain1296.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1302 */
DFEVar pipe1302_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1068 = Counter1295;
// DFEVar Vector1297 = Par_pop_fifo(FIFO1293, 1);
FIFO1293_readEn <== pipe1302_ctr_en;
DFEVector<DFEVar> Vector1297 = FIFO1293_rdata;
DFEVector<DFEVar> Vector1072 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1068));
DFEVar FixedPoint1298 = Vector1297[0];
DFEVector<DFEVar> Vector1299 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1298));
/* Bram_store { */
BRAM1292_0.connectWport(stream.offset(Vector1072, -pipe1302_offset),
              stream.offset(Vector1299, -pipe1302_offset), stream.offset(pipe1302_datapath_en & pipe1302_redLoop_done /*wtf pipe is ParPipeForeach(Sym(1296),Block(Sym(1301)),List(List(Sym(1068))))*/, -pipe1302_offset), new int[] {0}); //w3.2
BRAM1292_1.connectWport(stream.offset(Vector1072, -pipe1302_offset),
              stream.offset(Vector1299, -pipe1302_offset), stream.offset(pipe1302_datapath_en & pipe1302_redLoop_done /*wtf pipe is ParPipeForeach(Sym(1296),Block(Sym(1301)),List(List(Sym(1068))))*/, -pipe1302_offset), new int[] {0}); //w3.2
/* } Bram_store */
}
/* } ParPipeForeach pipe1302 */
}
/* } Block void1304 Unitpipe */
/* ParPipeReduce metapipe1329 = ParPipeReduce(CounterChain1306, BRAM1292) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe1329 controller { */
/* metapipe1329_MPSM metapipe1329 { */
SMIO metapipe1329_sm = addStateMachine("metapipe1329_sm", new metapipe1329_MPSM(this));
    metapipe1329_sm.connectInput("sm_en", metapipe1329_en);
    metapipe1329_done <== stream.offset(metapipe1329_sm.getOutput("sm_done"),-1);
DFEVar metapipe1329_niter = ((const5_FixedPoint75 - const0_FixedPoint53) / (const1_FixedPoint64 * 1));
metapipe1329_sm.connectInput("sm_numIter", metapipe1329_niter.cast(dfeUInt(32)));
DFEVar metapipe1329_rst_en = metapipe1329_sm.getOutput("rst_en");
metapipe1329_sm.connectInput("s0_done", pipe1317_done);
pipe1317_en <== metapipe1329_sm.getOutput("s0_en");
metapipe1329_sm.connectInput("s1_done", pipe1327_done);
pipe1327_en <== metapipe1329_sm.getOutput("s1_en");
DFEVar Counter1305_max_0 = const5_FixedPoint75;
DFEVar metapipe1329_datapath_en = metapipe1329_en;
DFEVar metapipe1329_ctr_en = pipe1317_done;
/* CustomCounterChain { */
DFEVar CounterChain1306_en = pipe1317_done;
DFEVar[] CounterChain1306_max = {const5_FixedPoint75};
int[] CounterChain1306_strides = {1};
OffsetExpr CounterChain1306_offset = stream.makeOffsetAutoLoop("CounterChain1306_offset");
SMIO CounterChain1306 = addStateMachine("CounterChain1306_sm", new CounterChain1306_CtrSM(owner, CounterChain1306_strides)); // gap = 0
CounterChain1306.connectInput("en", CounterChain1306_en);
CounterChain1306.connectInput("reset", metapipe1329_done);
DFEVar CounterChain1306_maxed = CounterChain1306.getOutput("saturated");
DFEVar CounterChain1306_done = stream.offset(CounterChain1306.getOutput("done"), -1);
OffsetExpr CounterChain1306_additionalOffset = new OffsetExpr();
CounterChain1306.connectInput("max0", CounterChain1306_max[0]);
DFEVar Counter1305 = CounterChain1306.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe1329_MPSM metapipe1329 */
/* } metapipe1329 controller */
/* ParPipeReduce metapipe1329 par loop { */
DFEVar FixedPoint1091 = Counter1305;
/* } metapipe1329 par loop */
DblBufReg[] FixedPoint1091_chain = spatialUtils.getRegChain(
              "metapipe1329_FixedPoint1091", 2, FixedPoint1091,
              new DFEVar[]{pipe1317_done,pipe1327_done});
/* ParPipeReduce metapipe1329 func block { */
/* ParPipeForeach pipe1317 = ParPipeForeach(CounterChain1311) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1317 { */
OffsetExpr pipe1317_offset = stream.makeOffsetAutoLoop("pipe1317_offset");
SMIO pipe1317_sm = addStateMachine("pipe1317_sm", new PipeSM(this, 1));
    pipe1317_sm.connectInput("sm_en", pipe1317_en);
    pipe1317_done <== stream.offset(pipe1317_sm.getOutput("sm_done"),-1-pipe1317_offset);
DFEVar pipe1317_rst_en = pipe1317_sm.getOutput("rst_en");
pipe1317_sm.connectInput("rst_done", pipe1317_rst_done);
pipe1317_rst_done <== stream.offset(pipe1317_rst_en, -pipe1317_offset-1);
pipe1317_sm.connectInput("sm_maxIn_0", const96_FixedPoint3);
DFEVar Counter1310_max_0 = pipe1317_sm.getOutput("ctr_maxOut_0");
pipe1317_sm.connectInput("ctr_done", CounterChain1311_done);
DFEVar pipe1317_datapath_en = pipe1317_sm.getOutput("ctr_en");
DFEVar pipe1317_ctr_en = pipe1317_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1311_en = pipe1317_datapath_en;
DFEVar[] CounterChain1311_max = {Counter1310_max_0};
int[] CounterChain1311_strides = {1};
OffsetExpr CounterChain1311_offset = stream.makeOffsetAutoLoop("CounterChain1311_offset");
SMIO CounterChain1311 = addStateMachine("CounterChain1311_sm", new CounterChain1311_CtrSM(owner, CounterChain1311_strides)); // gap = 0
CounterChain1311.connectInput("en", CounterChain1311_en);
CounterChain1311.connectInput("reset", pipe1317_done);
DFEVar CounterChain1311_maxed = CounterChain1311.getOutput("saturated");
CounterChain1311_done <== stream.offset(CounterChain1311.getOutput("done"), -1);
OffsetExpr CounterChain1311_additionalOffset = new OffsetExpr();
CounterChain1311.connectInput("max0", CounterChain1311_max[0]);
DFEVar Counter1310 = CounterChain1311.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1317 */
DFEVar pipe1317_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1095 = Counter1310;
DFEVector<DFEVar> Vector1099 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1095));
DFEVar FixedPoint1313 = FixedPoint1312 + FixedPoint1095;
DFEVector<DFEVar> Vector1314 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1313));
/* Bram_store { */
BRAM1309_0.connectWport(Vector1099, Vector1314, pipe1317_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1317 */
/* ParPipeForeach pipe1327 = ParPipeForeach(CounterChain1308) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1327 { */
OffsetExpr pipe1327_offset = stream.makeOffsetAutoLoop("pipe1327_offset");
SMIO pipe1327_sm = addStateMachine("pipe1327_sm", new PipeSM(this, 1));
    pipe1327_sm.connectInput("sm_en", pipe1327_en);
    pipe1327_done <== stream.offset(pipe1327_sm.getOutput("sm_done"),-1-pipe1327_offset);
DFEVar pipe1327_rst_en = pipe1327_sm.getOutput("rst_en");
pipe1327_sm.connectInput("rst_done", pipe1327_rst_done);
pipe1327_rst_done <== stream.offset(pipe1327_rst_en, -pipe1327_offset-1);
pipe1327_sm.connectInput("sm_maxIn_0", const96_FixedPoint3);
DFEVar Counter1307_max_0 = pipe1327_sm.getOutput("ctr_maxOut_0");
pipe1327_sm.connectInput("ctr_done", CounterChain1308_done);
DFEVar pipe1327_datapath_en = pipe1327_sm.getOutput("ctr_en");
DFEVar pipe1327_ctr_en = pipe1327_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1308_en = pipe1327_datapath_en;
DFEVar[] CounterChain1308_max = {const96_FixedPoint3};
int[] CounterChain1308_strides = {1};
OffsetExpr CounterChain1308_offset = stream.makeOffsetAutoLoop("CounterChain1308_offset");
SMIO CounterChain1308 = addStateMachine("CounterChain1308_sm", new CounterChain1308_CtrSM(owner, CounterChain1308_strides)); // gap = 0
CounterChain1308.connectInput("en", CounterChain1308_en);
CounterChain1308.connectInput("reset", pipe1327_done);
DFEVar CounterChain1308_maxed = CounterChain1308.getOutput("saturated");
CounterChain1308_done <== stream.offset(CounterChain1308.getOutput("done"), -1);
OffsetExpr CounterChain1308_additionalOffset = new OffsetExpr();
CounterChain1308.connectInput("max0", CounterChain1308_max[0]);
DFEVar Counter1307 = CounterChain1308.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1327 */
DFEVar pipe1327_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1106 = Counter1307;
DFEVar FixedPoint1323 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
DFEVector<DFEVar> Vector1108 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1106));
/* Bram_load { */
DFEVector<DFEVar> Vector1318 = new DFEVectorType<DFEVar>(BRAM1309_0.type, 1).newInstance(this, Arrays.asList(BRAM1309_0.connectRport(FixedPoint1106, new int[] {1}))); //r2
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector1319 = new DFEVectorType<DFEVar>(BRAM1292_0.type, 1).newInstance(this, Arrays.asList(BRAM1292_0.connectRport(FixedPoint1106, new int[] {0}))); //r2
/* } Bram_load */
// FixedPoint1320 already emitted in pipe1327;
// Bit1105 already emitted in Sym(1327)
// Bit1107 already emitted in Sym(1327)
// Bit1114 already emitted in Sym(1327)
// FixedPoint1321 already emitted in pipe1327;
// FixedPoint1322 already emitted in Sym(1327)
// FixedPoint1323 already emitted in pipe1327;
DFEVector<DFEVar> Vector1324 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1323));
/* Bram_store { */
BRAM1292_0.connectWport(stream.offset(Vector1108, -pipe1327_offset),
              stream.offset(Vector1324, -pipe1327_offset), stream.offset(pipe1327_datapath_en & pipe1327_redLoop_done /*wtf pipe is ParPipeForeach(Sym(1308),Block(Sym(1326)),List(List(Sym(1106))))*/, -pipe1327_offset), new int[] {0}); //w3.2
BRAM1292_1.connectWport(stream.offset(Vector1108, -pipe1327_offset),
              stream.offset(Vector1324, -pipe1327_offset), stream.offset(pipe1327_datapath_en & pipe1327_redLoop_done /*wtf pipe is ParPipeForeach(Sym(1308),Block(Sym(1326)),List(List(Sym(1106))))*/, -pipe1327_offset), new int[] {0}); //w3.2
/* } Bram_store */
new pipe1327_reduce_kernel(owner , Vector1318,Vector1319 , FixedPoint1323 , FixedPoint1091_chain[0].read(),FixedPoint1106,const0_FixedPoint53,const5_FixedPoint75,const96_FixedPoint3); // Reduce kernel
}
/* } ParPipeForeach pipe1327 */
/* } metapipe1329 func block */
}
/* } ParPipeReduce metapipe1329 */
// FIFO FIFO1330 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint61, const0_FixedPoint53);
DFEVector<DFEVar> FIFO1330_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO1330_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO1330_readEn = dfeBool().newInstance(this);
DFEVar FIFO1330_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1341) = List()
/* void1341_MPSM void1341 { */
SMIO void1341_sm = addStateMachine("void1341_sm", new void1341_MPSM(this));
    void1341_sm.connectInput("sm_en", void1341_en);
    void1341_done <== stream.offset(void1341_sm.getOutput("sm_done"),-1);
void1341_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1341_rst_en = void1341_sm.getOutput("rst_en");
void1341_sm.connectInput("s0_done", pipe1338_done);
pipe1338_en <== void1341_sm.getOutput("s0_en");
void1341_sm.connectInput("s1_done", void1339_done);
void1339_en <== void1341_sm.getOutput("s1_en");
DFEVar void1341_datapath_en = void1341_en & ~void1341_rst_en;
DFEVar void1341_ctr_en = void1341_datapath_en;
/* } void1341_MPSM void1341 */
/* Block void1341 Unitpipe { */
{
/* ParPipeForeach pipe1338 = ParPipeForeach(CounterChain1332) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1338 { */
OffsetExpr pipe1338_offset = stream.makeOffsetAutoLoop("pipe1338_offset");
SMIO pipe1338_sm = addStateMachine("pipe1338_sm", new PipeSM(this, 1));
    pipe1338_sm.connectInput("sm_en", pipe1338_en);
    pipe1338_done <== stream.offset(pipe1338_sm.getOutput("sm_done"),-1-pipe1338_offset);
DFEVar pipe1338_rst_en = pipe1338_sm.getOutput("rst_en");
pipe1338_sm.connectInput("rst_done", pipe1338_rst_done);
pipe1338_rst_done <== stream.offset(pipe1338_rst_en, -pipe1338_offset-1);
pipe1338_sm.connectInput("sm_maxIn_0", const96_FixedPoint3);
DFEVar Counter1331_max_0 = pipe1338_sm.getOutput("ctr_maxOut_0");
pipe1338_sm.connectInput("ctr_done", CounterChain1332_done);
DFEVar pipe1338_datapath_en = pipe1338_sm.getOutput("ctr_en");
DFEVar pipe1338_ctr_en = pipe1338_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1332_en = pipe1338_datapath_en;
DFEVar[] CounterChain1332_max = {const96_FixedPoint3};
int[] CounterChain1332_strides = {1};
OffsetExpr CounterChain1332_offset = stream.makeOffsetAutoLoop("CounterChain1332_offset");
SMIO CounterChain1332 = addStateMachine("CounterChain1332_sm", new CounterChain1332_CtrSM(owner, CounterChain1332_strides)); // gap = 0
CounterChain1332.connectInput("en", CounterChain1332_en);
CounterChain1332.connectInput("reset", pipe1338_done);
DFEVar CounterChain1332_maxed = CounterChain1332.getOutput("saturated");
CounterChain1332_done <== stream.offset(CounterChain1332.getOutput("done"), -1);
OffsetExpr CounterChain1332_additionalOffset = new OffsetExpr();
CounterChain1332.connectInput("max0", CounterChain1332_max[0]);
DFEVar Counter1331 = CounterChain1332.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe1338 */
DFEVar pipe1338_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1127 = Counter1331;
DFEVector<DFEVar> Vector1128 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1127));
/* Bram_load { */
DFEVector<DFEVar> Vector1333 = new DFEVectorType<DFEVar>(BRAM1292_1.type, 1).newInstance(this, Arrays.asList(BRAM1292_1.connectRport(FixedPoint1127, new int[] {0}))); //r2
/* } Bram_load */
DFEVar Bit1132 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit1132 <== FixedPoint1127 < const96_FixedPoint3;
DFEVector<DFEVar> Vector1133 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit1132));
DFEVar FixedPoint1334 = Vector1333[0];
DFEVector<DFEVar> Vector1335 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint1334));
// Par_push_fifo(FIFO1330, Vector1335, Vector1133, true);
FIFO1330_writeEn <== pipe1338_ctr_en;
FIFO1330_wdata <== Vector1335;
}
/* } ParPipeForeach pipe1338 */
// void1339: Offchip_store_cmd(DRAM1251,FIFO1330, const0_FixedPoint53, const96_FixedPoint3, 1)
MemoryCmdStLib void1339 = new MemoryCmdStLib(
          this,
          void1339_en, void1339_done,
          DRAM1251, const0_FixedPoint53,
          "DRAM1251_void1339_out",
          const96_FixedPoint3,
          FIFO1330_writeEn, FIFO1330_wdata);
FIFO1330_readEn <== void1339_en;
}
/* } Block void1341 Unitpipe */






















// rdone signals for N-Buffers go here
BRAM1309_0.connectStageCtrl(pipe1327_done, pipe1327_en, new int[] { 1 }); /*read*/
BRAM1309_0.connectStageCtrl(pipe1317_done, pipe1317_en, new int[] { 0 }); /*write*/
BRAM1309_0.connectUnwrittenPorts(new int[] {1});
BRAM1309_0.connectUnreadPorts(new int[] {0});
BRAM1309_0.connectUntouchedPorts(new int[] {});
BRAM1309_0.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
