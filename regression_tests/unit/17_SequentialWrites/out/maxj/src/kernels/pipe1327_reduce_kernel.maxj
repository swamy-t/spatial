package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class pipe1327_reduce_kernel extends KernelLib {
void common(DFEVector<DFEVar> Vector1318,DFEVector<DFEVar> Vector1319 /*1*/ ,
                DFEVar FixedPoint1323 /*2*/ , DFEVar FixedPoint1091,DFEVar FixedPoint1106,DFEVar const0_FixedPoint53,DFEVar const5_FixedPoint75,DFEVar const96_FixedPoint3 /*3*/) {
// For now, I just regenerate constants because java is being annoying about class extensions


DFEVar FixedPoint1320 = Vector1319[0];
DFEVar Bit1105 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit1105 = FixedPoint1091 < const5_FixedPoint75;
DFEVar Bit1107 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit1107 = FixedPoint1106 < const96_FixedPoint3;
DFEVar Bit1114 = Bit1105 & Bit1107;
DFEVar FixedPoint1321 = Vector1318[0];
DFEVar FixedPoint1322 = Bit1114 ? FixedPoint1321 : const0_FixedPoint53 ;
FixedPoint1323 <== FixedPoint1322 + FixedPoint1320;
/* Unknown Deff Sym(1324) Vector_from_list(List(Sym(1323))) */
/* Unknown Deff Sym(1325) Par_bram_store(Sym(1083),Sym(1108),Sym(1324)) */
/* Unknown Deff Sym(1326) Reify(Const(()),Summary(mayRead(Sym(1309), Sym(1083)), mstRead(Sym(1309), Sym(1083)), mayWrite(Sym(1083)), mstWrite(Sym(1083))),List(Sym(1318), Sym(1319), Sym(1325))) */
}

pipe1327_reduce_kernel(KernelLib owner , /*1*/ DFEVector<DFEVar> Vector1318,DFEVector<DFEVar> Vector1319 , /*2*/
                DFEVar FixedPoint1323 , /*3*/  DFEVar FixedPoint1091,DFEVar FixedPoint1106,DFEVar const0_FixedPoint53,DFEVar const5_FixedPoint75,DFEVar const96_FixedPoint3) {
  super(owner);
  common(Vector1318, Vector1319 , FixedPoint1323 , FixedPoint1091,FixedPoint1106,const0_FixedPoint53,const5_FixedPoint75,const96_FixedPoint3);
}
}
