package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmInput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmOutput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateEnum;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.kernel.KernelStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;

class DblBufStateMachine extends KernelStateMachine {

  // States
  enum States {
    W, R, RW, SWAP
  }

  // Constants
  private int numIter;

  // State IO
  private final DFEsmInput w_done;
  private final DFEsmInput r_done;
  private final DFEsmOutput curBuf;

  // State storage
  private final DFEsmStateEnum<States> stateFF;
  private final DFEsmStateValue curBufFF;

  // Initialize state machine in constructor
  public DblBufStateMachine(KernelLib owner) {
    super(owner);

    // Declare all types required to wire the state machine together
    DFEsmValueType wireType = dfeBool();
    // DFEsmValueType counterType = dfeUInt(32);

    // Define state machine IO
    w_done = io.input("w_done", wireType);
    r_done = io.input("r_done", wireType);

    curBuf = io.output("curBuf", wireType);

    // Define state storage elements and initial state
    stateFF = state.enumerated(States.class, States.W);
    curBufFF = state.value(wireType, 0);

    // Define constants
    this.numIter = numIter;
  }

  @Override
  protected void nextState() {
    SWITCH(stateFF) {
      CASE(States.W) {
        IF (w_done) {
          stateFF.next <== States.SWAP;
        }
      }
      CASE(States.RW) {
        IF (r_done & w_done) {
          stateFF.next <== States.SWAP;
        } ELSE {
          IF (r_done) {
          stateFF.next <== States.W;
          } ELSE {
            IF (w_done) {
              stateFF.next <== States.R;
            }
          }
        }
      }
      CASE(States.R) {
        IF (r_done) {
          stateFF.next <== States.SWAP;
        }
      }
      CASE(States.SWAP) {
        curBufFF.next <== ~curBufFF;
        stateFF.next <== States.RW;
      }
      OTHERWISE {
        stateFF.next <== stateFF;
      }
    }
  }

  @Override
  protected void outputFunction() {
    curBuf <== curBufFF;
  }
}
