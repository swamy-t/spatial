package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar argin1833 = io.scalarInput("argin1833", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar void1948_done = dfeBool().newInstance(this);
DFEVar metapipe1946_done = dfeBool().newInstance(this);
DFEVar metapipe1946_en = dfeBool().newInstance(this);
DFEVar void1927_done = dfeBool().newInstance(this);
DFEVar void1927_en = dfeBool().newInstance(this);
DFEVar pipe1940_done = dfeBool().newInstance(this);
DFEVar pipe1940_en = dfeBool().newInstance(this);
DFEVar void1944_done = dfeBool().newInstance(this);
DFEVar void1944_en = dfeBool().newInstance(this);
DFEVar void1922_done = dfeBool().newInstance(this);
DFEVar void1922_en = dfeBool().newInstance(this);
DFEVar void1925_done = dfeBool().newInstance(this);
DFEVar void1925_en = dfeBool().newInstance(this);
DFEVar void1920_done = dfeBool().newInstance(this);
DFEVar void1920_en = dfeBool().newInstance(this);
DFEVar FIFO1915_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar void1923_done = dfeBool().newInstance(this);
DFEVar void1923_en = dfeBool().newInstance(this);
DFEVar FIFO1916_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
/* Reg_new { */
NBufReg reg1928_1_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg1928_1", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar pipe1940_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain1930_done = dfeBool().newInstance(this);
DFEVar void1944_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar FixedPoint1835 = argin1833; // reg read
DFEVar FixedPoint1917 = argin1833; // reg read
DFEVar const0_FixedPoint96 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const2_FixedPoint51 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2 ); 
DFEVar const96_FixedPoint159 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const1_FixedPoint126 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
}
