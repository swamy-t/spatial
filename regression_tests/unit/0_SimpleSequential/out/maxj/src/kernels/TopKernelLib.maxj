/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);













/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint5 = ConstFixPt(0,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$Signed,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B32,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint33 = ConstFixPt(96,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$Signed,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B32,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint13 = ConstFixPt(1,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$Signed,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B32,SimpleSequential$@1e7b9427.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: argin450 = Reflect(Argin_new(Sym(5)),Summary(mutable),List())
// Dep: argin451 = Reflect(Argin_new(Sym(5)),Summary(mutable),List())
// Dep: argout452 = Reflect(Argout_new(Sym(5)),Summary(mutable),List())
// Dep: Bit26 = ConstBit(true)
DFEVar Bit26 = constant.var( true );
/*  End Hwblock dependencies } */
/* quoteSuffix = Map() */
DFEVar void476_en = top_en;
top_done <== void476_done;
// Hwblock: childrenOf(void476) = List(Sym(469), Sym(474))
/* void476_SeqSM void476 { */
SMIO void476_sm = addStateMachine("void476_sm", new void476_SeqSM(this));
    void476_sm.connectInput("sm_en", void476_en);
    void476_done <== stream.offset(void476_sm.getOutput("sm_done"),-1);
void476_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void476_rst_en = void476_sm.getOutput("rst_en");
void476_sm.connectInput("s0_done", pipe469_done);
pipe469_en <== void476_sm.getOutput("s0_en");
void476_sm.connectInput("s1_done", void474_done);
void474_en <== void476_sm.getOutput("s1_en");
DFEVar void476_datapath_en = void476_en & ~void476_rst_en;
DFEVar void476_ctr_en = void476_datapath_en;
/* } void476_SeqSM void476 */
/* ParPipeForeach pipe469 = ParPipeForeach(CounterChain457) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe469 { */
OffsetExpr pipe469_offset = stream.makeOffsetAutoLoop("pipe469_offset");
SMIO pipe469_sm = addStateMachine("pipe469_sm", new PipeSM(this, 1));
    pipe469_sm.connectInput("sm_en", pipe469_en);
    pipe469_done <== stream.offset(pipe469_sm.getOutput("sm_done"),-1-pipe469_offset);
DFEVar pipe469_rst_en = pipe469_sm.getOutput("rst_en");
pipe469_sm.connectInput("rst_done", pipe469_rst_done);
pipe469_rst_done <== stream.offset(pipe469_rst_en, -pipe469_offset-1);
pipe469_sm.connectInput("sm_maxIn_0", const96_FixedPoint33);
DFEVar Counter456_max_0 = pipe469_sm.getOutput("ctr_maxOut_0");
pipe469_sm.connectInput("ctr_done", CounterChain457_done);
DFEVar pipe469_datapath_en = pipe469_sm.getOutput("ctr_en");
DFEVar pipe469_ctr_en = pipe469_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain457_en = pipe469_datapath_en;
DFEVar[] CounterChain457_max = {const96_FixedPoint33};
int[] CounterChain457_strides = {1};
OffsetExpr CounterChain457_offset = stream.makeOffsetAutoLoop("CounterChain457_offset");
SMIO CounterChain457 = addStateMachine("CounterChain457_sm", new CounterChain457_CtrSM(owner, CounterChain457_strides)); // gap = 0
CounterChain457.connectInput("en", CounterChain457_en);
CounterChain457.connectInput("reset", pipe469_done);
DFEVar CounterChain457_maxed = CounterChain457.getOutput("saturated");
CounterChain457_done <== stream.offset(CounterChain457.getOutput("done"), -1);
OffsetExpr CounterChain457_additionalOffset = new OffsetExpr();
CounterChain457.connectInput("max0", CounterChain457_max[0]);
DFEVector<DFEVar> Counter456 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter456[0] <== CounterChain457.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter456[i+1] <== CounterChain457.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe469 */
DFEVar pipe469_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint373 = Counter456[0];
DFEVar FixedPoint374 = Counter456[1];
DFEVar FixedPoint375 = Counter456[2];
DFEVar FixedPoint376 = Counter456[3];
DFEVector<DFEVar> Vector387 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint373,FixedPoint374,FixedPoint375,FixedPoint376));
DFEVar FixedPoint462 = FixedPoint458 * FixedPoint373;
DFEVar FixedPoint463 = FixedPoint459 * FixedPoint374;
DFEVar FixedPoint464 = FixedPoint460 * FixedPoint375;
DFEVar FixedPoint465 = FixedPoint461 * FixedPoint376;
DFEVector<DFEVar> Vector466 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint462,FixedPoint463,FixedPoint464,FixedPoint465));
/* Bram_store { */
BRAM455_0.connectWport(Vector387, Vector466, pipe469_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe469 */
// Unit pipe writtenIn(void474) = List(Sym(452))
//   argout452 = Reflect(Argout_new(Sym(5)),Summary(mutable),List()), isAccum(argout452) = false
/* PipeSM void474 { */
OffsetExpr void474_offset = stream.makeOffsetAutoLoop("void474_offset");
SMIO void474_sm = addStateMachine("void474_sm", new PipeSM(this, 1));
    void474_sm.connectInput("sm_en", void474_en);
    void474_done <== stream.offset(void474_sm.getOutput("sm_done"),-1-void474_offset);
DFEVar void474_rst_en = void474_sm.getOutput("rst_en");
void474_sm.connectInput("rst_done", void474_rst_done);
void474_rst_done <== stream.offset(void474_rst_en, -void474_offset-1);
void474_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void474_sm.connectInput("ctr_done", stream.offset(void474_sm.getOutput("ctr_en"), -1));
DFEVar void474_datapath_en = void474_en & ~void474_rst_en;
DFEVar void474_ctr_en = void474_datapath_en;
/* } PipeSM void474 */
/* Block void474 Unitpipe { */
{
/* Bram_load { */
DFEVar FixedPoint471 = BRAM455_0.connectRport(FixedPoint470, new int[] {0}); //r3
/* } Bram_load */
/* Reg_write { */
io.scalarOutput("argout452", FixedPoint471, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@7aaa977, numDuplicates = 1 */
}
/* } Block void474 Unitpipe */














// rdone signals for N-Buffers go here
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
