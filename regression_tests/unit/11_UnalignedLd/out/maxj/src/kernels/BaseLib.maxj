package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar void853_done = dfeBool().newInstance(this);
DFEVar void837_done = dfeBool().newInstance(this);
DFEVar void837_en = dfeBool().newInstance(this);
DFEVar pipe847_done = dfeBool().newInstance(this);
DFEVar pipe847_en = dfeBool().newInstance(this);
DFEVar void851_done = dfeBool().newInstance(this);
DFEVar void851_en = dfeBool().newInstance(this);
/* Bram_new { */
BramLib BRAM823_0 = new BramLib(this, 155, 1, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ 1, /* stride */ 1, 1);
/* } Bram_new */
DFEVar void835_done = dfeBool().newInstance(this);
DFEVar void835_en = dfeBool().newInstance(this);
DFEVar void825_done = dfeBool().newInstance(this);
DFEVar void825_en = dfeBool().newInstance(this);
DFEVar pipe833_done = dfeBool().newInstance(this);
DFEVar pipe833_en = dfeBool().newInstance(this);
DFEVar FIFO824_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe833_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain827_done = dfeBool().newInstance(this);
/* Reg_new { */
DelayLib reg838_1_lib = new DelayLib(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0));
DFEVar reg838_1 = reg838_1_lib.read();
DFEVar reg838_1_delayed = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Reg_new } */
DFEVar pipe847_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain840_done = dfeBool().newInstance(this);
DFEVar void851_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar const512_FixedPoint57 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const0_FixedPoint49 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const1_FixedPoint60 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const155_FixedPoint52 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 155 ); 
DFEVar const192_FixedPoint1 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 192 ); 
}
