package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar void2609_done = dfeBool().newInstance(this);
DFEVar seq2607_done = dfeBool().newInstance(this);
DFEVar seq2607_en = dfeBool().newInstance(this);
/* Bram_new { */
BramLib BRAM2553_0 = new BramLib(this, 96, 1, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ 1, /* stride */ 1, 2);
NBufKernelLib BRAM2553_1 = new NBufKernelLib(this, "BRAM2553_1",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true,true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
BramLib BRAM2554_0 = new BramLib(this, 96, 1, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ 1, /* stride */ 1, 0);
/* } Bram_new */
DFEVar void2568_done = dfeBool().newInstance(this);
DFEVar void2568_en = dfeBool().newInstance(this);
DFEVar metapipe2605_done = dfeBool().newInstance(this);
DFEVar metapipe2605_en = dfeBool().newInstance(this);
DFEVar void2558_done = dfeBool().newInstance(this);
DFEVar void2558_en = dfeBool().newInstance(this);
DFEVar pipe2566_done = dfeBool().newInstance(this);
DFEVar pipe2566_en = dfeBool().newInstance(this);
DFEVar FIFO2557_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2566_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2560_done = dfeBool().newInstance(this);
DFEVar metapipe2586_done = dfeBool().newInstance(this);
DFEVar metapipe2586_en = dfeBool().newInstance(this);
DFEVar void2603_done = dfeBool().newInstance(this);
DFEVar void2603_en = dfeBool().newInstance(this);
DFEVar pipe2584_done = dfeBool().newInstance(this);
DFEVar pipe2584_en = dfeBool().newInstance(this);
DFEVar pipe2584_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2574_done = dfeBool().newInstance(this);
DFEVar pipe2595_done = dfeBool().newInstance(this);
DFEVar pipe2595_en = dfeBool().newInstance(this);
DFEVar void2599_done = dfeBool().newInstance(this);
DFEVar void2599_en = dfeBool().newInstance(this);
DFEVar void2601_done = dfeBool().newInstance(this);
DFEVar void2601_en = dfeBool().newInstance(this);
DFEVar pipe2595_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2589_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg2596_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg2596_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void2599_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar const192_FixedPoint1 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 192 ); 
DFEVar const2_FixedPoint50 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2 ); 
DFEVar const512_FixedPoint113 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const0_FixedPoint102 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const96_FixedPoint189 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const1_FixedPoint116 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const960_FixedPoint97 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 960 ); 
DFEVar const5_FixedPoint127 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 5 ); 
}
