package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class pipe2584_reduce_kernel extends KernelLib {
void common(DFEVector<DFEVar> Vector2575,DFEVector<DFEVar> Vector2576 /*1*/ ,
                DFEVar FixedPoint2580 /*2*/ , DFEVar FixedPoint2162,DFEVar FixedPoint2164,DFEVar const0_FixedPoint102,DFEVar const1_FixedPoint116,DFEVar const96_FixedPoint189 /*3*/) {
// For now, I just regenerate constants because java is being annoying about class extensions


DFEVar FixedPoint2577 = Vector2576[0];
DFEVar Bit2163 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2163 = FixedPoint2162 < const1_FixedPoint116;
DFEVar Bit2165 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2165 = FixedPoint2164 < const96_FixedPoint189;
DFEVar Bit2172 = Bit2163 & Bit2165;
DFEVar FixedPoint2578 = Vector2575[0];
DFEVar FixedPoint2579 = Bit2172 ? FixedPoint2578 : const0_FixedPoint102 ;
FixedPoint2580 <== FixedPoint2579 + FixedPoint2577;
/* Unknown Deff Sym(2581) Vector_from_list(List(Sym(2580))) */
/* Unknown Deff Sym(2582) Par_bram_store(Sym(2154),Sym(2166),Sym(2581)) */
/* Unknown Deff Sym(2583) Reify(Const(()),Summary(mayRead(Sym(2554), Sym(2154)), mstRead(Sym(2554), Sym(2154)), mayWrite(Sym(2154)), mstWrite(Sym(2154))),List(Sym(2575), Sym(2576), Sym(2582))) */
}

pipe2584_reduce_kernel(KernelLib owner , /*1*/ DFEVector<DFEVar> Vector2575,DFEVector<DFEVar> Vector2576 , /*2*/
                DFEVar FixedPoint2580 , /*3*/  DFEVar FixedPoint2162,DFEVar FixedPoint2164,DFEVar const0_FixedPoint102,DFEVar const1_FixedPoint116,DFEVar const96_FixedPoint189) {
  super(owner);
  common(Vector2575, Vector2576 , FixedPoint2580 , FixedPoint2162,FixedPoint2164,const0_FixedPoint102,const1_FixedPoint116,const96_FixedPoint189);
}
}
