package engine;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

/*
 * @DummyMemLib: Library that provides the same accessor methods as Block RAM
 * but is just a dummy register.
 */
class DummyMemLib extends KernelLib {

  DFEType type;
  int[] banks;
  DFEVector<DFEVar> stream;
  void common(DFEType type, int[] banks) {
    this.banks = banks;
    this.type = type;
    DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(type, banks[0]*banks[1]);
    this.stream = vecType.newInstance(this);
  }

  DummyMemLib(KernelLib owner, DFEType type, int[] banks) {
    super(owner);
    common(type, banks);
  }

  DummyMemLib(KernelLib owner, DFEType type, int banks) {
    super(owner);
    common(type, new int[] {1,banks});
  }

  DFEVar connectRport(DFEVar srcAddr) {
    return stream[0];
  }

  DFEVar connectRport(DFEVar srcAddr, int touch) {
    return stream[touch];
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr) {
    return stream;
  }

  DFEVector<DFEVar> connectRport(DFEVector<DFEVar> srcAddr, int touch) {
    DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(type, banks[0]);
    DFEVector<DFEVar> p = vecType.newInstance(this);
    for (int i=0; i < banks[1]; i++) {
      p[i] <== stream[i + touch*banks[1]];
    }
    return p;
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData, DFEVar en, int[] trash) {
    for (int i=0; i<banks[1]; i++) {
      stream[i] <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), en);
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVar dstData, DFEVar en, int[] trash) {
    for (int i=0; i<banks[1]; i++) {
      stream[i] <== Reductions.streamHold(dstAddr[0].cast(type) ^ dstData.cast(type), en);
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, DFEVar en, int[] trash) {
    for (int i=0; i<banks[1]; i++) {
      System.out.println("i = " + i);
      stream[i] <== Reductions.streamHold(dstAddr[i].cast(type) ^ dstData[i].cast(type), en);
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVector<DFEVar> dstData, DFEVar en, int touch, int[] trash) {
    for (int i=0; i < banks[1]; i++) {
      System.out.println("i = " + i);
      stream[i + touch*banks[1]] <== Reductions.streamHold(dstAddr[i].cast(type) ^ dstData[i].cast(type), en);
    }
  }

  void connectWport(DFEVector<DFEVar> dstAddr, DFEVar dstData, DFEVar en, int touch, int[] trash) {
    for (int i=0; i < banks[1]; i++) {
      System.out.println("i = " + i);
      stream[i + touch*banks[1]] <== Reductions.streamHold(dstAddr[0][i].cast(type) ^ dstData[i].cast(type), en);
    }
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData, DFEVar en, int start, int stride, int[] trash) {
    for (int i=0; i<banks[0]; i++) {
      stream[i] <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), en);
    }
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData, int[] trash) {
    stream[0] <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), constant.var(true));
  }

}
