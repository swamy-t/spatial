package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar argin5346 = io.scalarInput("argin5346", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar argin5345 = io.scalarInput("argin5345", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar argin5347 = io.scalarInput("argin5347", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar void5832_done = dfeBool().newInstance(this);
DFEVar seq5830_done = dfeBool().newInstance(this);
DFEVar seq5830_en = dfeBool().newInstance(this);
DFEVar metapipe5726_done = dfeBool().newInstance(this);
DFEVar metapipe5726_en = dfeBool().newInstance(this);
DFEVar metapipe5828_done = dfeBool().newInstance(this);
DFEVar metapipe5828_en = dfeBool().newInstance(this);
/* Bram_new { */
BramLib BRAM5705_0 = new BramLib(this, 4, 96, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ new int[] {1,1}, /* stride */ new int[] {96,1}, 2);
NBufKernelLib BRAM5705_1 = new NBufKernelLib(this, "BRAM5705_1",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true,true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
DFEVar void5714_done = dfeBool().newInstance(this);
DFEVar void5714_en = dfeBool().newInstance(this);
DFEVar void5716_done = dfeBool().newInstance(this);
DFEVar void5716_en = dfeBool().newInstance(this);
DFEVar pipe5724_done = dfeBool().newInstance(this);
DFEVar pipe5724_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg5709_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg5709_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void5714_rst_done = dfeBool().newInstance(this);
DFEVar FIFO5706_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe5724_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5718_done = dfeBool().newInstance(this);
DFEVar void5775_done = dfeBool().newInstance(this);
DFEVar void5775_en = dfeBool().newInstance(this);
DFEVar metapipe5805_done = dfeBool().newInstance(this);
DFEVar metapipe5805_en = dfeBool().newInstance(this);
DFEVar metapipe5826_done = dfeBool().newInstance(this);
DFEVar metapipe5826_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM5730_0 = new NBufKernelLib(this, "BRAM5730_0",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM5731_0 = new NBufKernelLib(this, "BRAM5731_0",
                  96, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
DFEVar metapipe5752_done = dfeBool().newInstance(this);
DFEVar metapipe5752_en = dfeBool().newInstance(this);
DFEVar metapipe5773_done = dfeBool().newInstance(this);
DFEVar metapipe5773_en = dfeBool().newInstance(this);
DFEVar void5740_done = dfeBool().newInstance(this);
DFEVar void5740_en = dfeBool().newInstance(this);
DFEVar void5742_done = dfeBool().newInstance(this);
DFEVar void5742_en = dfeBool().newInstance(this);
DFEVar pipe5750_done = dfeBool().newInstance(this);
DFEVar pipe5750_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg5735_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg5735_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void5740_rst_done = dfeBool().newInstance(this);
DFEVar FIFO5732_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe5750_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5744_done = dfeBool().newInstance(this);
DFEVar void5761_done = dfeBool().newInstance(this);
DFEVar void5761_en = dfeBool().newInstance(this);
DFEVar void5763_done = dfeBool().newInstance(this);
DFEVar void5763_en = dfeBool().newInstance(this);
DFEVar pipe5771_done = dfeBool().newInstance(this);
DFEVar pipe5771_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg5756_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg5756_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void5761_rst_done = dfeBool().newInstance(this);
DFEVar FIFO5753_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe5771_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5765_done = dfeBool().newInstance(this);
DFEVar pipe5793_done = dfeBool().newInstance(this);
DFEVar pipe5793_en = dfeBool().newInstance(this);
DFEVar pipe5803_done = dfeBool().newInstance(this);
DFEVar pipe5803_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM5781_0 = new NBufKernelLib(this, "BRAM5781_0",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
DFEVar pipe5793_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5784_done = dfeBool().newInstance(this);
DFEVar pipe5803_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5780_done = dfeBool().newInstance(this);
DFEVar pipe5816_done = dfeBool().newInstance(this);
DFEVar pipe5816_en = dfeBool().newInstance(this);
DFEVar void5822_done = dfeBool().newInstance(this);
DFEVar void5822_en = dfeBool().newInstance(this);
DFEVar void5824_done = dfeBool().newInstance(this);
DFEVar void5824_en = dfeBool().newInstance(this);
DFEVar pipe5816_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5810_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg5817_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg5817_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void5822_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar FixedPoint5701 = argin5346; // reg read
DFEVar FixedPoint5727 = argin5347; // reg read
DFEVar FixedPoint5355 = argin5346; // reg read
DFEVar FixedPoint5700 = argin5345; // reg read
DFEVar FixedPoint5351 = argin5345; // reg read
DFEVar FixedPoint5352 = argin5347; // reg read
DFEVar const512_FixedPoint461 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const0_FixedPoint189 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const384_FixedPoint3933 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 384 ); 
DFEVar const9216_FixedPoint3935 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 9216 ); 
DFEVar const96_FixedPoint3931 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const1_FixedPoint11 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const4_FixedPoint3930 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4 ); 
}
