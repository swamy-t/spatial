/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);
















int DRAM5354 = 1048576;



int DRAM5357 = 2097152;


int DRAM5359 = 3145728;

int DRAM5360 = 4194304;




















/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint189 = ConstFixPt(0,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: String3 = ArrayApply(Sym(0),Const(1))
// Dep: argin5346 = Reflect(Argin_new(Sym(189)),Summary(mutable),List())
DFEVar FixedPoint4 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint4 <== argin5346;
// Dep: FixedPoint4 = Tpes_String_to_fixpt(Sym(3))
// Dep: void5349 = Reflect(Set_arg(Sym(5346),Sym(4)),Summary(mayRead(Sym(5346)), mstRead(Sym(5346)), mayWrite(Sym(5346)), mstWrite(Sym(5346))),List(Sym(5346)))

// Dep: String1 = ArrayApply(Sym(0),Const(0))
// Dep: argin5345 = Reflect(Argin_new(Sym(189)),Summary(mutable),List())
DFEVar FixedPoint2 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint2 <== argin5345;
// Dep: FixedPoint2 = Tpes_String_to_fixpt(Sym(1))
// Dep: void5348 = Reflect(Set_arg(Sym(5345),Sym(2)),Summary(mayRead(Sym(5345)), mstRead(Sym(5345)), mayWrite(Sym(5345)), mstWrite(Sym(5345))),List(Sym(5345)))

// Dep: FixedPoint5351 = Reflect(Reg_read(Sym(5345)),Summary(mayRead(Sym(5345)), mstRead(Sym(5345))),List(Sym(5345), Sym(5348)))
// Dep: FixedPoint5355 = Reflect(Reg_read(Sym(5346)),Summary(mayRead(Sym(5346)), mstRead(Sym(5346))),List(Sym(5346), Sym(5349)))
// Dep: FixedPoint5358 = FixPt_Mul(Sym(5351),Sym(5355))
DFEVar FixedPoint5358 = FixedPoint5351 * FixedPoint5355;
// Dep: String5 = ArrayApply(Sym(0),Const(2))
// Dep: argin5347 = Reflect(Argin_new(Sym(189)),Summary(mutable),List())
DFEVar FixedPoint6 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint6 <== argin5347;
// Dep: FixedPoint6 = Tpes_String_to_fixpt(Sym(5))
// Dep: void5350 = Reflect(Set_arg(Sym(5347),Sym(6)),Summary(mayRead(Sym(5347)), mstRead(Sym(5347)), mayWrite(Sym(5347)), mstWrite(Sym(5347))),List(Sym(5347)))

// Dep: FixedPoint5352 = Reflect(Reg_read(Sym(5347)),Summary(mayRead(Sym(5347)), mstRead(Sym(5347))),List(Sym(5347), Sym(5350)))
// Dep: FixedPoint5353 = FixPt_Mul(Sym(5351),Sym(5352))
DFEVar FixedPoint5353 = FixedPoint5351 * FixedPoint5352;
// Dep: FixedPoint5356 = FixPt_Mul(Sym(5352),Sym(5355))
DFEVar FixedPoint5356 = FixedPoint5352 * FixedPoint5355;
// Dep: const4_FixedPoint3930 = ConstFixPt(4,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint3931 = ConstFixPt(96,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const384_FixedPoint3933 = ConstFixPt(384,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint461 = ConstFixPt(512,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint11 = ConstFixPt(1,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: Bit620 = ConstBit(true)
DFEVar Bit620 = constant.var( true );
// Dep: DRAM5360 = Reflect(Offchip_new(Sym(5358)),Summary(mutable),List())
// Dep: const9216_FixedPoint3935 = ConstFixPt(9216,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,MatMult_outer$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM5354 = Reflect(Offchip_new(Sym(5353)),Summary(mutable),List())
// Dep: DRAM5357 = Reflect(Offchip_new(Sym(5356)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(5775) -> Map(), Sym(5716) -> Map(Sym(4793) -> _chain[0].read()), Sym(5826) -> Map(Sym(4821) -> _chain[1].read()), Sym(5824) -> Map(Sym(4948) -> _chain[1].read()), Sym(5822) -> Map(Sym(4948) -> _chain[0].read()), Sym(5803) -> Map(Sym(4895) -> _chain[0].read()), Sym(5793) -> Map(), Sym(5771) -> Map(Sym(4855) -> _chain[1].read()), Sym(5816) -> Map(), Sym(5714) -> Map(), Sym(5761) -> Map(), Sym(5740) -> Map(), Sym(5724) -> Map(Sym(4793) -> _chain[1].read()), Sym(5750) -> Map(Sym(4827) -> _chain[1].read()), Sym(5805) -> Map(Sym(4821) -> _chain[0].read()), Sym(5742) -> Map(Sym(4827) -> _chain[0].read()), Sym(5763) -> Map(Sym(4855) -> _chain[0].read())) */
DFEVar void5832_en = top_en;
top_done <== void5832_done;
// Hwblock: childrenOf(void5832) = List(Sym(5830))
/* void5832_SeqSM void5832 { */
SMIO void5832_sm = addStateMachine("void5832_sm", new void5832_SeqSM(this));
    void5832_sm.connectInput("sm_en", void5832_en);
    void5832_done <== stream.offset(void5832_sm.getOutput("sm_done"),-1);
void5832_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void5832_rst_en = void5832_sm.getOutput("rst_en");
void5832_sm.connectInput("s0_done", seq5830_done);
seq5830_en <== void5832_sm.getOutput("s0_en");
DFEVar void5832_datapath_en = void5832_en & ~void5832_rst_en;
DFEVar void5832_ctr_en = void5832_datapath_en;
/* } void5832_SeqSM void5832 */
/* ParPipeForeach seq5830 = ParPipeForeach(CounterChain5704) { */
{
/* SeqSM to be emitted */
/* seq5830_SeqSM seq5830 { */
SMIO seq5830_sm = addStateMachine("seq5830_sm", new seq5830_SeqSM(this));
    seq5830_sm.connectInput("sm_en", seq5830_en);
    seq5830_done <== stream.offset(seq5830_sm.getOutput("sm_done"),-1);
DFEVar seq5830_niter = ((FixedPoint5700 - const0_FixedPoint189) / (const4_FixedPoint3930 * 1)) * ((FixedPoint5701 - const0_FixedPoint189) / (const96_FixedPoint3931 * 1));
seq5830_sm.connectInput("sm_numIter", seq5830_niter.cast(dfeUInt(32)));
DFEVar seq5830_rst_en = seq5830_sm.getOutput("rst_en");
seq5830_sm.connectInput("s0_done", metapipe5726_done);
metapipe5726_en <== seq5830_sm.getOutput("s0_en");
seq5830_sm.connectInput("s1_done", metapipe5828_done);
metapipe5828_en <== seq5830_sm.getOutput("s1_en");
DFEVar Counter5702_max_0 = FixedPoint5700;
DFEVar Counter5703_max_1 = FixedPoint5701;
DFEVar seq5830_datapath_en = seq5830_en;
DFEVar seq5830_ctr_en = metapipe5828_done;
/* CustomCounterChain { */
DFEVar CounterChain5704_en = metapipe5828_done;
DFEVar[] CounterChain5704_max = {FixedPoint5700,FixedPoint5701};
int[] CounterChain5704_strides = {4,96};
OffsetExpr CounterChain5704_offset = stream.makeOffsetAutoLoop("CounterChain5704_offset");
SMIO CounterChain5704 = addStateMachine("CounterChain5704_sm", new CounterChain5704_CtrSM(owner, CounterChain5704_strides)); // gap = 0
CounterChain5704.connectInput("en", CounterChain5704_en);
CounterChain5704.connectInput("reset", seq5830_done);
DFEVar CounterChain5704_maxed = CounterChain5704.getOutput("saturated");
DFEVar CounterChain5704_done = stream.offset(CounterChain5704.getOutput("done"), -1);
OffsetExpr CounterChain5704_additionalOffset = new OffsetExpr();
CounterChain5704.connectInput("max0", CounterChain5704_max[0]);
DFEVar Counter5702 = CounterChain5704.getOutput("counter0");
CounterChain5704.connectInput("max1", CounterChain5704_max[1]);
DFEVar Counter5703 = CounterChain5704.getOutput("counter1");
/* } CustomCounterChain */
/* } seq5830_SeqSM seq5830 */
DFEVar seq5830_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4787 = Counter5702;
DFEVar FixedPoint4788 = Counter5703;
// FIFO FIFO5706 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint461, const0_FixedPoint189);
DFEVector<DFEVar> FIFO5706_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO5706_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO5706_readEn = dfeBool().newInstance(this);
DFEVar FIFO5706_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe5726 = ParPipeForeach(CounterChain5708) { */
{
/* MPSM to be emitted */
/* metapipe5726_MPSM metapipe5726 { */
SMIO metapipe5726_sm = addStateMachine("metapipe5726_sm", new metapipe5726_MPSM(this));
    metapipe5726_sm.connectInput("sm_en", metapipe5726_en);
    metapipe5726_done <== stream.offset(metapipe5726_sm.getOutput("sm_done"),-1);
DFEVar metapipe5726_niter = ((const4_FixedPoint3930 - const0_FixedPoint189) / (const1_FixedPoint11 * 1));
metapipe5726_sm.connectInput("sm_numIter", metapipe5726_niter.cast(dfeUInt(32)));
DFEVar metapipe5726_rst_en = metapipe5726_sm.getOutput("rst_en");
metapipe5726_sm.connectInput("s0_done", void5714_done);
void5714_en <== metapipe5726_sm.getOutput("s0_en");
metapipe5726_sm.connectInput("s1_done", void5716_done);
void5716_en <== metapipe5726_sm.getOutput("s1_en");
metapipe5726_sm.connectInput("s2_done", pipe5724_done);
pipe5724_en <== metapipe5726_sm.getOutput("s2_en");
DFEVar Counter5707_max_0 = const4_FixedPoint3930;
DFEVar metapipe5726_datapath_en = metapipe5726_en;
DFEVar metapipe5726_ctr_en = void5714_done;
/* CustomCounterChain { */
DFEVar CounterChain5708_en = void5714_done;
DFEVar[] CounterChain5708_max = {Counter5707_max_0};
int[] CounterChain5708_strides = {1};
OffsetExpr CounterChain5708_offset = stream.makeOffsetAutoLoop("CounterChain5708_offset");
SMIO CounterChain5708 = addStateMachine("CounterChain5708_sm", new CounterChain5708_CtrSM(owner, CounterChain5708_strides)); // gap = 0
CounterChain5708.connectInput("en", CounterChain5708_en);
CounterChain5708.connectInput("reset", metapipe5726_done);
DFEVar CounterChain5708_maxed = CounterChain5708.getOutput("saturated");
DFEVar CounterChain5708_done = stream.offset(CounterChain5708.getOutput("done"), -1);
OffsetExpr CounterChain5708_additionalOffset = new OffsetExpr();
CounterChain5708.connectInput("max0", CounterChain5708_max[0]);
DFEVar Counter5707 = CounterChain5708.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5726_MPSM metapipe5726 */
DFEVar metapipe5726_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4793 = Counter5707;
DblBufReg[] FixedPoint4793_chain = spatialUtils.getRegChain(
              "metapipe5726_FixedPoint4793", 3, FixedPoint4793,
              new DFEVar[]{void5714_done,void5716_done,pipe5724_done});
// Unit pipe writtenIn(void5714) = List(Sym(5709))
//   reg5709 = Reflect(Reg_new(Sym(189)),Summary(mutable),List()), isAccum(reg5709) = false
/* PipeSM void5714 { */
OffsetExpr void5714_offset = stream.makeOffsetAutoLoop("void5714_offset");
SMIO void5714_sm = addStateMachine("void5714_sm", new PipeSM(this, 1));
    void5714_sm.connectInput("sm_en", void5714_en);
    void5714_done <== stream.offset(void5714_sm.getOutput("sm_done"),-1-void5714_offset);
DFEVar void5714_rst_en = void5714_sm.getOutput("rst_en");
void5714_sm.connectInput("rst_done", void5714_rst_done);
void5714_rst_done <== stream.offset(void5714_rst_en, -void5714_offset-1);
void5714_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5714_sm.connectInput("ctr_done", stream.offset(void5714_sm.getOutput("ctr_en"), -1));
DFEVar void5714_datapath_en = void5714_en & ~void5714_rst_en;
DFEVar void5714_ctr_en = void5714_datapath_en;
/* } PipeSM void5714 */
/* Block void5714 Unitpipe { */
{
DFEVar FixedPoint4795 = FixedPoint4787 + FixedPoint4793;
DFEVar FixedPoint5710 = FixedPoint4795 * FixedPoint5355;
DFEVar FixedPoint5711 = FixedPoint5710 + FixedPoint4788;
/* Reg_write { */
reg5709_0_lib.write(FixedPoint5711, void5714_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@279a22a, numDuplicates = 1 */
}
/* } Block void5714 Unitpipe */
DFEVar FixedPoint5715 = reg5709_0_lib.read(1); // reg read
MemoryCmdGenLib void5716 = new MemoryCmdGenLib(
              this,
              void5716_en, void5716_done,
              DRAM5360, FixedPoint5715,
              "DRAM5360_void5716_in",
              96,
              FIFO5706_readEn, FIFO5706_rdata);
FIFO5706_writeEn <== void5716_en;
FIFO5706_wdata <== FIFO5706_rdata;
/* ParPipeForeach pipe5724 = ParPipeForeach(CounterChain5718) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5724 { */
OffsetExpr pipe5724_offset = stream.makeOffsetAutoLoop("pipe5724_offset");
SMIO pipe5724_sm = addStateMachine("pipe5724_sm", new PipeSM(this, 1));
    pipe5724_sm.connectInput("sm_en", pipe5724_en);
    pipe5724_done <== stream.offset(pipe5724_sm.getOutput("sm_done"),-1-pipe5724_offset);
DFEVar pipe5724_rst_en = pipe5724_sm.getOutput("rst_en");
pipe5724_sm.connectInput("rst_done", pipe5724_rst_done);
pipe5724_rst_done <== stream.offset(pipe5724_rst_en, -pipe5724_offset-1);
pipe5724_sm.connectInput("sm_maxIn_0", const96_FixedPoint3931);
DFEVar Counter5717_max_0 = pipe5724_sm.getOutput("ctr_maxOut_0");
pipe5724_sm.connectInput("ctr_done", CounterChain5718_done);
DFEVar pipe5724_datapath_en = pipe5724_sm.getOutput("ctr_en");
DFEVar pipe5724_ctr_en = pipe5724_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5718_en = pipe5724_datapath_en;
DFEVar[] CounterChain5718_max = {Counter5717_max_0};
int[] CounterChain5718_strides = {1};
OffsetExpr CounterChain5718_offset = stream.makeOffsetAutoLoop("CounterChain5718_offset");
SMIO CounterChain5718 = addStateMachine("CounterChain5718_sm", new CounterChain5718_CtrSM(owner, CounterChain5718_strides)); // gap = 0
CounterChain5718.connectInput("en", CounterChain5718_en);
CounterChain5718.connectInput("reset", pipe5724_done);
DFEVar CounterChain5718_maxed = CounterChain5718.getOutput("saturated");
CounterChain5718_done <== stream.offset(CounterChain5718.getOutput("done"), -1);
OffsetExpr CounterChain5718_additionalOffset = new OffsetExpr();
CounterChain5718.connectInput("max0", CounterChain5718_max[0]);
DFEVar Counter5717 = CounterChain5718.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe5724 */
DFEVar pipe5724_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4805 = Counter5717;
// DFEVar Vector5719 = Par_pop_fifo(FIFO5706, 1);
FIFO5706_readEn <== pipe5724_ctr_en;
DFEVector<DFEVar> Vector5719 = FIFO5706_rdata;
DFEVar FixedPoint4808 = FixedPoint4793_chain[1].read() * const96_FixedPoint3931;
DFEVar FixedPoint4809 = FixedPoint4808 + FixedPoint4805;
DFEVector<DFEVar> Vector4811 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4809));
DFEVar FixedPoint5720 = Vector5719[0];
DFEVector<DFEVar> Vector5721 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5720));
/* Bram_store { */
BRAM5705_0.connectWport(stream.offset(FixedPoint4793_chain[1].read(), -pipe5724_offset), stream.offset(FixedPoint4805, -pipe5724_offset),
                stream.offset(Vector5721, -pipe5724_offset), stream.offset(pipe5724_datapath_en & pipe5724_redLoop_done /*wtf pipe is ParPipeForeach(Sym(5718),Block(Sym(5723)),List(List(Sym(4805))))*/, -pipe5724_offset), new int[] {0}); //w4.2
BRAM5705_1.connectBroadcastWport(stream.offset(FixedPoint4793_chain[1].read(), -pipe5724_offset), stream.offset(FixedPoint4805, -pipe5724_offset),
                stream.offset(Vector5721, -pipe5724_offset), stream.offset(pipe5724_datapath_en & pipe5724_redLoop_done /*wtf pipe is ParPipeForeach(Sym(5718),Block(Sym(5723)),List(List(Sym(4805))))*/, -pipe5724_offset), new int[] {0,1}); //w4.2
/* } Bram_store */
}
/* } ParPipeForeach pipe5724 */
}
/* } ParPipeForeach metapipe5726 */
/* ParPipeForeach metapipe5828 = ParPipeForeach(CounterChain5729) { */
{
/* MPSM to be emitted */
/* metapipe5828_MPSM metapipe5828 { */
SMIO metapipe5828_sm = addStateMachine("metapipe5828_sm", new metapipe5828_MPSM(this));
    metapipe5828_sm.connectInput("sm_en", metapipe5828_en);
    metapipe5828_done <== stream.offset(metapipe5828_sm.getOutput("sm_done"),-1);
DFEVar metapipe5828_niter = ((FixedPoint5727 - const0_FixedPoint189) / (const96_FixedPoint3931 * 1));
metapipe5828_sm.connectInput("sm_numIter", metapipe5828_niter.cast(dfeUInt(32)));
DFEVar metapipe5828_rst_en = metapipe5828_sm.getOutput("rst_en");
metapipe5828_sm.connectInput("s0_done", void5775_done);
void5775_en <== metapipe5828_sm.getOutput("s0_en");
metapipe5828_sm.connectInput("s1_done", metapipe5805_done);
metapipe5805_en <== metapipe5828_sm.getOutput("s1_en");
metapipe5828_sm.connectInput("s2_done", metapipe5826_done);
metapipe5826_en <== metapipe5828_sm.getOutput("s2_en");
DFEVar Counter5728_max_0 = FixedPoint5727;
DFEVar metapipe5828_datapath_en = metapipe5828_en;
DFEVar metapipe5828_ctr_en = void5775_done;
/* CustomCounterChain { */
DFEVar CounterChain5729_en = void5775_done;
DFEVar[] CounterChain5729_max = {Counter5728_max_0};
int[] CounterChain5729_strides = {96};
OffsetExpr CounterChain5729_offset = stream.makeOffsetAutoLoop("CounterChain5729_offset");
SMIO CounterChain5729 = addStateMachine("CounterChain5729_sm", new CounterChain5729_CtrSM(owner, CounterChain5729_strides)); // gap = 0
CounterChain5729.connectInput("en", CounterChain5729_en);
CounterChain5729.connectInput("reset", metapipe5828_done);
DFEVar CounterChain5729_maxed = CounterChain5729.getOutput("saturated");
DFEVar CounterChain5729_done = stream.offset(CounterChain5729.getOutput("done"), -1);
OffsetExpr CounterChain5729_additionalOffset = new OffsetExpr();
CounterChain5729.connectInput("max0", CounterChain5729_max[0]);
DFEVar Counter5728 = CounterChain5729.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5828_MPSM metapipe5828 */
DFEVar metapipe5828_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4821 = Counter5728;
DblBufReg[] FixedPoint4821_chain = spatialUtils.getRegChain(
              "metapipe5828_FixedPoint4821", 3, FixedPoint4821,
              new DFEVar[]{void5775_done,metapipe5805_done,metapipe5826_done});
/* void5775_ParSM void5775 { */
SMIO void5775_sm = addStateMachine("void5775_sm", new void5775_ParSM(this));
    void5775_sm.connectInput("sm_en", void5775_en);
    void5775_done <== stream.offset(void5775_sm.getOutput("sm_done"),-1);
void5775_sm.connectInput("s0_done", metapipe5752_done);
metapipe5752_en <== void5775_sm.getOutput("s0_en");
void5775_sm.connectInput("s1_done", metapipe5773_done);
metapipe5773_en <== void5775_sm.getOutput("s1_en");
/* } void5775_ParSM void5775 */
/* Block void5775 Parallel { */
{
// FIFO FIFO5732 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint461, const0_FixedPoint189);
DFEVector<DFEVar> FIFO5732_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO5732_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO5732_readEn = dfeBool().newInstance(this);
DFEVar FIFO5732_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe5752 = ParPipeForeach(CounterChain5734) { */
{
/* MPSM to be emitted */
/* metapipe5752_MPSM metapipe5752 { */
SMIO metapipe5752_sm = addStateMachine("metapipe5752_sm", new metapipe5752_MPSM(this));
    metapipe5752_sm.connectInput("sm_en", metapipe5752_en);
    metapipe5752_done <== stream.offset(metapipe5752_sm.getOutput("sm_done"),-1);
DFEVar metapipe5752_niter = ((const4_FixedPoint3930 - const0_FixedPoint189) / (const1_FixedPoint11 * 1));
metapipe5752_sm.connectInput("sm_numIter", metapipe5752_niter.cast(dfeUInt(32)));
DFEVar metapipe5752_rst_en = metapipe5752_sm.getOutput("rst_en");
metapipe5752_sm.connectInput("s0_done", void5740_done);
void5740_en <== metapipe5752_sm.getOutput("s0_en");
metapipe5752_sm.connectInput("s1_done", void5742_done);
void5742_en <== metapipe5752_sm.getOutput("s1_en");
metapipe5752_sm.connectInput("s2_done", pipe5750_done);
pipe5750_en <== metapipe5752_sm.getOutput("s2_en");
DFEVar Counter5733_max_0 = const4_FixedPoint3930;
DFEVar metapipe5752_datapath_en = metapipe5752_en;
DFEVar metapipe5752_ctr_en = void5740_done;
/* CustomCounterChain { */
DFEVar CounterChain5734_en = void5740_done;
DFEVar[] CounterChain5734_max = {const4_FixedPoint3930};
int[] CounterChain5734_strides = {1};
OffsetExpr CounterChain5734_offset = stream.makeOffsetAutoLoop("CounterChain5734_offset");
SMIO CounterChain5734 = addStateMachine("CounterChain5734_sm", new CounterChain5734_CtrSM(owner, CounterChain5734_strides)); // gap = 0
CounterChain5734.connectInput("en", CounterChain5734_en);
CounterChain5734.connectInput("reset", metapipe5752_done);
DFEVar CounterChain5734_maxed = CounterChain5734.getOutput("saturated");
DFEVar CounterChain5734_done = stream.offset(CounterChain5734.getOutput("done"), -1);
OffsetExpr CounterChain5734_additionalOffset = new OffsetExpr();
CounterChain5734.connectInput("max0", CounterChain5734_max[0]);
DFEVar Counter5733 = CounterChain5734.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5752_MPSM metapipe5752 */
DFEVar metapipe5752_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4827 = Counter5733;
DblBufReg[] FixedPoint4827_chain = spatialUtils.getRegChain(
              "metapipe5752_FixedPoint4827", 3, FixedPoint4827,
              new DFEVar[]{void5740_done,void5742_done,pipe5750_done});
// Unit pipe writtenIn(void5740) = List(Sym(5735))
//   reg5735 = Reflect(Reg_new(Sym(189)),Summary(mutable),List()), isAccum(reg5735) = false
/* PipeSM void5740 { */
OffsetExpr void5740_offset = stream.makeOffsetAutoLoop("void5740_offset");
SMIO void5740_sm = addStateMachine("void5740_sm", new PipeSM(this, 1));
    void5740_sm.connectInput("sm_en", void5740_en);
    void5740_done <== stream.offset(void5740_sm.getOutput("sm_done"),-1-void5740_offset);
DFEVar void5740_rst_en = void5740_sm.getOutput("rst_en");
void5740_sm.connectInput("rst_done", void5740_rst_done);
void5740_rst_done <== stream.offset(void5740_rst_en, -void5740_offset-1);
void5740_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5740_sm.connectInput("ctr_done", stream.offset(void5740_sm.getOutput("ctr_en"), -1));
DFEVar void5740_datapath_en = void5740_en & ~void5740_rst_en;
DFEVar void5740_ctr_en = void5740_datapath_en;
/* } PipeSM void5740 */
/* Block void5740 Unitpipe { */
{
DFEVar FixedPoint4829 = FixedPoint4787 + FixedPoint4827;
DFEVar FixedPoint5736 = FixedPoint4829 * FixedPoint5352;
DFEVar FixedPoint5737 = FixedPoint5736 + FixedPoint4821;
/* Reg_write { */
reg5735_0_lib.write(FixedPoint5737, void5740_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@279a22a, numDuplicates = 1 */
}
/* } Block void5740 Unitpipe */
DFEVar FixedPoint5741 = reg5735_0_lib.read(1); // reg read
MemoryCmdGenLib void5742 = new MemoryCmdGenLib(
              this,
              void5742_en, void5742_done,
              DRAM5354, FixedPoint5741,
              "DRAM5354_void5742_in",
              96,
              FIFO5732_readEn, FIFO5732_rdata);
FIFO5732_writeEn <== void5742_en;
FIFO5732_wdata <== FIFO5732_rdata;
/* ParPipeForeach pipe5750 = ParPipeForeach(CounterChain5744) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5750 { */
OffsetExpr pipe5750_offset = stream.makeOffsetAutoLoop("pipe5750_offset");
SMIO pipe5750_sm = addStateMachine("pipe5750_sm", new PipeSM(this, 1));
    pipe5750_sm.connectInput("sm_en", pipe5750_en);
    pipe5750_done <== stream.offset(pipe5750_sm.getOutput("sm_done"),-1-pipe5750_offset);
DFEVar pipe5750_rst_en = pipe5750_sm.getOutput("rst_en");
pipe5750_sm.connectInput("rst_done", pipe5750_rst_done);
pipe5750_rst_done <== stream.offset(pipe5750_rst_en, -pipe5750_offset-1);
pipe5750_sm.connectInput("sm_maxIn_0", const96_FixedPoint3931);
DFEVar Counter5743_max_0 = pipe5750_sm.getOutput("ctr_maxOut_0");
pipe5750_sm.connectInput("ctr_done", CounterChain5744_done);
DFEVar pipe5750_datapath_en = pipe5750_sm.getOutput("ctr_en");
DFEVar pipe5750_ctr_en = pipe5750_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5744_en = pipe5750_datapath_en;
DFEVar[] CounterChain5744_max = {Counter5743_max_0};
int[] CounterChain5744_strides = {1};
OffsetExpr CounterChain5744_offset = stream.makeOffsetAutoLoop("CounterChain5744_offset");
SMIO CounterChain5744 = addStateMachine("CounterChain5744_sm", new CounterChain5744_CtrSM(owner, CounterChain5744_strides)); // gap = 0
CounterChain5744.connectInput("en", CounterChain5744_en);
CounterChain5744.connectInput("reset", pipe5750_done);
DFEVar CounterChain5744_maxed = CounterChain5744.getOutput("saturated");
CounterChain5744_done <== stream.offset(CounterChain5744.getOutput("done"), -1);
OffsetExpr CounterChain5744_additionalOffset = new OffsetExpr();
CounterChain5744.connectInput("max0", CounterChain5744_max[0]);
DFEVar Counter5743 = CounterChain5744.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe5750 */
DFEVar pipe5750_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4839 = Counter5743;
// DFEVar Vector5745 = Par_pop_fifo(FIFO5732, 1);
FIFO5732_readEn <== pipe5750_ctr_en;
DFEVector<DFEVar> Vector5745 = FIFO5732_rdata;
DFEVar FixedPoint4842 = FixedPoint4827_chain[1].read() * const96_FixedPoint3931;
DFEVar FixedPoint4843 = FixedPoint4842 + FixedPoint4839;
DFEVector<DFEVar> Vector4845 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4843));
DFEVar FixedPoint5746 = Vector5745[0];
DFEVector<DFEVar> Vector5747 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5746));
/* Bram_store { */
BRAM5730_0.connectWport(FixedPoint4827_chain[1].read(), FixedPoint4839, Vector5747, pipe5750_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe5750 */
}
/* } ParPipeForeach metapipe5752 */
// FIFO FIFO5753 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint461, const0_FixedPoint189);
DFEVector<DFEVar> FIFO5753_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO5753_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO5753_readEn = dfeBool().newInstance(this);
DFEVar FIFO5753_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe5773 = ParPipeForeach(CounterChain5755) { */
{
/* MPSM to be emitted */
/* metapipe5773_MPSM metapipe5773 { */
SMIO metapipe5773_sm = addStateMachine("metapipe5773_sm", new metapipe5773_MPSM(this));
    metapipe5773_sm.connectInput("sm_en", metapipe5773_en);
    metapipe5773_done <== stream.offset(metapipe5773_sm.getOutput("sm_done"),-1);
DFEVar metapipe5773_niter = ((const96_FixedPoint3931 - const0_FixedPoint189) / (const1_FixedPoint11 * 1));
metapipe5773_sm.connectInput("sm_numIter", metapipe5773_niter.cast(dfeUInt(32)));
DFEVar metapipe5773_rst_en = metapipe5773_sm.getOutput("rst_en");
metapipe5773_sm.connectInput("s0_done", void5761_done);
void5761_en <== metapipe5773_sm.getOutput("s0_en");
metapipe5773_sm.connectInput("s1_done", void5763_done);
void5763_en <== metapipe5773_sm.getOutput("s1_en");
metapipe5773_sm.connectInput("s2_done", pipe5771_done);
pipe5771_en <== metapipe5773_sm.getOutput("s2_en");
DFEVar Counter5754_max_0 = const96_FixedPoint3931;
DFEVar metapipe5773_datapath_en = metapipe5773_en;
DFEVar metapipe5773_ctr_en = void5761_done;
/* CustomCounterChain { */
DFEVar CounterChain5755_en = void5761_done;
DFEVar[] CounterChain5755_max = {const96_FixedPoint3931};
int[] CounterChain5755_strides = {1};
OffsetExpr CounterChain5755_offset = stream.makeOffsetAutoLoop("CounterChain5755_offset");
SMIO CounterChain5755 = addStateMachine("CounterChain5755_sm", new CounterChain5755_CtrSM(owner, CounterChain5755_strides)); // gap = 0
CounterChain5755.connectInput("en", CounterChain5755_en);
CounterChain5755.connectInput("reset", metapipe5773_done);
DFEVar CounterChain5755_maxed = CounterChain5755.getOutput("saturated");
DFEVar CounterChain5755_done = stream.offset(CounterChain5755.getOutput("done"), -1);
OffsetExpr CounterChain5755_additionalOffset = new OffsetExpr();
CounterChain5755.connectInput("max0", CounterChain5755_max[0]);
DFEVar Counter5754 = CounterChain5755.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5773_MPSM metapipe5773 */
DFEVar metapipe5773_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4855 = Counter5754;
DblBufReg[] FixedPoint4855_chain = spatialUtils.getRegChain(
              "metapipe5773_FixedPoint4855", 3, FixedPoint4855,
              new DFEVar[]{void5761_done,void5763_done,pipe5771_done});
// Unit pipe writtenIn(void5761) = List(Sym(5756))
//   reg5756 = Reflect(Reg_new(Sym(189)),Summary(mutable),List()), isAccum(reg5756) = false
/* PipeSM void5761 { */
OffsetExpr void5761_offset = stream.makeOffsetAutoLoop("void5761_offset");
SMIO void5761_sm = addStateMachine("void5761_sm", new PipeSM(this, 1));
    void5761_sm.connectInput("sm_en", void5761_en);
    void5761_done <== stream.offset(void5761_sm.getOutput("sm_done"),-1-void5761_offset);
DFEVar void5761_rst_en = void5761_sm.getOutput("rst_en");
void5761_sm.connectInput("rst_done", void5761_rst_done);
void5761_rst_done <== stream.offset(void5761_rst_en, -void5761_offset-1);
void5761_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5761_sm.connectInput("ctr_done", stream.offset(void5761_sm.getOutput("ctr_en"), -1));
DFEVar void5761_datapath_en = void5761_en & ~void5761_rst_en;
DFEVar void5761_ctr_en = void5761_datapath_en;
/* } PipeSM void5761 */
/* Block void5761 Unitpipe { */
{
DFEVar FixedPoint4857 = FixedPoint4821 + FixedPoint4855;
DFEVar FixedPoint5757 = FixedPoint4857 * FixedPoint5355;
DFEVar FixedPoint5758 = FixedPoint5757 + FixedPoint4788;
/* Reg_write { */
reg5756_0_lib.write(FixedPoint5758, void5761_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@279a22a, numDuplicates = 1 */
}
/* } Block void5761 Unitpipe */
DFEVar FixedPoint5762 = reg5756_0_lib.read(1); // reg read
MemoryCmdGenLib void5763 = new MemoryCmdGenLib(
              this,
              void5763_en, void5763_done,
              DRAM5357, FixedPoint5762,
              "DRAM5357_void5763_in",
              96,
              FIFO5753_readEn, FIFO5753_rdata);
FIFO5753_writeEn <== void5763_en;
FIFO5753_wdata <== FIFO5753_rdata;
/* ParPipeForeach pipe5771 = ParPipeForeach(CounterChain5765) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5771 { */
OffsetExpr pipe5771_offset = stream.makeOffsetAutoLoop("pipe5771_offset");
SMIO pipe5771_sm = addStateMachine("pipe5771_sm", new PipeSM(this, 1));
    pipe5771_sm.connectInput("sm_en", pipe5771_en);
    pipe5771_done <== stream.offset(pipe5771_sm.getOutput("sm_done"),-1-pipe5771_offset);
DFEVar pipe5771_rst_en = pipe5771_sm.getOutput("rst_en");
pipe5771_sm.connectInput("rst_done", pipe5771_rst_done);
pipe5771_rst_done <== stream.offset(pipe5771_rst_en, -pipe5771_offset-1);
pipe5771_sm.connectInput("sm_maxIn_0", const96_FixedPoint3931);
DFEVar Counter5764_max_0 = pipe5771_sm.getOutput("ctr_maxOut_0");
pipe5771_sm.connectInput("ctr_done", CounterChain5765_done);
DFEVar pipe5771_datapath_en = pipe5771_sm.getOutput("ctr_en");
DFEVar pipe5771_ctr_en = pipe5771_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5765_en = pipe5771_datapath_en;
DFEVar[] CounterChain5765_max = {Counter5764_max_0};
int[] CounterChain5765_strides = {1};
OffsetExpr CounterChain5765_offset = stream.makeOffsetAutoLoop("CounterChain5765_offset");
SMIO CounterChain5765 = addStateMachine("CounterChain5765_sm", new CounterChain5765_CtrSM(owner, CounterChain5765_strides)); // gap = 0
CounterChain5765.connectInput("en", CounterChain5765_en);
CounterChain5765.connectInput("reset", pipe5771_done);
DFEVar CounterChain5765_maxed = CounterChain5765.getOutput("saturated");
CounterChain5765_done <== stream.offset(CounterChain5765.getOutput("done"), -1);
OffsetExpr CounterChain5765_additionalOffset = new OffsetExpr();
CounterChain5765.connectInput("max0", CounterChain5765_max[0]);
DFEVar Counter5764 = CounterChain5765.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe5771 */
DFEVar pipe5771_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4867 = Counter5764;
// DFEVar Vector5766 = Par_pop_fifo(FIFO5753, 1);
FIFO5753_readEn <== pipe5771_ctr_en;
DFEVector<DFEVar> Vector5766 = FIFO5753_rdata;
DFEVar FixedPoint4870 = FixedPoint4855_chain[1].read() * const96_FixedPoint3931;
DFEVar FixedPoint4871 = FixedPoint4870 + FixedPoint4867;
DFEVector<DFEVar> Vector4873 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4871));
DFEVar FixedPoint5767 = Vector5766[0];
DFEVector<DFEVar> Vector5768 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5767));
/* Bram_store { */
BRAM5731_0.connectWport(FixedPoint4855_chain[1].read(), FixedPoint4867, Vector5768, pipe5771_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe5771 */
}
/* } ParPipeForeach metapipe5773 */
}
/* } Block void5775 Parallel */
/* ParPipeReduce metapipe5805 = ParPipeReduce(CounterChain5777, BRAM5705) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe5805 controller { */
/* metapipe5805_MPSM metapipe5805 { */
SMIO metapipe5805_sm = addStateMachine("metapipe5805_sm", new metapipe5805_MPSM(this));
    metapipe5805_sm.connectInput("sm_en", metapipe5805_en);
    metapipe5805_done <== stream.offset(metapipe5805_sm.getOutput("sm_done"),-1);
DFEVar metapipe5805_niter = ((const96_FixedPoint3931 - const0_FixedPoint189) / (const1_FixedPoint11 * 1));
metapipe5805_sm.connectInput("sm_numIter", metapipe5805_niter.cast(dfeUInt(32)));
DFEVar metapipe5805_rst_en = metapipe5805_sm.getOutput("rst_en");
metapipe5805_sm.connectInput("s0_done", pipe5793_done);
pipe5793_en <== metapipe5805_sm.getOutput("s0_en");
metapipe5805_sm.connectInput("s1_done", pipe5803_done);
pipe5803_en <== metapipe5805_sm.getOutput("s1_en");
DFEVar Counter5776_max_0 = const96_FixedPoint3931;
DFEVar metapipe5805_datapath_en = metapipe5805_en;
DFEVar metapipe5805_ctr_en = pipe5793_done;
/* CustomCounterChain { */
DFEVar CounterChain5777_en = pipe5793_done;
DFEVar[] CounterChain5777_max = {Counter5776_max_0};
int[] CounterChain5777_strides = {1};
OffsetExpr CounterChain5777_offset = stream.makeOffsetAutoLoop("CounterChain5777_offset");
SMIO CounterChain5777 = addStateMachine("CounterChain5777_sm", new CounterChain5777_CtrSM(owner, CounterChain5777_strides)); // gap = 0
CounterChain5777.connectInput("en", CounterChain5777_en);
CounterChain5777.connectInput("reset", metapipe5805_done);
DFEVar CounterChain5777_maxed = CounterChain5777.getOutput("saturated");
DFEVar CounterChain5777_done = stream.offset(CounterChain5777.getOutput("done"), -1);
OffsetExpr CounterChain5777_additionalOffset = new OffsetExpr();
CounterChain5777.connectInput("max0", CounterChain5777_max[0]);
DFEVar Counter5776 = CounterChain5777.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5805_MPSM metapipe5805 */
/* } metapipe5805 controller */
/* ParPipeReduce metapipe5805 par loop { */
DFEVar FixedPoint4895 = Counter5776;
/* } metapipe5805 par loop */
DblBufReg[] FixedPoint4895_chain = spatialUtils.getRegChain(
              "metapipe5805_FixedPoint4895", 2, FixedPoint4895,
              new DFEVar[]{pipe5793_done,pipe5803_done});
/* ParPipeReduce metapipe5805 func block { */
/* ParPipeForeach pipe5793 = ParPipeForeach(CounterChain5784) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5793 { */
OffsetExpr pipe5793_offset = stream.makeOffsetAutoLoop("pipe5793_offset");
SMIO pipe5793_sm = addStateMachine("pipe5793_sm", new PipeSM(this, 2));
    pipe5793_sm.connectInput("sm_en", pipe5793_en);
    pipe5793_done <== stream.offset(pipe5793_sm.getOutput("sm_done"),-1-pipe5793_offset);
DFEVar pipe5793_rst_en = pipe5793_sm.getOutput("rst_en");
pipe5793_sm.connectInput("rst_done", pipe5793_rst_done);
pipe5793_rst_done <== stream.offset(pipe5793_rst_en, -pipe5793_offset-1);
pipe5793_sm.connectInput("sm_maxIn_0", const4_FixedPoint3930);
DFEVar Counter5782_max_0 = pipe5793_sm.getOutput("ctr_maxOut_0");
pipe5793_sm.connectInput("sm_maxIn_1", const96_FixedPoint3931);
DFEVar Counter5783_max_1 = pipe5793_sm.getOutput("ctr_maxOut_1");
pipe5793_sm.connectInput("ctr_done", CounterChain5784_done);
DFEVar pipe5793_datapath_en = pipe5793_sm.getOutput("ctr_en");
DFEVar pipe5793_ctr_en = pipe5793_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5784_en = pipe5793_datapath_en;
DFEVar[] CounterChain5784_max = {Counter5782_max_0,Counter5783_max_1};
int[] CounterChain5784_strides = {1,1};
OffsetExpr CounterChain5784_offset = stream.makeOffsetAutoLoop("CounterChain5784_offset");
SMIO CounterChain5784 = addStateMachine("CounterChain5784_sm", new CounterChain5784_CtrSM(owner, CounterChain5784_strides)); // gap = 0
CounterChain5784.connectInput("en", CounterChain5784_en);
CounterChain5784.connectInput("reset", pipe5793_done);
DFEVar CounterChain5784_maxed = CounterChain5784.getOutput("saturated");
CounterChain5784_done <== stream.offset(CounterChain5784.getOutput("done"), -1);
OffsetExpr CounterChain5784_additionalOffset = new OffsetExpr();
CounterChain5784.connectInput("max0", CounterChain5784_max[0]);
DFEVar Counter5782 = CounterChain5784.getOutput("counter0");
CounterChain5784.connectInput("max1", CounterChain5784_max[1]);
DFEVar Counter5783 = CounterChain5784.getOutput("counter1");
/* } CustomCounterChain */
/* } PipeSM pipe5793 */
DFEVar pipe5793_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4900 = Counter5782;
DFEVar FixedPoint4901 = Counter5783;
DFEVar FixedPoint4902 = FixedPoint4900 * const96_FixedPoint3931;
DFEVar FixedPoint4903 = FixedPoint4902 + FixedPoint4895;
DFEVector<DFEVar> Vector4904 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4903));
/* Bram_load { */
DFEVector<DFEVar> Vector5785 = new DFEVectorType<DFEVar>(BRAM5730_0.type, 1).newInstance(this, Arrays.asList(BRAM5730_0.connectRport(FixedPoint4900, FixedPoint4895, new int[] {1}))); //r5
/* } Bram_load */
DFEVar FixedPoint4907 = FixedPoint4895 * const96_FixedPoint3931;
DFEVar FixedPoint4908 = FixedPoint4907 + FixedPoint4901;
DFEVector<DFEVar> Vector4909 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4908));
/* Bram_load { */
DFEVector<DFEVar> Vector5786 = new DFEVectorType<DFEVar>(BRAM5731_0.type, 1).newInstance(this, Arrays.asList(BRAM5731_0.connectRport(FixedPoint4895, FixedPoint4901, new int[] {1}))); //r5
/* } Bram_load */
DFEVar FixedPoint4912 = FixedPoint4902 + FixedPoint4901;
DFEVector<DFEVar> Vector4915 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4912));
DFEVar FixedPoint5787 = Vector5785[0];
DFEVar FixedPoint5788 = Vector5786[0];
DFEVar FixedPoint5789 = FixedPoint5787 * FixedPoint5788;
DFEVector<DFEVar> Vector5790 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5789));
/* Bram_store { */
BRAM5781_0.connectWport(FixedPoint4900, FixedPoint4901, Vector5790, pipe5793_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe5793 */
/* ParPipeForeach pipe5803 = ParPipeForeach(CounterChain5780) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5803 { */
OffsetExpr pipe5803_offset = stream.makeOffsetAutoLoop("pipe5803_offset");
SMIO pipe5803_sm = addStateMachine("pipe5803_sm", new PipeSM(this, 2));
    pipe5803_sm.connectInput("sm_en", pipe5803_en);
    pipe5803_done <== stream.offset(pipe5803_sm.getOutput("sm_done"),-1-pipe5803_offset);
DFEVar pipe5803_rst_en = pipe5803_sm.getOutput("rst_en");
pipe5803_sm.connectInput("rst_done", pipe5803_rst_done);
pipe5803_rst_done <== stream.offset(pipe5803_rst_en, -pipe5803_offset-1);
pipe5803_sm.connectInput("sm_maxIn_0", const4_FixedPoint3930);
DFEVar Counter5778_max_0 = pipe5803_sm.getOutput("ctr_maxOut_0");
pipe5803_sm.connectInput("sm_maxIn_1", const96_FixedPoint3931);
DFEVar Counter5779_max_1 = pipe5803_sm.getOutput("ctr_maxOut_1");
pipe5803_sm.connectInput("ctr_done", CounterChain5780_done);
DFEVar pipe5803_datapath_en = pipe5803_sm.getOutput("ctr_en");
DFEVar pipe5803_ctr_en = pipe5803_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5780_en = pipe5803_datapath_en;
DFEVar[] CounterChain5780_max = {Counter5778_max_0,Counter5779_max_1};
int[] CounterChain5780_strides = {1,1};
OffsetExpr CounterChain5780_offset = stream.makeOffsetAutoLoop("CounterChain5780_offset");
SMIO CounterChain5780 = addStateMachine("CounterChain5780_sm", new CounterChain5780_CtrSM(owner, CounterChain5780_strides)); // gap = 0
CounterChain5780.connectInput("en", CounterChain5780_en);
CounterChain5780.connectInput("reset", pipe5803_done);
DFEVar CounterChain5780_maxed = CounterChain5780.getOutput("saturated");
CounterChain5780_done <== stream.offset(CounterChain5780.getOutput("done"), -1);
OffsetExpr CounterChain5780_additionalOffset = new OffsetExpr();
CounterChain5780.connectInput("max0", CounterChain5780_max[0]);
DFEVar Counter5778 = CounterChain5780.getOutput("counter0");
CounterChain5780.connectInput("max1", CounterChain5780_max[1]);
DFEVar Counter5779 = CounterChain5780.getOutput("counter1");
/* } CustomCounterChain */
/* } PipeSM pipe5803 */
DFEVar pipe5803_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4922 = Counter5778;
DFEVar FixedPoint4923 = Counter5779;
DFEVar FixedPoint5799 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
DFEVar FixedPoint4926 = FixedPoint4922 * const96_FixedPoint3931;
DFEVar FixedPoint4927 = FixedPoint4926 + FixedPoint4923;
DFEVector<DFEVar> Vector4928 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4927));
/* Bram_load { */
DFEVector<DFEVar> Vector5794 = new DFEVectorType<DFEVar>(BRAM5781_0.type, 1).newInstance(this, Arrays.asList(BRAM5781_0.connectRport(FixedPoint4922, FixedPoint4923, new int[] {1}))); //r5
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector5795 = new DFEVectorType<DFEVar>(BRAM5705_0.type, 1).newInstance(this, Arrays.asList(BRAM5705_0.connectRport(FixedPoint4922, FixedPoint4923, new int[] {0}))); //r5
/* } Bram_load */
// FixedPoint5796 already emitted in pipe5803;
// Bit4921 already emitted in Sym(5803)
// Bit4924 already emitted in Sym(5803)
// Bit4925 already emitted in Sym(5803)
// Bit4934 already emitted in Sym(5803)
// Bit4935 already emitted in Sym(5803)
// FixedPoint5797 already emitted in pipe5803;
// FixedPoint5798 already emitted in Sym(5803)
// FixedPoint5799 already emitted in pipe5803;
DFEVector<DFEVar> Vector5800 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5799));
/* Bram_store { */
BRAM5705_0.connectWport(stream.offset(FixedPoint4922, -pipe5803_offset), stream.offset(FixedPoint4923, -pipe5803_offset),
                stream.offset(Vector5800, -pipe5803_offset), stream.offset(pipe5803_datapath_en & pipe5803_redLoop_done /*wtf pipe is ParPipeForeach(Sym(5780),Block(Sym(5802)),List(List(Sym(4922)), List(Sym(4923))))*/, -pipe5803_offset), new int[] {0}); //w4.2
BRAM5705_1.connectWport(stream.offset(FixedPoint4922, -pipe5803_offset), stream.offset(FixedPoint4923, -pipe5803_offset),
                stream.offset(Vector5800, -pipe5803_offset), stream.offset(pipe5803_datapath_en & pipe5803_redLoop_done /*wtf pipe is ParPipeForeach(Sym(5780),Block(Sym(5802)),List(List(Sym(4922)), List(Sym(4923))))*/, -pipe5803_offset), new int[] {0}); //w4.2
/* } Bram_store */
new pipe5803_reduce_kernel(owner , Vector5794,Vector5795 , FixedPoint5799 , FixedPoint4895_chain[0].read(),FixedPoint4922,FixedPoint4923,const0_FixedPoint189,const4_FixedPoint3930,const96_FixedPoint3931); // Reduce kernel
}
/* } ParPipeForeach pipe5803 */
/* } metapipe5805 func block */
}
/* } ParPipeReduce metapipe5805 */
// FIFO FIFO5806 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint461, const0_FixedPoint189);
DFEVector<DFEVar> FIFO5806_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO5806_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO5806_readEn = dfeBool().newInstance(this);
DFEVar FIFO5806_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe5826 = ParPipeForeach(CounterChain5808) { */
{
/* MPSM to be emitted */
/* metapipe5826_MPSM metapipe5826 { */
SMIO metapipe5826_sm = addStateMachine("metapipe5826_sm", new metapipe5826_MPSM(this));
    metapipe5826_sm.connectInput("sm_en", metapipe5826_en);
    metapipe5826_done <== stream.offset(metapipe5826_sm.getOutput("sm_done"),-1);
DFEVar metapipe5826_niter = ((const4_FixedPoint3930 - const0_FixedPoint189) / (const1_FixedPoint11 * 1));
metapipe5826_sm.connectInput("sm_numIter", metapipe5826_niter.cast(dfeUInt(32)));
DFEVar metapipe5826_rst_en = metapipe5826_sm.getOutput("rst_en");
metapipe5826_sm.connectInput("s0_done", pipe5816_done);
pipe5816_en <== metapipe5826_sm.getOutput("s0_en");
metapipe5826_sm.connectInput("s1_done", void5822_done);
void5822_en <== metapipe5826_sm.getOutput("s1_en");
metapipe5826_sm.connectInput("s2_done", void5824_done);
void5824_en <== metapipe5826_sm.getOutput("s2_en");
DFEVar Counter5807_max_0 = const4_FixedPoint3930;
DFEVar metapipe5826_datapath_en = metapipe5826_en;
DFEVar metapipe5826_ctr_en = pipe5816_done;
/* CustomCounterChain { */
DFEVar CounterChain5808_en = pipe5816_done;
DFEVar[] CounterChain5808_max = {Counter5807_max_0};
int[] CounterChain5808_strides = {1};
OffsetExpr CounterChain5808_offset = stream.makeOffsetAutoLoop("CounterChain5808_offset");
SMIO CounterChain5808 = addStateMachine("CounterChain5808_sm", new CounterChain5808_CtrSM(owner, CounterChain5808_strides)); // gap = 0
CounterChain5808.connectInput("en", CounterChain5808_en);
CounterChain5808.connectInput("reset", metapipe5826_done);
DFEVar CounterChain5808_maxed = CounterChain5808.getOutput("saturated");
DFEVar CounterChain5808_done = stream.offset(CounterChain5808.getOutput("done"), -1);
OffsetExpr CounterChain5808_additionalOffset = new OffsetExpr();
CounterChain5808.connectInput("max0", CounterChain5808_max[0]);
DFEVar Counter5807 = CounterChain5808.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5826_MPSM metapipe5826 */
DFEVar metapipe5826_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4948 = Counter5807;
DblBufReg[] FixedPoint4948_chain = spatialUtils.getRegChain(
              "metapipe5826_FixedPoint4948", 3, FixedPoint4948,
              new DFEVar[]{pipe5816_done,void5822_done,void5824_done});
/* ParPipeForeach pipe5816 = ParPipeForeach(CounterChain5810) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5816 { */
OffsetExpr pipe5816_offset = stream.makeOffsetAutoLoop("pipe5816_offset");
SMIO pipe5816_sm = addStateMachine("pipe5816_sm", new PipeSM(this, 1));
    pipe5816_sm.connectInput("sm_en", pipe5816_en);
    pipe5816_done <== stream.offset(pipe5816_sm.getOutput("sm_done"),-1-pipe5816_offset);
DFEVar pipe5816_rst_en = pipe5816_sm.getOutput("rst_en");
pipe5816_sm.connectInput("rst_done", pipe5816_rst_done);
pipe5816_rst_done <== stream.offset(pipe5816_rst_en, -pipe5816_offset-1);
pipe5816_sm.connectInput("sm_maxIn_0", const96_FixedPoint3931);
DFEVar Counter5809_max_0 = pipe5816_sm.getOutput("ctr_maxOut_0");
pipe5816_sm.connectInput("ctr_done", CounterChain5810_done);
DFEVar pipe5816_datapath_en = pipe5816_sm.getOutput("ctr_en");
DFEVar pipe5816_ctr_en = pipe5816_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5810_en = pipe5816_datapath_en;
DFEVar[] CounterChain5810_max = {Counter5809_max_0};
int[] CounterChain5810_strides = {1};
OffsetExpr CounterChain5810_offset = stream.makeOffsetAutoLoop("CounterChain5810_offset");
SMIO CounterChain5810 = addStateMachine("CounterChain5810_sm", new CounterChain5810_CtrSM(owner, CounterChain5810_strides)); // gap = 0
CounterChain5810.connectInput("en", CounterChain5810_en);
CounterChain5810.connectInput("reset", pipe5816_done);
DFEVar CounterChain5810_maxed = CounterChain5810.getOutput("saturated");
CounterChain5810_done <== stream.offset(CounterChain5810.getOutput("done"), -1);
OffsetExpr CounterChain5810_additionalOffset = new OffsetExpr();
CounterChain5810.connectInput("max0", CounterChain5810_max[0]);
DFEVar Counter5809 = CounterChain5810.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe5816 */
DFEVar pipe5816_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4951 = Counter5809;
DFEVar FixedPoint4952 = FixedPoint4948 * const96_FixedPoint3931;
DFEVar FixedPoint4953 = FixedPoint4952 + FixedPoint4951;
DFEVector<DFEVar> Vector4954 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4953));
/* Bram_load { */
DFEVector<DFEVar> Vector5811 = new DFEVectorType<DFEVar>(BRAM5705_1.type, 1).newInstance(this, Arrays.asList(BRAM5705_1.connectRport(FixedPoint4948, FixedPoint4951, new int[] {1}))); //r5
/* } Bram_load */
DFEVar Bit4958 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit4958 <== FixedPoint4951 < const96_FixedPoint3931;
DFEVector<DFEVar> Vector4959 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit4958));
DFEVar FixedPoint5812 = Vector5811[0];
DFEVector<DFEVar> Vector5813 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5812));
// Par_push_fifo(FIFO5806, Vector5813, Vector4959, true);
FIFO5806_writeEn <== pipe5816_ctr_en;
FIFO5806_wdata <== Vector5813;
}
/* } ParPipeForeach pipe5816 */
// Unit pipe writtenIn(void5822) = List(Sym(5817))
//   reg5817 = Reflect(Reg_new(Sym(189)),Summary(mutable),List()), isAccum(reg5817) = false
/* PipeSM void5822 { */
OffsetExpr void5822_offset = stream.makeOffsetAutoLoop("void5822_offset");
SMIO void5822_sm = addStateMachine("void5822_sm", new PipeSM(this, 1));
    void5822_sm.connectInput("sm_en", void5822_en);
    void5822_done <== stream.offset(void5822_sm.getOutput("sm_done"),-1-void5822_offset);
DFEVar void5822_rst_en = void5822_sm.getOutput("rst_en");
void5822_sm.connectInput("rst_done", void5822_rst_done);
void5822_rst_done <== stream.offset(void5822_rst_en, -void5822_offset-1);
void5822_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5822_sm.connectInput("ctr_done", stream.offset(void5822_sm.getOutput("ctr_en"), -1));
DFEVar void5822_datapath_en = void5822_en & ~void5822_rst_en;
DFEVar void5822_ctr_en = void5822_datapath_en;
/* } PipeSM void5822 */
/* Block void5822 Unitpipe { */
{
DFEVar FixedPoint4965 = FixedPoint4787 + FixedPoint4948_chain[0].read();
DFEVar FixedPoint5818 = FixedPoint4965 * FixedPoint5355;
DFEVar FixedPoint5819 = FixedPoint5818 + FixedPoint4788;
/* Reg_write { */
reg5817_0_lib.write(FixedPoint5819, void5822_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@279a22a, numDuplicates = 1 */
}
/* } Block void5822 Unitpipe */
DFEVar FixedPoint5823 = reg5817_0_lib.read(1); // reg read
// void5824: Offchip_store_cmd(DRAM5360,FIFO5806, FixedPoint5823, const96_FixedPoint3931, 1)
MemoryCmdStLib void5824 = new MemoryCmdStLib(
          this,
          void5824_en, void5824_done,
          DRAM5360, FixedPoint5823,
          "DRAM5360_void5824_out",
          const96_FixedPoint3931,
          FIFO5806_writeEn, FIFO5806_wdata);
FIFO5806_readEn <== void5824_en;
}
/* } ParPipeForeach metapipe5826 */
}
/* } ParPipeForeach metapipe5828 */
}
/* } ParPipeForeach seq5830 */
































// rdone signals for N-Buffers go here
reg5709_0_lib.connectStageCtrl(void5716_done, void5716_en, new int[] { 1 }); /*read*/
reg5709_0_lib.connectStageCtrl(void5714_done, void5714_en, new int[] { 0 }); /*write*/
reg5709_0_lib.connectUnwrittenPorts(new int[] {1});
reg5709_0_lib.connectUnreadPorts(new int[] {0});
reg5709_0_lib.connectUntouchedPorts(new int[] {});
reg5709_0_lib.connectDummyBroadcast();
BRAM5781_0.connectStageCtrl(pipe5803_done, pipe5803_en, new int[] { 1 }); /*read*/
BRAM5781_0.connectStageCtrl(pipe5793_done, pipe5793_en, new int[] { 0 }); /*write*/
BRAM5781_0.connectUnwrittenPorts(new int[] {1});
BRAM5781_0.connectUnreadPorts(new int[] {0});
BRAM5781_0.connectUntouchedPorts(new int[] {});
BRAM5781_0.connectDummyBroadcast();
BRAM5730_0.connectStageCtrl(metapipe5805_done, metapipe5805_en, new int[] { 1 }); /*read*/
BRAM5730_0.connectStageCtrl(void5775_done, void5775_en, new int[] { 0 }); /*write*/
BRAM5730_0.connectUnwrittenPorts(new int[] {1});
BRAM5730_0.connectUnreadPorts(new int[] {0});
BRAM5730_0.connectUntouchedPorts(new int[] {});
BRAM5730_0.connectDummyBroadcast();
reg5817_0_lib.connectStageCtrl(void5824_done, void5824_en, new int[] { 1 }); /*read*/
reg5817_0_lib.connectStageCtrl(void5822_done, void5822_en, new int[] { 0 }); /*write*/
reg5817_0_lib.connectUnwrittenPorts(new int[] {1});
reg5817_0_lib.connectUnreadPorts(new int[] {0});
reg5817_0_lib.connectUntouchedPorts(new int[] {});
reg5817_0_lib.connectDummyBroadcast();
reg5735_0_lib.connectStageCtrl(void5742_done, void5742_en, new int[] { 1 }); /*read*/
reg5735_0_lib.connectStageCtrl(void5740_done, void5740_en, new int[] { 0 }); /*write*/
reg5735_0_lib.connectUnwrittenPorts(new int[] {1});
reg5735_0_lib.connectUnreadPorts(new int[] {0});
reg5735_0_lib.connectUntouchedPorts(new int[] {});
reg5735_0_lib.connectDummyBroadcast();
BRAM5731_0.connectStageCtrl(metapipe5805_done, metapipe5805_en, new int[] { 1 }); /*read*/
BRAM5731_0.connectStageCtrl(void5775_done, void5775_en, new int[] { 0 }); /*write*/
BRAM5731_0.connectUnwrittenPorts(new int[] {1});
BRAM5731_0.connectUnreadPorts(new int[] {0});
BRAM5731_0.connectUntouchedPorts(new int[] {});
BRAM5731_0.connectDummyBroadcast();
BRAM5705_1.connectStageCtrl(metapipe5826_done, metapipe5826_en, new int[] { 1 }); /*read*/
BRAM5705_1.connectStageCtrl(metapipe5805_done, metapipe5805_en, new int[] { 0 }); /*write*/
BRAM5705_1.connectUnwrittenPorts(new int[] {1});
BRAM5705_1.connectUnreadPorts(new int[] {0});
BRAM5705_1.connectUntouchedPorts(new int[] {});
reg5756_0_lib.connectStageCtrl(void5763_done, void5763_en, new int[] { 1 }); /*read*/
reg5756_0_lib.connectStageCtrl(void5761_done, void5761_en, new int[] { 0 }); /*write*/
reg5756_0_lib.connectUnwrittenPorts(new int[] {1});
reg5756_0_lib.connectUnreadPorts(new int[] {0});
reg5756_0_lib.connectUntouchedPorts(new int[] {});
reg5756_0_lib.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
