package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar argin4580 = io.scalarInput("argin4580", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar argin4578 = io.scalarInput("argin4578", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar argin4579 = io.scalarInput("argin4579", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
DFEVar void5033_done = dfeBool().newInstance(this);
DFEVar metapipe5031_done = dfeBool().newInstance(this);
DFEVar metapipe5031_en = dfeBool().newInstance(this);
DFEVar void5029_done = dfeBool().newInstance(this);
DFEVar void5029_en = dfeBool().newInstance(this);
DFEVar metapipe4928_done = dfeBool().newInstance(this);
DFEVar metapipe4928_en = dfeBool().newInstance(this);
DFEVar metapipe5027_done = dfeBool().newInstance(this);
DFEVar metapipe5027_en = dfeBool().newInstance(this);
DFEVar void4876_done = dfeBool().newInstance(this);
DFEVar void4876_en = dfeBool().newInstance(this);
DFEVar seq4905_done = dfeBool().newInstance(this);
DFEVar seq4905_en = dfeBool().newInstance(this);
DFEVar metapipe4926_done = dfeBool().newInstance(this);
DFEVar metapipe4926_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM4830_0 = new NBufKernelLib(this, "BRAM4830_0",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,2}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM4831_0 = new NBufKernelLib(this, "BRAM4831_0",
                  96, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {2,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {false}, /*rowmajor read?*/
                  1, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
BramLib BRAM4832_0 = new BramLib(this, 4, 96, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ new int[] {1,1}, /* stride */ new int[] {96,1}, 1);
NBufKernelLib BRAM4832_1 = new NBufKernelLib(this, "BRAM4832_1",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true,true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
DFEVar metapipe4853_done = dfeBool().newInstance(this);
DFEVar metapipe4853_en = dfeBool().newInstance(this);
DFEVar metapipe4874_done = dfeBool().newInstance(this);
DFEVar metapipe4874_en = dfeBool().newInstance(this);
DFEVar void4841_done = dfeBool().newInstance(this);
DFEVar void4841_en = dfeBool().newInstance(this);
DFEVar void4843_done = dfeBool().newInstance(this);
DFEVar void4843_en = dfeBool().newInstance(this);
DFEVar pipe4851_done = dfeBool().newInstance(this);
DFEVar pipe4851_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg4836_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg4836_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void4841_rst_done = dfeBool().newInstance(this);
DFEVar FIFO4833_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe4851_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4845_done = dfeBool().newInstance(this);
DFEVar void4862_done = dfeBool().newInstance(this);
DFEVar void4862_en = dfeBool().newInstance(this);
DFEVar void4864_done = dfeBool().newInstance(this);
DFEVar void4864_en = dfeBool().newInstance(this);
DFEVar pipe4872_done = dfeBool().newInstance(this);
DFEVar pipe4872_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg4857_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg4857_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void4862_rst_done = dfeBool().newInstance(this);
DFEVar FIFO4854_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe4872_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4866_done = dfeBool().newInstance(this);
DFEVar pipe4896_done = dfeBool().newInstance(this);
DFEVar pipe4896_en = dfeBool().newInstance(this);
DFEVar void4903_done = dfeBool().newInstance(this);
DFEVar void4903_en = dfeBool().newInstance(this);
/* Reg_new { */
DelayLib reg4880_1_lib = new DelayLib(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0));
DFEVar reg4880_1 = reg4880_1_lib.read();
DFEVar reg4880_1_delayed = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Reg_new } */
DFEVar pipe4896_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4882_done = dfeBool().newInstance(this);
DFEVar void4903_rst_done = dfeBool().newInstance(this);
DFEVar pipe4916_done = dfeBool().newInstance(this);
DFEVar pipe4916_en = dfeBool().newInstance(this);
DFEVar void4922_done = dfeBool().newInstance(this);
DFEVar void4922_en = dfeBool().newInstance(this);
DFEVar void4924_done = dfeBool().newInstance(this);
DFEVar void4924_en = dfeBool().newInstance(this);
DFEVar pipe4916_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4910_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg4917_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg4917_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void4922_rst_done = dfeBool().newInstance(this);
DFEVar void4975_done = dfeBool().newInstance(this);
DFEVar void4975_en = dfeBool().newInstance(this);
DFEVar seq5004_done = dfeBool().newInstance(this);
DFEVar seq5004_en = dfeBool().newInstance(this);
DFEVar metapipe5025_done = dfeBool().newInstance(this);
DFEVar metapipe5025_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM4929_0 = new NBufKernelLib(this, "BRAM4929_0",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,2}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  1, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM4930_0 = new NBufKernelLib(this, "BRAM4930_0",
                  96, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {2,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {false}, /*rowmajor read?*/
                  1, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
BramLib BRAM4931_0 = new BramLib(this, 4, 96, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), /*banks*/ new int[] {1,1}, /* stride */ new int[] {96,1}, 1);
NBufKernelLib BRAM4931_1 = new NBufKernelLib(this, "BRAM4931_1",
                  4, 96, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new int[] {1,1}, new int[] {96,1}, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true,true}, /*rowmajor read?*/
                  1, 1 /*writepar, readpar*/);
/* } Bram_new */
DFEVar metapipe4952_done = dfeBool().newInstance(this);
DFEVar metapipe4952_en = dfeBool().newInstance(this);
DFEVar metapipe4973_done = dfeBool().newInstance(this);
DFEVar metapipe4973_en = dfeBool().newInstance(this);
DFEVar void4940_done = dfeBool().newInstance(this);
DFEVar void4940_en = dfeBool().newInstance(this);
DFEVar void4942_done = dfeBool().newInstance(this);
DFEVar void4942_en = dfeBool().newInstance(this);
DFEVar pipe4950_done = dfeBool().newInstance(this);
DFEVar pipe4950_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg4935_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg4935_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void4940_rst_done = dfeBool().newInstance(this);
DFEVar FIFO4932_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe4950_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4944_done = dfeBool().newInstance(this);
DFEVar void4961_done = dfeBool().newInstance(this);
DFEVar void4961_en = dfeBool().newInstance(this);
DFEVar void4963_done = dfeBool().newInstance(this);
DFEVar void4963_en = dfeBool().newInstance(this);
DFEVar pipe4971_done = dfeBool().newInstance(this);
DFEVar pipe4971_en = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg4956_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg4956_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void4961_rst_done = dfeBool().newInstance(this);
DFEVar FIFO4953_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe4971_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4965_done = dfeBool().newInstance(this);
DFEVar pipe4995_done = dfeBool().newInstance(this);
DFEVar pipe4995_en = dfeBool().newInstance(this);
DFEVar void5002_done = dfeBool().newInstance(this);
DFEVar void5002_en = dfeBool().newInstance(this);
/* Reg_new { */
DelayLib reg4979_1_lib = new DelayLib(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0));
DFEVar reg4979_1 = reg4979_1_lib.read();
DFEVar reg4979_1_delayed = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Reg_new } */
DFEVar pipe4995_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain4981_done = dfeBool().newInstance(this);
DFEVar void5002_rst_done = dfeBool().newInstance(this);
DFEVar pipe5015_done = dfeBool().newInstance(this);
DFEVar pipe5015_en = dfeBool().newInstance(this);
DFEVar void5021_done = dfeBool().newInstance(this);
DFEVar void5021_en = dfeBool().newInstance(this);
DFEVar void5023_done = dfeBool().newInstance(this);
DFEVar void5023_en = dfeBool().newInstance(this);
DFEVar pipe5015_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain5009_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg5016_0_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg5016_0", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar void5021_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar FixedPoint4820 = argin4579; // reg read
DFEVar FixedPoint4825 = argin4580; // reg read
DFEVar FixedPoint4819 = argin4578; // reg read
DFEVar FixedPoint4824 = argin4580; // reg read
DFEVar FixedPoint4584 = argin4578; // reg read
DFEVar FixedPoint4585 = argin4580; // reg read
DFEVar FixedPoint4588 = argin4579; // reg read
DFEVar const512_FixedPoint333 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const9216_FixedPoint3199 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 9216 ); 
DFEVar const1_FixedPoint11 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const384_FixedPoint3197 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 384 ); 
DFEVar const0_FixedPoint285 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const4_FixedPoint3194 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4 ); 
DFEVar const96_FixedPoint3195 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
}
