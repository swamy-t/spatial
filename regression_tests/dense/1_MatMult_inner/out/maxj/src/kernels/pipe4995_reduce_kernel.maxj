package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class pipe4995_reduce_kernel extends KernelLib {
void common(DFEVector<DFEVar> Vector4982,DFEVector<DFEVar> Vector4983 /*1*/ ,
                DFEVar FixedPoint4992 /*2*/ , DFEVar FixedPoint4133,DFEVar FixedPoint4134,DFEVar FixedPoint4146,DFEVar FixedPoint4147,DFEVar const96_FixedPoint3195 /*3*/) {
// For now, I just regenerate constants because java is being annoying about class extensions


DFEVar FixedPoint4985 = Vector4982[0];
DFEVar FixedPoint4986 = Vector4983[0];
DFEVar FixedPoint4987 = FixedPoint4985 * FixedPoint4986;
DFEVar FixedPoint4988 = Vector4982[1];
DFEVar FixedPoint4989 = Vector4983[1];
DFEVar FixedPoint4990 = FixedPoint4988 * FixedPoint4989;
DFEVar FixedPoint4991 = FixedPoint4987 + FixedPoint4990;
FixedPoint4992 <== FixedPoint4991; // is tree result, do not add Sym(4984)
/* Unknown Deff Sym(4993) Reg_write(Sym(4138),Sym(4992),Sym(422)) */
/* Unknown Deff Sym(4994) Reify(Sym(4993),Summary(mayRead(Sym(4929), Sym(4930), Sym(4138)), mstRead(Sym(4929), Sym(4930), Sym(4138)), mayWrite(Sym(4138)), mstWrite(Sym(4138))),List(Sym(4982), Sym(4983), Sym(4984), Sym(4993))) */
}

pipe4995_reduce_kernel(KernelLib owner , /*1*/ DFEVector<DFEVar> Vector4982,DFEVector<DFEVar> Vector4983 , /*2*/
                DFEVar FixedPoint4992 , /*3*/  DFEVar FixedPoint4133,DFEVar FixedPoint4134,DFEVar FixedPoint4146,DFEVar FixedPoint4147,DFEVar const96_FixedPoint3195) {
  super(owner);
  common(Vector4982, Vector4983 , FixedPoint4992 , FixedPoint4133,FixedPoint4134,FixedPoint4146,FixedPoint4147,const96_FixedPoint3195);
}
}
