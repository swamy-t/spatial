/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);
















int DRAM4587 = 1048576;



int DRAM4590 = 2097152;


int DRAM4592 = 3145728;


















/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint285 = ConstFixPt(0,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: String5 = ArrayApply(Sym(0),Const(2))
// Dep: argin4580 = Reflect(Argin_new(Sym(285)),Summary(mutable),List())
DFEVar FixedPoint6 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint6 <== argin4580;
// Dep: FixedPoint6 = Tpes_String_to_fixpt(Sym(5))
// Dep: void4583 = Reflect(Set_arg(Sym(4580),Sym(6)),Summary(mayRead(Sym(4580)), mstRead(Sym(4580)), mayWrite(Sym(4580)), mstWrite(Sym(4580))),List(Sym(4580)))

// Dep: String1 = ArrayApply(Sym(0),Const(0))
// Dep: argin4578 = Reflect(Argin_new(Sym(285)),Summary(mutable),List())
DFEVar FixedPoint2 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint2 <== argin4578;
// Dep: FixedPoint2 = Tpes_String_to_fixpt(Sym(1))
// Dep: void4581 = Reflect(Set_arg(Sym(4578),Sym(2)),Summary(mayRead(Sym(4578)), mstRead(Sym(4578)), mayWrite(Sym(4578)), mstWrite(Sym(4578))),List(Sym(4578)))

// Dep: FixedPoint4584 = Reflect(Reg_read(Sym(4578)),Summary(mayRead(Sym(4578)), mstRead(Sym(4578))),List(Sym(4578), Sym(4581)))
// Dep: FixedPoint4585 = Reflect(Reg_read(Sym(4580)),Summary(mayRead(Sym(4580)), mstRead(Sym(4580))),List(Sym(4580), Sym(4583)))
// Dep: FixedPoint4586 = FixPt_Mul(Sym(4584),Sym(4585))
DFEVar FixedPoint4586 = FixedPoint4584 * FixedPoint4585;
// Dep: String3 = ArrayApply(Sym(0),Const(1))
// Dep: argin4579 = Reflect(Argin_new(Sym(285)),Summary(mutable),List())
DFEVar FixedPoint4 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint4 <== argin4579;
// Dep: FixedPoint4 = Tpes_String_to_fixpt(Sym(3))
// Dep: void4582 = Reflect(Set_arg(Sym(4579),Sym(4)),Summary(mayRead(Sym(4579)), mstRead(Sym(4579)), mayWrite(Sym(4579)), mstWrite(Sym(4579))),List(Sym(4579)))

// Dep: FixedPoint4588 = Reflect(Reg_read(Sym(4579)),Summary(mayRead(Sym(4579)), mstRead(Sym(4579))),List(Sym(4579), Sym(4582)))
// Dep: FixedPoint4589 = FixPt_Mul(Sym(4585),Sym(4588))
DFEVar FixedPoint4589 = FixedPoint4585 * FixedPoint4588;
// Dep: FixedPoint4591 = FixPt_Mul(Sym(4584),Sym(4588))
DFEVar FixedPoint4591 = FixedPoint4584 * FixedPoint4588;
// Dep: const4_FixedPoint3194 = ConstFixPt(4,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const96_FixedPoint3195 = ConstFixPt(96,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const384_FixedPoint3197 = ConstFixPt(384,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const9216_FixedPoint3199 = ConstFixPt(9216,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint333 = ConstFixPt(512,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint11 = ConstFixPt(1,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$Signed,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B32,MatMult_inner$@6bc10171.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: Bit422 = ConstBit(true)
DFEVar Bit422 = constant.var( true );
// Dep: DRAM4587 = Reflect(Offchip_new(Sym(4586)),Summary(mutable),List())
// Dep: DRAM4590 = Reflect(Offchip_new(Sym(4589)),Summary(mutable),List())
// Dep: DRAM4592 = Reflect(Offchip_new(Sym(4591)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(4942) -> Map(Sym(4075) -> _chain[0].read()), Sym(5023) -> Map(Sym(4194) -> _chain[1].read()), Sym(4950) -> Map(Sym(4075) -> _chain[1].read()), Sym(4851) -> Map(Sym(3917) -> _chain[1].read()), Sym(4922) -> Map(Sym(4037) -> _chain[0].read()), Sym(4862) -> Map(), Sym(4940) -> Map(), Sym(4872) -> Map(Sym(3945) -> _chain[1].read()), Sym(5029) -> Map(), Sym(5025) -> Map(Sym(4068) -> _chain[1].read()), Sym(4961) -> Map(), Sym(4864) -> Map(Sym(3945) -> _chain[0].read()), Sym(5021) -> Map(Sym(4194) -> _chain[0].read()), Sym(4926) -> Map(Sym(3910) -> _chain[1].read()), Sym(4975) -> Map(), Sym(5015) -> Map(), Sym(4916) -> Map(), Sym(4924) -> Map(Sym(4037) -> _chain[1].read()), Sym(4843) -> Map(Sym(3917) -> _chain[0].read()), Sym(4905) -> Map(Sym(3910) -> _chain[0].read()), Sym(4841) -> Map(), Sym(4971) -> Map(Sym(4103) -> _chain[1].read()), Sym(4963) -> Map(Sym(4103) -> _chain[0].read()), Sym(4876) -> Map(), Sym(5004) -> Map(Sym(4068) -> _chain[0].read())) */
DFEVar void5033_en = top_en;
top_done <== void5033_done;
// Hwblock: childrenOf(void5033) = List(Sym(5031))
/* void5033_SeqSM void5033 { */
SMIO void5033_sm = addStateMachine("void5033_sm", new void5033_SeqSM(this));
    void5033_sm.connectInput("sm_en", void5033_en);
    void5033_done <== stream.offset(void5033_sm.getOutput("sm_done"),-1);
void5033_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void5033_rst_en = void5033_sm.getOutput("rst_en");
void5033_sm.connectInput("s0_done", metapipe5031_done);
metapipe5031_en <== void5033_sm.getOutput("s0_en");
DFEVar void5033_datapath_en = void5033_en & ~void5033_rst_en;
DFEVar void5033_ctr_en = void5033_datapath_en;
/* } void5033_SeqSM void5033 */
/* ParPipeForeach metapipe5031 = ParPipeForeach(CounterChain4823) { */
{
/* MPSM to be emitted */
/* metapipe5031_MPSM metapipe5031 { */
SMIO metapipe5031_sm = addStateMachine("metapipe5031_sm", new metapipe5031_MPSM(this));
    metapipe5031_sm.connectInput("sm_en", metapipe5031_en);
    metapipe5031_done <== stream.offset(metapipe5031_sm.getOutput("sm_done"),-1);
DFEVar metapipe5031_niter = ((FixedPoint4819 - const0_FixedPoint285) / (const4_FixedPoint3194 * 1)) * ((FixedPoint4820 - const0_FixedPoint285) / (const96_FixedPoint3195 * 2));
metapipe5031_sm.connectInput("sm_numIter", metapipe5031_niter.cast(dfeUInt(32)));
DFEVar metapipe5031_rst_en = metapipe5031_sm.getOutput("rst_en");
metapipe5031_sm.connectInput("s0_done", void5029_done);
void5029_en <== metapipe5031_sm.getOutput("s0_en");
DFEVar Counter4821_max_0 = FixedPoint4819;
DFEVar Counter4822_max_1 = FixedPoint4820;
DFEVar metapipe5031_datapath_en = metapipe5031_en;
DFEVar metapipe5031_ctr_en = void5029_done;
/* CustomCounterChain { */
DFEVar CounterChain4823_en = void5029_done;
DFEVar[] CounterChain4823_max = {FixedPoint4819,FixedPoint4820};
int[] CounterChain4823_strides = {4,96};
OffsetExpr CounterChain4823_offset = stream.makeOffsetAutoLoop("CounterChain4823_offset");
SMIO CounterChain4823 = addStateMachine("CounterChain4823_sm", new CounterChain4823_CtrSM(owner, CounterChain4823_strides)); // gap = 0
CounterChain4823.connectInput("en", CounterChain4823_en);
CounterChain4823.connectInput("reset", metapipe5031_done);
DFEVar CounterChain4823_maxed = CounterChain4823.getOutput("saturated");
DFEVar CounterChain4823_done = stream.offset(CounterChain4823.getOutput("done"), -1);
OffsetExpr CounterChain4823_additionalOffset = new OffsetExpr();
CounterChain4823.connectInput("max0", CounterChain4823_max[0]);
DFEVar Counter4821 = CounterChain4823.getOutput("counter0");
CounterChain4823.connectInput("max1", CounterChain4823_max[1]);
DFEVector<DFEVar> Counter4822 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter4822[0] <== CounterChain4823.getOutput("counter1");
for (int i = 0; i < 1; i++) {
  Counter4822[i+1] <== CounterChain4823.getOutput("counter1_extension" + i);
}
/* } CustomCounterChain */
/* } metapipe5031_MPSM metapipe5031 */
DFEVar metapipe5031_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3901 = Counter4821;
DFEVar FixedPoint3902 = Counter4822[0];
DFEVar FixedPoint3903 = Counter4822[1];
DblBufReg[] FixedPoint3901_chain = spatialUtils.getRegChain(
              "metapipe5031_FixedPoint3901", 1, FixedPoint3901,
              new DFEVar[]{void5029_done});
DblBufReg[] FixedPoint3902_chain = spatialUtils.getRegChain(
              "metapipe5031_FixedPoint3902", 1, FixedPoint3902,
              new DFEVar[]{void5029_done});
DblBufReg[] FixedPoint3903_chain = spatialUtils.getRegChain(
              "metapipe5031_FixedPoint3903", 1, FixedPoint3903,
              new DFEVar[]{void5029_done});
/* void5029_ParSM void5029 { */
SMIO void5029_sm = addStateMachine("void5029_sm", new void5029_ParSM(this));
    void5029_sm.connectInput("sm_en", void5029_en);
    void5029_done <== stream.offset(void5029_sm.getOutput("sm_done"),-1);
void5029_sm.connectInput("s0_done", metapipe4928_done);
metapipe4928_en <== void5029_sm.getOutput("s0_en");
void5029_sm.connectInput("s1_done", metapipe5027_done);
metapipe5027_en <== void5029_sm.getOutput("s1_en");
/* } void5029_ParSM void5029 */
/* Block void5029 Parallel { */
{
/* ParPipeForeach metapipe4928 = ParPipeForeach(CounterChain4828) { */
{
/* MPSM to be emitted */
/* metapipe4928_MPSM metapipe4928 { */
SMIO metapipe4928_sm = addStateMachine("metapipe4928_sm", new metapipe4928_MPSM(this));
    metapipe4928_sm.connectInput("sm_en", metapipe4928_en);
    metapipe4928_done <== stream.offset(metapipe4928_sm.getOutput("sm_done"),-1);
DFEVar metapipe4928_niter = ((FixedPoint4824 - const0_FixedPoint285) / (const96_FixedPoint3195 * 1));
metapipe4928_sm.connectInput("sm_numIter", metapipe4928_niter.cast(dfeUInt(32)));
DFEVar metapipe4928_rst_en = metapipe4928_sm.getOutput("rst_en");
metapipe4928_sm.connectInput("s0_done", void4876_done);
void4876_en <== metapipe4928_sm.getOutput("s0_en");
metapipe4928_sm.connectInput("s1_done", seq4905_done);
seq4905_en <== metapipe4928_sm.getOutput("s1_en");
metapipe4928_sm.connectInput("s2_done", metapipe4926_done);
metapipe4926_en <== metapipe4928_sm.getOutput("s2_en");
DFEVar Counter4826_max_0 = FixedPoint4824;
DFEVar metapipe4928_datapath_en = metapipe4928_en;
DFEVar metapipe4928_ctr_en = void4876_done;
/* CustomCounterChain { */
DFEVar CounterChain4828_en = void4876_done;
DFEVar[] CounterChain4828_max = {Counter4826_max_0};
int[] CounterChain4828_strides = {96};
OffsetExpr CounterChain4828_offset = stream.makeOffsetAutoLoop("CounterChain4828_offset");
SMIO CounterChain4828 = addStateMachine("CounterChain4828_sm", new CounterChain4828_CtrSM(owner, CounterChain4828_strides)); // gap = 0
CounterChain4828.connectInput("en", CounterChain4828_en);
CounterChain4828.connectInput("reset", metapipe4928_done);
DFEVar CounterChain4828_maxed = CounterChain4828.getOutput("saturated");
DFEVar CounterChain4828_done = stream.offset(CounterChain4828.getOutput("done"), -1);
OffsetExpr CounterChain4828_additionalOffset = new OffsetExpr();
CounterChain4828.connectInput("max0", CounterChain4828_max[0]);
DFEVar Counter4826 = CounterChain4828.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4928_MPSM metapipe4928 */
DFEVar metapipe4928_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3910 = Counter4826;
DblBufReg[] FixedPoint3910_chain = spatialUtils.getRegChain(
              "metapipe4928_FixedPoint3910", 3, FixedPoint3910,
              new DFEVar[]{void4876_done,seq4905_done,metapipe4926_done});
/* void4876_ParSM void4876 { */
SMIO void4876_sm = addStateMachine("void4876_sm", new void4876_ParSM(this));
    void4876_sm.connectInput("sm_en", void4876_en);
    void4876_done <== stream.offset(void4876_sm.getOutput("sm_done"),-1);
void4876_sm.connectInput("s0_done", metapipe4853_done);
metapipe4853_en <== void4876_sm.getOutput("s0_en");
void4876_sm.connectInput("s1_done", metapipe4874_done);
metapipe4874_en <== void4876_sm.getOutput("s1_en");
/* } void4876_ParSM void4876 */
/* Block void4876 Parallel { */
{
// FIFO FIFO4833 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO4833_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO4833_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO4833_readEn = dfeBool().newInstance(this);
DFEVar FIFO4833_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe4853 = ParPipeForeach(CounterChain4835) { */
{
/* MPSM to be emitted */
/* metapipe4853_MPSM metapipe4853 { */
SMIO metapipe4853_sm = addStateMachine("metapipe4853_sm", new metapipe4853_MPSM(this));
    metapipe4853_sm.connectInput("sm_en", metapipe4853_en);
    metapipe4853_done <== stream.offset(metapipe4853_sm.getOutput("sm_done"),-1);
DFEVar metapipe4853_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe4853_sm.connectInput("sm_numIter", metapipe4853_niter.cast(dfeUInt(32)));
DFEVar metapipe4853_rst_en = metapipe4853_sm.getOutput("rst_en");
metapipe4853_sm.connectInput("s0_done", void4841_done);
void4841_en <== metapipe4853_sm.getOutput("s0_en");
metapipe4853_sm.connectInput("s1_done", void4843_done);
void4843_en <== metapipe4853_sm.getOutput("s1_en");
metapipe4853_sm.connectInput("s2_done", pipe4851_done);
pipe4851_en <== metapipe4853_sm.getOutput("s2_en");
DFEVar Counter4834_max_0 = const4_FixedPoint3194;
DFEVar metapipe4853_datapath_en = metapipe4853_en;
DFEVar metapipe4853_ctr_en = void4841_done;
/* CustomCounterChain { */
DFEVar CounterChain4835_en = void4841_done;
DFEVar[] CounterChain4835_max = {const4_FixedPoint3194};
int[] CounterChain4835_strides = {1};
OffsetExpr CounterChain4835_offset = stream.makeOffsetAutoLoop("CounterChain4835_offset");
SMIO CounterChain4835 = addStateMachine("CounterChain4835_sm", new CounterChain4835_CtrSM(owner, CounterChain4835_strides)); // gap = 0
CounterChain4835.connectInput("en", CounterChain4835_en);
CounterChain4835.connectInput("reset", metapipe4853_done);
DFEVar CounterChain4835_maxed = CounterChain4835.getOutput("saturated");
DFEVar CounterChain4835_done = stream.offset(CounterChain4835.getOutput("done"), -1);
OffsetExpr CounterChain4835_additionalOffset = new OffsetExpr();
CounterChain4835.connectInput("max0", CounterChain4835_max[0]);
DFEVar Counter4834 = CounterChain4835.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4853_MPSM metapipe4853 */
DFEVar metapipe4853_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3917 = Counter4834;
DblBufReg[] FixedPoint3917_chain = spatialUtils.getRegChain(
              "metapipe4853_FixedPoint3917", 3, FixedPoint3917,
              new DFEVar[]{void4841_done,void4843_done,pipe4851_done});
// Unit pipe writtenIn(void4841) = List(Sym(4836))
//   reg4836 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg4836) = false
/* PipeSM void4841 { */
OffsetExpr void4841_offset = stream.makeOffsetAutoLoop("void4841_offset");
SMIO void4841_sm = addStateMachine("void4841_sm", new PipeSM(this, 1));
    void4841_sm.connectInput("sm_en", void4841_en);
    void4841_done <== stream.offset(void4841_sm.getOutput("sm_done"),-1-void4841_offset);
DFEVar void4841_rst_en = void4841_sm.getOutput("rst_en");
void4841_sm.connectInput("rst_done", void4841_rst_done);
void4841_rst_done <== stream.offset(void4841_rst_en, -void4841_offset-1);
void4841_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4841_sm.connectInput("ctr_done", stream.offset(void4841_sm.getOutput("ctr_en"), -1));
DFEVar void4841_datapath_en = void4841_en & ~void4841_rst_en;
DFEVar void4841_ctr_en = void4841_datapath_en;
/* } PipeSM void4841 */
/* Block void4841 Unitpipe { */
{
DFEVar FixedPoint3919 = FixedPoint3901 + FixedPoint3917;
DFEVar FixedPoint4837 = FixedPoint3919 * FixedPoint4585;
DFEVar FixedPoint4838 = FixedPoint4837 + FixedPoint3910;
/* Reg_write { */
reg4836_0_lib.write(FixedPoint4838, void4841_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void4841 Unitpipe */
DFEVar FixedPoint4842 = reg4836_0_lib.read(1); // reg read
MemoryCmdGenLib void4843 = new MemoryCmdGenLib(
              this,
              void4843_en, void4843_done,
              DRAM4587, FixedPoint4842,
              "DRAM4587_void4843_in",
              96,
              FIFO4833_readEn, FIFO4833_rdata);
FIFO4833_writeEn <== void4843_en;
FIFO4833_wdata <== FIFO4833_rdata;
/* ParPipeForeach pipe4851 = ParPipeForeach(CounterChain4845) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe4851 { */
OffsetExpr pipe4851_offset = stream.makeOffsetAutoLoop("pipe4851_offset");
SMIO pipe4851_sm = addStateMachine("pipe4851_sm", new PipeSM(this, 1));
    pipe4851_sm.connectInput("sm_en", pipe4851_en);
    pipe4851_done <== stream.offset(pipe4851_sm.getOutput("sm_done"),-1-pipe4851_offset);
DFEVar pipe4851_rst_en = pipe4851_sm.getOutput("rst_en");
pipe4851_sm.connectInput("rst_done", pipe4851_rst_done);
pipe4851_rst_done <== stream.offset(pipe4851_rst_en, -pipe4851_offset-1);
pipe4851_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4844_max_0 = pipe4851_sm.getOutput("ctr_maxOut_0");
pipe4851_sm.connectInput("ctr_done", CounterChain4845_done);
DFEVar pipe4851_datapath_en = pipe4851_sm.getOutput("ctr_en");
DFEVar pipe4851_ctr_en = pipe4851_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain4845_en = pipe4851_datapath_en;
DFEVar[] CounterChain4845_max = {Counter4844_max_0};
int[] CounterChain4845_strides = {1};
OffsetExpr CounterChain4845_offset = stream.makeOffsetAutoLoop("CounterChain4845_offset");
SMIO CounterChain4845 = addStateMachine("CounterChain4845_sm", new CounterChain4845_CtrSM(owner, CounterChain4845_strides)); // gap = 0
CounterChain4845.connectInput("en", CounterChain4845_en);
CounterChain4845.connectInput("reset", pipe4851_done);
DFEVar CounterChain4845_maxed = CounterChain4845.getOutput("saturated");
CounterChain4845_done <== stream.offset(CounterChain4845.getOutput("done"), -1);
OffsetExpr CounterChain4845_additionalOffset = new OffsetExpr();
CounterChain4845.connectInput("max0", CounterChain4845_max[0]);
DFEVar Counter4844 = CounterChain4845.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe4851 */
DFEVar pipe4851_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3929 = Counter4844;
// DFEVar Vector4846 = Par_pop_fifo(FIFO4833, 1);
FIFO4833_readEn <== pipe4851_ctr_en;
DFEVector<DFEVar> Vector4846 = FIFO4833_rdata;
DFEVar FixedPoint3932 = FixedPoint3917_chain[1].read() * const96_FixedPoint3195;
DFEVar FixedPoint3933 = FixedPoint3932 + FixedPoint3929;
DFEVector<DFEVar> Vector3935 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint3933));
DFEVar FixedPoint4847 = Vector4846[0];
DFEVector<DFEVar> Vector4848 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4847));
/* Bram_store { */
BRAM4830_0.connectWport(FixedPoint3917_chain[1].read(), FixedPoint3929, Vector4848, pipe4851_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe4851 */
}
/* } ParPipeForeach metapipe4853 */
// FIFO FIFO4854 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO4854_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO4854_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO4854_readEn = dfeBool().newInstance(this);
DFEVar FIFO4854_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe4874 = ParPipeForeach(CounterChain4856) { */
{
/* MPSM to be emitted */
/* metapipe4874_MPSM metapipe4874 { */
SMIO metapipe4874_sm = addStateMachine("metapipe4874_sm", new metapipe4874_MPSM(this));
    metapipe4874_sm.connectInput("sm_en", metapipe4874_en);
    metapipe4874_done <== stream.offset(metapipe4874_sm.getOutput("sm_done"),-1);
DFEVar metapipe4874_niter = ((const96_FixedPoint3195 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe4874_sm.connectInput("sm_numIter", metapipe4874_niter.cast(dfeUInt(32)));
DFEVar metapipe4874_rst_en = metapipe4874_sm.getOutput("rst_en");
metapipe4874_sm.connectInput("s0_done", void4862_done);
void4862_en <== metapipe4874_sm.getOutput("s0_en");
metapipe4874_sm.connectInput("s1_done", void4864_done);
void4864_en <== metapipe4874_sm.getOutput("s1_en");
metapipe4874_sm.connectInput("s2_done", pipe4872_done);
pipe4872_en <== metapipe4874_sm.getOutput("s2_en");
DFEVar Counter4855_max_0 = const96_FixedPoint3195;
DFEVar metapipe4874_datapath_en = metapipe4874_en;
DFEVar metapipe4874_ctr_en = void4862_done;
/* CustomCounterChain { */
DFEVar CounterChain4856_en = void4862_done;
DFEVar[] CounterChain4856_max = {const96_FixedPoint3195};
int[] CounterChain4856_strides = {1};
OffsetExpr CounterChain4856_offset = stream.makeOffsetAutoLoop("CounterChain4856_offset");
SMIO CounterChain4856 = addStateMachine("CounterChain4856_sm", new CounterChain4856_CtrSM(owner, CounterChain4856_strides)); // gap = 0
CounterChain4856.connectInput("en", CounterChain4856_en);
CounterChain4856.connectInput("reset", metapipe4874_done);
DFEVar CounterChain4856_maxed = CounterChain4856.getOutput("saturated");
DFEVar CounterChain4856_done = stream.offset(CounterChain4856.getOutput("done"), -1);
OffsetExpr CounterChain4856_additionalOffset = new OffsetExpr();
CounterChain4856.connectInput("max0", CounterChain4856_max[0]);
DFEVar Counter4855 = CounterChain4856.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4874_MPSM metapipe4874 */
DFEVar metapipe4874_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3945 = Counter4855;
DblBufReg[] FixedPoint3945_chain = spatialUtils.getRegChain(
              "metapipe4874_FixedPoint3945", 3, FixedPoint3945,
              new DFEVar[]{void4862_done,void4864_done,pipe4872_done});
// Unit pipe writtenIn(void4862) = List(Sym(4857))
//   reg4857 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg4857) = false
/* PipeSM void4862 { */
OffsetExpr void4862_offset = stream.makeOffsetAutoLoop("void4862_offset");
SMIO void4862_sm = addStateMachine("void4862_sm", new PipeSM(this, 1));
    void4862_sm.connectInput("sm_en", void4862_en);
    void4862_done <== stream.offset(void4862_sm.getOutput("sm_done"),-1-void4862_offset);
DFEVar void4862_rst_en = void4862_sm.getOutput("rst_en");
void4862_sm.connectInput("rst_done", void4862_rst_done);
void4862_rst_done <== stream.offset(void4862_rst_en, -void4862_offset-1);
void4862_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4862_sm.connectInput("ctr_done", stream.offset(void4862_sm.getOutput("ctr_en"), -1));
DFEVar void4862_datapath_en = void4862_en & ~void4862_rst_en;
DFEVar void4862_ctr_en = void4862_datapath_en;
/* } PipeSM void4862 */
/* Block void4862 Unitpipe { */
{
DFEVar FixedPoint3947 = FixedPoint3910 + FixedPoint3945;
DFEVar FixedPoint4858 = FixedPoint3947 * FixedPoint4588;
DFEVar FixedPoint4859 = FixedPoint4858 + FixedPoint3902;
/* Reg_write { */
reg4857_0_lib.write(FixedPoint4859, void4862_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void4862 Unitpipe */
DFEVar FixedPoint4863 = reg4857_0_lib.read(1); // reg read
MemoryCmdGenLib void4864 = new MemoryCmdGenLib(
              this,
              void4864_en, void4864_done,
              DRAM4590, FixedPoint4863,
              "DRAM4590_void4864_in",
              96,
              FIFO4854_readEn, FIFO4854_rdata);
FIFO4854_writeEn <== void4864_en;
FIFO4854_wdata <== FIFO4854_rdata;
/* ParPipeForeach pipe4872 = ParPipeForeach(CounterChain4866) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe4872 { */
OffsetExpr pipe4872_offset = stream.makeOffsetAutoLoop("pipe4872_offset");
SMIO pipe4872_sm = addStateMachine("pipe4872_sm", new PipeSM(this, 1));
    pipe4872_sm.connectInput("sm_en", pipe4872_en);
    pipe4872_done <== stream.offset(pipe4872_sm.getOutput("sm_done"),-1-pipe4872_offset);
DFEVar pipe4872_rst_en = pipe4872_sm.getOutput("rst_en");
pipe4872_sm.connectInput("rst_done", pipe4872_rst_done);
pipe4872_rst_done <== stream.offset(pipe4872_rst_en, -pipe4872_offset-1);
pipe4872_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4865_max_0 = pipe4872_sm.getOutput("ctr_maxOut_0");
pipe4872_sm.connectInput("ctr_done", CounterChain4866_done);
DFEVar pipe4872_datapath_en = pipe4872_sm.getOutput("ctr_en");
DFEVar pipe4872_ctr_en = pipe4872_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain4866_en = pipe4872_datapath_en;
DFEVar[] CounterChain4866_max = {Counter4865_max_0};
int[] CounterChain4866_strides = {1};
OffsetExpr CounterChain4866_offset = stream.makeOffsetAutoLoop("CounterChain4866_offset");
SMIO CounterChain4866 = addStateMachine("CounterChain4866_sm", new CounterChain4866_CtrSM(owner, CounterChain4866_strides)); // gap = 0
CounterChain4866.connectInput("en", CounterChain4866_en);
CounterChain4866.connectInput("reset", pipe4872_done);
DFEVar CounterChain4866_maxed = CounterChain4866.getOutput("saturated");
CounterChain4866_done <== stream.offset(CounterChain4866.getOutput("done"), -1);
OffsetExpr CounterChain4866_additionalOffset = new OffsetExpr();
CounterChain4866.connectInput("max0", CounterChain4866_max[0]);
DFEVar Counter4865 = CounterChain4866.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe4872 */
DFEVar pipe4872_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3957 = Counter4865;
// DFEVar Vector4867 = Par_pop_fifo(FIFO4854, 1);
FIFO4854_readEn <== pipe4872_ctr_en;
DFEVector<DFEVar> Vector4867 = FIFO4854_rdata;
DFEVar FixedPoint3960 = FixedPoint3945_chain[1].read() * const96_FixedPoint3195;
DFEVar FixedPoint3961 = FixedPoint3960 + FixedPoint3957;
DFEVector<DFEVar> Vector3963 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint3961));
DFEVar FixedPoint4868 = Vector4867[0];
DFEVector<DFEVar> Vector4869 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4868));
/* Bram_store { */
BRAM4831_0.connectWport(FixedPoint3945_chain[1].read(), FixedPoint3957, Vector4869, pipe4872_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe4872 */
}
/* } ParPipeForeach metapipe4874 */
}
/* } Block void4876 Parallel */
/* ParPipeForeach seq4905 = ParPipeForeach(CounterChain4879) { */
{
/* SeqSM to be emitted */
/* seq4905_SeqSM seq4905 { */
SMIO seq4905_sm = addStateMachine("seq4905_sm", new seq4905_SeqSM(this));
    seq4905_sm.connectInput("sm_en", seq4905_en);
    seq4905_done <== stream.offset(seq4905_sm.getOutput("sm_done"),-1);
DFEVar seq4905_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1)) * ((const96_FixedPoint3195 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
seq4905_sm.connectInput("sm_numIter", seq4905_niter.cast(dfeUInt(32)));
DFEVar seq4905_rst_en = seq4905_sm.getOutput("rst_en");
seq4905_sm.connectInput("s0_done", pipe4896_done);
pipe4896_en <== seq4905_sm.getOutput("s0_en");
seq4905_sm.connectInput("s1_done", void4903_done);
void4903_en <== seq4905_sm.getOutput("s1_en");
DFEVar Counter4877_max_0 = const4_FixedPoint3194;
DFEVar Counter4878_max_1 = const96_FixedPoint3195;
DFEVar seq4905_datapath_en = seq4905_en;
DFEVar seq4905_ctr_en = void4903_done;
/* CustomCounterChain { */
DFEVar CounterChain4879_en = void4903_done;
DFEVar[] CounterChain4879_max = {Counter4877_max_0,Counter4878_max_1};
int[] CounterChain4879_strides = {1,1};
OffsetExpr CounterChain4879_offset = stream.makeOffsetAutoLoop("CounterChain4879_offset");
SMIO CounterChain4879 = addStateMachine("CounterChain4879_sm", new CounterChain4879_CtrSM(owner, CounterChain4879_strides)); // gap = 0
CounterChain4879.connectInput("en", CounterChain4879_en);
CounterChain4879.connectInput("reset", seq4905_done);
DFEVar CounterChain4879_maxed = CounterChain4879.getOutput("saturated");
DFEVar CounterChain4879_done = stream.offset(CounterChain4879.getOutput("done"), -1);
OffsetExpr CounterChain4879_additionalOffset = new OffsetExpr();
CounterChain4879.connectInput("max0", CounterChain4879_max[0]);
DFEVar Counter4877 = CounterChain4879.getOutput("counter0");
CounterChain4879.connectInput("max1", CounterChain4879_max[1]);
DFEVar Counter4878 = CounterChain4879.getOutput("counter1");
/* } CustomCounterChain */
/* } seq4905_SeqSM seq4905 */
DFEVar seq4905_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint3975 = Counter4877;
DFEVar FixedPoint3976 = Counter4878;
/* ParPipeReduce pipe4896 = ParPipeReduce(CounterChain4882, reg4880) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe4896 controller { */
/* PipeSM pipe4896 { */
OffsetExpr pipe4896_offset = stream.makeOffsetAutoLoop("pipe4896_offset");
SMIO pipe4896_sm = addStateMachine("pipe4896_sm", new PipeSM(this, 1));
    pipe4896_sm.connectInput("sm_en", pipe4896_en);
    pipe4896_done <== stream.offset(pipe4896_sm.getOutput("sm_done"),-1-pipe4896_offset);
DFEVar pipe4896_rst_en = pipe4896_sm.getOutput("rst_en");
pipe4896_sm.connectInput("rst_done", pipe4896_rst_done);
pipe4896_rst_done <== stream.offset(pipe4896_rst_en, -pipe4896_offset-1);
pipe4896_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4881_max_0 = pipe4896_sm.getOutput("ctr_maxOut_0");
pipe4896_sm.connectInput("ctr_done", CounterChain4882_done);
DFEVar pipe4896_datapath_en = pipe4896_sm.getOutput("ctr_en");
DFEVar pipe4896_loopLengthVal = pipe4896_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe4896_redLoopChain = control.count.makeCounterChain(pipe4896_datapath_en);
DFEVar pipe4896_redLoopCtr = pipe4896_redLoopChain.addCounter(pipe4896_loopLengthVal, 1);
DFEVar pipe4896_redLoop_done = stream.offset(pipe4896_redLoopChain.getCounterWrap(pipe4896_redLoopCtr), -1);
DFEVar pipe4896_ctr_en = pipe4896_datapath_en & pipe4896_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain4882_en = pipe4896_datapath_en & pipe4896_redLoop_done;
DFEVar[] CounterChain4882_max = {Counter4881_max_0};
int[] CounterChain4882_strides = {1};
OffsetExpr CounterChain4882_offset = stream.makeOffsetAutoLoop("CounterChain4882_offset");
SMIO CounterChain4882 = addStateMachine("CounterChain4882_sm", new CounterChain4882_CtrSM(owner, CounterChain4882_strides)); // gap = 0
CounterChain4882.connectInput("en", CounterChain4882_en);
CounterChain4882.connectInput("reset", pipe4896_done);
DFEVar CounterChain4882_maxed = CounterChain4882.getOutput("saturated");
CounterChain4882_done <== stream.offset(CounterChain4882.getOutput("done"), -1);
OffsetExpr CounterChain4882_additionalOffset = new OffsetExpr();
CounterChain4882.connectInput("max0", CounterChain4882_max[0]);
DFEVector<DFEVar> Counter4881 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter4881[0] <== CounterChain4882.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter4881[i+1] <== CounterChain4882.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe4896 */
/* } pipe4896 controller */
/* ParPipeReduce pipe4896 par loop { */
DFEVar FixedPoint3988 = Counter4881[0];
DFEVar FixedPoint3989 = Counter4881[1];
/* } pipe4896 par loop */
DFEVar FixedPoint4893 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe4896 func block { */
DFEVar FixedPoint3990 = FixedPoint3975 * const96_FixedPoint3195;
DFEVar FixedPoint3991 = FixedPoint3990 + FixedPoint3988;
DFEVar FixedPoint3992 = FixedPoint3990 + FixedPoint3989;
DFEVector<DFEVar> Vector3993 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint3991,FixedPoint3992));
/* Bram_load { */
// All readers share row. vectorized
DFEVector<DFEVar> Vector4883 = BRAM4830_0.connectRport(FixedPoint3975, new DFEVectorType<DFEVar>(FixedPoint3975.getType(), 2).newInstance(this, Arrays.asList(FixedPoint3975,FixedPoint3975)), new int[] {1}); //r8
/* } Bram_load */
DFEVar FixedPoint3998 = FixedPoint3988 * const96_FixedPoint3195;
DFEVar FixedPoint4000 = FixedPoint3998 + FixedPoint3976;
DFEVar FixedPoint3999 = FixedPoint3989 * const96_FixedPoint3195;
DFEVar FixedPoint4001 = FixedPoint3999 + FixedPoint3976;
DFEVector<DFEVar> Vector4002 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint4000,FixedPoint4001));
/* Bram_load { */
// All readers share column. vectorized 
DFEVector<DFEVar> Vector4884 = BRAM4831_0.connectRport(new DFEVectorType<DFEVar>(FixedPoint3988.getType(), 2).newInstance(this, Arrays.asList(FixedPoint3988,FixedPoint3989)), FixedPoint3976, new int[] {1}); //r7
/* } Bram_load */
// FixedPoint4885 is just a register read
// FixedPoint4886 already emitted in pipe4896;
// FixedPoint4887 already emitted in pipe4896;
// FixedPoint4888 already emitted in pipe4896;
// FixedPoint4889 already emitted in pipe4896;
// FixedPoint4890 already emitted in pipe4896;
// FixedPoint4891 already emitted in pipe4896;
// FixedPoint4892 already emitted in pipe4896;
// FixedPoint4893 already emitted in pipe4896;
/* Reg_write { */
// Write to accumulator register
DFEVar reg4880_en = pipe4896_datapath_en & pipe4896_redLoop_done;
Accumulator.Params reg4880_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe4896_done /*because _rst_en goes hi on each iter*/).withEnable(reg4880_en);
DFEVar reg4880 = Reductions.accumulator.makeAccumulator(FixedPoint4893, reg4880_accParams);
reg4880_1_lib.write(reg4880, pipe4896_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 2 */
/* } pipe4896 func block */
new pipe4896_reduce_kernel(owner , Vector4883,Vector4884 , FixedPoint4893 , FixedPoint3975,FixedPoint3976,FixedPoint3988,FixedPoint3989,const96_FixedPoint3195); // Reduce kernel
}
/* } ParPipeReduce pipe4896 */
// Unit pipe writtenIn(void4903) = List(Sym(4832))
//   BRAM4832 = Reflect(Bram_new(Sym(3197),Sym(285)),Summary(mutable),List()), isAccum(BRAM4832) = true
/* PipeSM void4903 { */
OffsetExpr void4903_offset = stream.makeOffsetAutoLoop("void4903_offset");
SMIO void4903_sm = addStateMachine("void4903_sm", new PipeSM(this, 1));
    void4903_sm.connectInput("sm_en", void4903_en);
    void4903_done <== stream.offset(void4903_sm.getOutput("sm_done"),-1-void4903_offset);
DFEVar void4903_rst_en = void4903_sm.getOutput("rst_en");
void4903_sm.connectInput("rst_done", void4903_rst_done);
void4903_rst_done <== stream.offset(void4903_rst_en, -void4903_offset-1);
void4903_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4903_sm.connectInput("ctr_done", stream.offset(void4903_sm.getOutput("ctr_en"), -1));
DFEVar void4903_datapath_en = void4903_en & ~void4903_rst_en;
DFEVar void4903_ctr_en = void4903_datapath_en;
/* } PipeSM void4903 */
/* Block void4903 Unitpipe { */
{
DFEVar FixedPoint3990 = FixedPoint3975 * const96_FixedPoint3195;
DFEVar FixedPoint4022 = FixedPoint3990 + FixedPoint3976;
/* Bram_load { */
DFEVar FixedPoint4897 = BRAM4832_0.connectRport(FixedPoint3975, FixedPoint3976, new int[] {0}); //r6
/* } Bram_load */
DFEVar FixedPoint4898 = reg4880_1; // reg read
DFEVar Bit4025 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit4025 <== FixedPoint3910_chain[0].read() === const0_FixedPoint285;
DFEVar FixedPoint4899 = Bit4025 ? const0_FixedPoint285 : FixedPoint4897 ;
DFEVar FixedPoint4900 = FixedPoint4899 + FixedPoint4898;
/* Bram_store { */
BRAM4832_0.connectWport(stream.offset(FixedPoint3975, -void4903_offset), stream.offset(FixedPoint3976, -void4903_offset),
                stream.offset(FixedPoint4900, -void4903_offset), stream.offset(void4903_done /* Not sure if this is right */, -void4903_offset), new int[] {0}); //w4
BRAM4832_1.connectWport(stream.offset(FixedPoint3975, -void4903_offset), stream.offset(FixedPoint3976, -void4903_offset),
                stream.offset(FixedPoint4900, -void4903_offset), stream.offset(void4903_done /* Not sure if this is right */, -void4903_offset), new int[] {0}); //w4
/* } Bram_store */
}
/* } Block void4903 Unitpipe */
}
/* } ParPipeForeach seq4905 */
// FIFO FIFO4906 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO4906_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO4906_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO4906_readEn = dfeBool().newInstance(this);
DFEVar FIFO4906_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe4926 = ParPipeForeach(CounterChain4908) { */
{
/* MPSM to be emitted */
/* metapipe4926_MPSM metapipe4926 { */
SMIO metapipe4926_sm = addStateMachine("metapipe4926_sm", new metapipe4926_MPSM(this));
    metapipe4926_sm.connectInput("sm_en", metapipe4926_en);
    metapipe4926_done <== stream.offset(metapipe4926_sm.getOutput("sm_done"),-1);
DFEVar metapipe4926_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe4926_sm.connectInput("sm_numIter", metapipe4926_niter.cast(dfeUInt(32)));
DFEVar metapipe4926_rst_en = metapipe4926_sm.getOutput("rst_en");
metapipe4926_sm.connectInput("s0_done", pipe4916_done);
pipe4916_en <== metapipe4926_sm.getOutput("s0_en");
metapipe4926_sm.connectInput("s1_done", void4922_done);
void4922_en <== metapipe4926_sm.getOutput("s1_en");
metapipe4926_sm.connectInput("s2_done", void4924_done);
void4924_en <== metapipe4926_sm.getOutput("s2_en");
DFEVar Counter4907_max_0 = const4_FixedPoint3194;
DFEVar metapipe4926_datapath_en = metapipe4926_en;
DFEVar metapipe4926_ctr_en = pipe4916_done;
/* CustomCounterChain { */
DFEVar CounterChain4908_en = pipe4916_done;
DFEVar[] CounterChain4908_max = {Counter4907_max_0};
int[] CounterChain4908_strides = {1};
OffsetExpr CounterChain4908_offset = stream.makeOffsetAutoLoop("CounterChain4908_offset");
SMIO CounterChain4908 = addStateMachine("CounterChain4908_sm", new CounterChain4908_CtrSM(owner, CounterChain4908_strides)); // gap = 0
CounterChain4908.connectInput("en", CounterChain4908_en);
CounterChain4908.connectInput("reset", metapipe4926_done);
DFEVar CounterChain4908_maxed = CounterChain4908.getOutput("saturated");
DFEVar CounterChain4908_done = stream.offset(CounterChain4908.getOutput("done"), -1);
OffsetExpr CounterChain4908_additionalOffset = new OffsetExpr();
CounterChain4908.connectInput("max0", CounterChain4908_max[0]);
DFEVar Counter4907 = CounterChain4908.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4926_MPSM metapipe4926 */
DFEVar metapipe4926_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4037 = Counter4907;
DblBufReg[] FixedPoint4037_chain = spatialUtils.getRegChain(
              "metapipe4926_FixedPoint4037", 3, FixedPoint4037,
              new DFEVar[]{pipe4916_done,void4922_done,void4924_done});
/* ParPipeForeach pipe4916 = ParPipeForeach(CounterChain4910) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe4916 { */
OffsetExpr pipe4916_offset = stream.makeOffsetAutoLoop("pipe4916_offset");
SMIO pipe4916_sm = addStateMachine("pipe4916_sm", new PipeSM(this, 1));
    pipe4916_sm.connectInput("sm_en", pipe4916_en);
    pipe4916_done <== stream.offset(pipe4916_sm.getOutput("sm_done"),-1-pipe4916_offset);
DFEVar pipe4916_rst_en = pipe4916_sm.getOutput("rst_en");
pipe4916_sm.connectInput("rst_done", pipe4916_rst_done);
pipe4916_rst_done <== stream.offset(pipe4916_rst_en, -pipe4916_offset-1);
pipe4916_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4909_max_0 = pipe4916_sm.getOutput("ctr_maxOut_0");
pipe4916_sm.connectInput("ctr_done", CounterChain4910_done);
DFEVar pipe4916_datapath_en = pipe4916_sm.getOutput("ctr_en");
DFEVar pipe4916_ctr_en = pipe4916_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain4910_en = pipe4916_datapath_en;
DFEVar[] CounterChain4910_max = {Counter4909_max_0};
int[] CounterChain4910_strides = {1};
OffsetExpr CounterChain4910_offset = stream.makeOffsetAutoLoop("CounterChain4910_offset");
SMIO CounterChain4910 = addStateMachine("CounterChain4910_sm", new CounterChain4910_CtrSM(owner, CounterChain4910_strides)); // gap = 0
CounterChain4910.connectInput("en", CounterChain4910_en);
CounterChain4910.connectInput("reset", pipe4916_done);
DFEVar CounterChain4910_maxed = CounterChain4910.getOutput("saturated");
CounterChain4910_done <== stream.offset(CounterChain4910.getOutput("done"), -1);
OffsetExpr CounterChain4910_additionalOffset = new OffsetExpr();
CounterChain4910.connectInput("max0", CounterChain4910_max[0]);
DFEVar Counter4909 = CounterChain4910.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe4916 */
DFEVar pipe4916_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4040 = Counter4909;
DFEVar FixedPoint4041 = FixedPoint4037 * const96_FixedPoint3195;
DFEVar FixedPoint4042 = FixedPoint4041 + FixedPoint4040;
DFEVector<DFEVar> Vector4043 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4042));
/* Bram_load { */
DFEVector<DFEVar> Vector4911 = new DFEVectorType<DFEVar>(BRAM4832_1.type, 1).newInstance(this, Arrays.asList(BRAM4832_1.connectRport(FixedPoint4037, FixedPoint4040, new int[] {1}))); //r5
/* } Bram_load */
DFEVar Bit4047 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit4047 <== FixedPoint4040 < const96_FixedPoint3195;
DFEVector<DFEVar> Vector4048 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit4047));
DFEVar FixedPoint4912 = Vector4911[0];
DFEVector<DFEVar> Vector4913 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4912));
// Par_push_fifo(FIFO4906, Vector4913, Vector4048, true);
FIFO4906_writeEn <== pipe4916_ctr_en;
FIFO4906_wdata <== Vector4913;
}
/* } ParPipeForeach pipe4916 */
// Unit pipe writtenIn(void4922) = List(Sym(4917))
//   reg4917 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg4917) = false
/* PipeSM void4922 { */
OffsetExpr void4922_offset = stream.makeOffsetAutoLoop("void4922_offset");
SMIO void4922_sm = addStateMachine("void4922_sm", new PipeSM(this, 1));
    void4922_sm.connectInput("sm_en", void4922_en);
    void4922_done <== stream.offset(void4922_sm.getOutput("sm_done"),-1-void4922_offset);
DFEVar void4922_rst_en = void4922_sm.getOutput("rst_en");
void4922_sm.connectInput("rst_done", void4922_rst_done);
void4922_rst_done <== stream.offset(void4922_rst_en, -void4922_offset-1);
void4922_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4922_sm.connectInput("ctr_done", stream.offset(void4922_sm.getOutput("ctr_en"), -1));
DFEVar void4922_datapath_en = void4922_en & ~void4922_rst_en;
DFEVar void4922_ctr_en = void4922_datapath_en;
/* } PipeSM void4922 */
/* Block void4922 Unitpipe { */
{
DFEVar FixedPoint4054 = FixedPoint3901 + FixedPoint4037_chain[0].read();
DFEVar FixedPoint4918 = FixedPoint4054 * FixedPoint4588;
DFEVar FixedPoint4919 = FixedPoint4918 + FixedPoint3902;
/* Reg_write { */
reg4917_0_lib.write(FixedPoint4919, void4922_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void4922 Unitpipe */
DFEVar FixedPoint4923 = reg4917_0_lib.read(1); // reg read
// void4924: Offchip_store_cmd(DRAM4592,FIFO4906, FixedPoint4923, const96_FixedPoint3195, 1)
MemoryCmdStLib void4924 = new MemoryCmdStLib(
          this,
          void4924_en, void4924_done,
          DRAM4592, FixedPoint4923,
          "DRAM4592_void4924_out",
          const96_FixedPoint3195,
          FIFO4906_writeEn, FIFO4906_wdata);
FIFO4906_readEn <== void4924_en;
}
/* } ParPipeForeach metapipe4926 */
}
/* } ParPipeForeach metapipe4928 */
/* ParPipeForeach metapipe5027 = ParPipeForeach(CounterChain4829) { */
{
/* MPSM to be emitted */
/* metapipe5027_MPSM metapipe5027 { */
SMIO metapipe5027_sm = addStateMachine("metapipe5027_sm", new metapipe5027_MPSM(this));
    metapipe5027_sm.connectInput("sm_en", metapipe5027_en);
    metapipe5027_done <== stream.offset(metapipe5027_sm.getOutput("sm_done"),-1);
DFEVar metapipe5027_niter = ((FixedPoint4825 - const0_FixedPoint285) / (const96_FixedPoint3195 * 1));
metapipe5027_sm.connectInput("sm_numIter", metapipe5027_niter.cast(dfeUInt(32)));
DFEVar metapipe5027_rst_en = metapipe5027_sm.getOutput("rst_en");
metapipe5027_sm.connectInput("s0_done", void4975_done);
void4975_en <== metapipe5027_sm.getOutput("s0_en");
metapipe5027_sm.connectInput("s1_done", seq5004_done);
seq5004_en <== metapipe5027_sm.getOutput("s1_en");
metapipe5027_sm.connectInput("s2_done", metapipe5025_done);
metapipe5025_en <== metapipe5027_sm.getOutput("s2_en");
DFEVar Counter4827_max_0 = FixedPoint4825;
DFEVar metapipe5027_datapath_en = metapipe5027_en;
DFEVar metapipe5027_ctr_en = void4975_done;
/* CustomCounterChain { */
DFEVar CounterChain4829_en = void4975_done;
DFEVar[] CounterChain4829_max = {Counter4827_max_0};
int[] CounterChain4829_strides = {96};
OffsetExpr CounterChain4829_offset = stream.makeOffsetAutoLoop("CounterChain4829_offset");
SMIO CounterChain4829 = addStateMachine("CounterChain4829_sm", new CounterChain4829_CtrSM(owner, CounterChain4829_strides)); // gap = 0
CounterChain4829.connectInput("en", CounterChain4829_en);
CounterChain4829.connectInput("reset", metapipe5027_done);
DFEVar CounterChain4829_maxed = CounterChain4829.getOutput("saturated");
DFEVar CounterChain4829_done = stream.offset(CounterChain4829.getOutput("done"), -1);
OffsetExpr CounterChain4829_additionalOffset = new OffsetExpr();
CounterChain4829.connectInput("max0", CounterChain4829_max[0]);
DFEVar Counter4827 = CounterChain4829.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5027_MPSM metapipe5027 */
DFEVar metapipe5027_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4068 = Counter4827;
DblBufReg[] FixedPoint4068_chain = spatialUtils.getRegChain(
              "metapipe5027_FixedPoint4068", 3, FixedPoint4068,
              new DFEVar[]{void4975_done,seq5004_done,metapipe5025_done});
/* void4975_ParSM void4975 { */
SMIO void4975_sm = addStateMachine("void4975_sm", new void4975_ParSM(this));
    void4975_sm.connectInput("sm_en", void4975_en);
    void4975_done <== stream.offset(void4975_sm.getOutput("sm_done"),-1);
void4975_sm.connectInput("s0_done", metapipe4952_done);
metapipe4952_en <== void4975_sm.getOutput("s0_en");
void4975_sm.connectInput("s1_done", metapipe4973_done);
metapipe4973_en <== void4975_sm.getOutput("s1_en");
/* } void4975_ParSM void4975 */
/* Block void4975 Parallel { */
{
// FIFO FIFO4932 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO4932_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO4932_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO4932_readEn = dfeBool().newInstance(this);
DFEVar FIFO4932_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe4952 = ParPipeForeach(CounterChain4934) { */
{
/* MPSM to be emitted */
/* metapipe4952_MPSM metapipe4952 { */
SMIO metapipe4952_sm = addStateMachine("metapipe4952_sm", new metapipe4952_MPSM(this));
    metapipe4952_sm.connectInput("sm_en", metapipe4952_en);
    metapipe4952_done <== stream.offset(metapipe4952_sm.getOutput("sm_done"),-1);
DFEVar metapipe4952_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe4952_sm.connectInput("sm_numIter", metapipe4952_niter.cast(dfeUInt(32)));
DFEVar metapipe4952_rst_en = metapipe4952_sm.getOutput("rst_en");
metapipe4952_sm.connectInput("s0_done", void4940_done);
void4940_en <== metapipe4952_sm.getOutput("s0_en");
metapipe4952_sm.connectInput("s1_done", void4942_done);
void4942_en <== metapipe4952_sm.getOutput("s1_en");
metapipe4952_sm.connectInput("s2_done", pipe4950_done);
pipe4950_en <== metapipe4952_sm.getOutput("s2_en");
DFEVar Counter4933_max_0 = const4_FixedPoint3194;
DFEVar metapipe4952_datapath_en = metapipe4952_en;
DFEVar metapipe4952_ctr_en = void4940_done;
/* CustomCounterChain { */
DFEVar CounterChain4934_en = void4940_done;
DFEVar[] CounterChain4934_max = {const4_FixedPoint3194};
int[] CounterChain4934_strides = {1};
OffsetExpr CounterChain4934_offset = stream.makeOffsetAutoLoop("CounterChain4934_offset");
SMIO CounterChain4934 = addStateMachine("CounterChain4934_sm", new CounterChain4934_CtrSM(owner, CounterChain4934_strides)); // gap = 0
CounterChain4934.connectInput("en", CounterChain4934_en);
CounterChain4934.connectInput("reset", metapipe4952_done);
DFEVar CounterChain4934_maxed = CounterChain4934.getOutput("saturated");
DFEVar CounterChain4934_done = stream.offset(CounterChain4934.getOutput("done"), -1);
OffsetExpr CounterChain4934_additionalOffset = new OffsetExpr();
CounterChain4934.connectInput("max0", CounterChain4934_max[0]);
DFEVar Counter4933 = CounterChain4934.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4952_MPSM metapipe4952 */
DFEVar metapipe4952_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4075 = Counter4933;
DblBufReg[] FixedPoint4075_chain = spatialUtils.getRegChain(
              "metapipe4952_FixedPoint4075", 3, FixedPoint4075,
              new DFEVar[]{void4940_done,void4942_done,pipe4950_done});
// Unit pipe writtenIn(void4940) = List(Sym(4935))
//   reg4935 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg4935) = false
/* PipeSM void4940 { */
OffsetExpr void4940_offset = stream.makeOffsetAutoLoop("void4940_offset");
SMIO void4940_sm = addStateMachine("void4940_sm", new PipeSM(this, 1));
    void4940_sm.connectInput("sm_en", void4940_en);
    void4940_done <== stream.offset(void4940_sm.getOutput("sm_done"),-1-void4940_offset);
DFEVar void4940_rst_en = void4940_sm.getOutput("rst_en");
void4940_sm.connectInput("rst_done", void4940_rst_done);
void4940_rst_done <== stream.offset(void4940_rst_en, -void4940_offset-1);
void4940_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4940_sm.connectInput("ctr_done", stream.offset(void4940_sm.getOutput("ctr_en"), -1));
DFEVar void4940_datapath_en = void4940_en & ~void4940_rst_en;
DFEVar void4940_ctr_en = void4940_datapath_en;
/* } PipeSM void4940 */
/* Block void4940 Unitpipe { */
{
DFEVar FixedPoint4077 = FixedPoint3901 + FixedPoint4075;
DFEVar FixedPoint4936 = FixedPoint4077 * FixedPoint4585;
DFEVar FixedPoint4937 = FixedPoint4936 + FixedPoint4068;
/* Reg_write { */
reg4935_0_lib.write(FixedPoint4937, void4940_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void4940 Unitpipe */
DFEVar FixedPoint4941 = reg4935_0_lib.read(1); // reg read
MemoryCmdGenLib void4942 = new MemoryCmdGenLib(
              this,
              void4942_en, void4942_done,
              DRAM4587, FixedPoint4941,
              "DRAM4587_void4942_in",
              96,
              FIFO4932_readEn, FIFO4932_rdata);
FIFO4932_writeEn <== void4942_en;
FIFO4932_wdata <== FIFO4932_rdata;
/* ParPipeForeach pipe4950 = ParPipeForeach(CounterChain4944) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe4950 { */
OffsetExpr pipe4950_offset = stream.makeOffsetAutoLoop("pipe4950_offset");
SMIO pipe4950_sm = addStateMachine("pipe4950_sm", new PipeSM(this, 1));
    pipe4950_sm.connectInput("sm_en", pipe4950_en);
    pipe4950_done <== stream.offset(pipe4950_sm.getOutput("sm_done"),-1-pipe4950_offset);
DFEVar pipe4950_rst_en = pipe4950_sm.getOutput("rst_en");
pipe4950_sm.connectInput("rst_done", pipe4950_rst_done);
pipe4950_rst_done <== stream.offset(pipe4950_rst_en, -pipe4950_offset-1);
pipe4950_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4943_max_0 = pipe4950_sm.getOutput("ctr_maxOut_0");
pipe4950_sm.connectInput("ctr_done", CounterChain4944_done);
DFEVar pipe4950_datapath_en = pipe4950_sm.getOutput("ctr_en");
DFEVar pipe4950_ctr_en = pipe4950_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain4944_en = pipe4950_datapath_en;
DFEVar[] CounterChain4944_max = {Counter4943_max_0};
int[] CounterChain4944_strides = {1};
OffsetExpr CounterChain4944_offset = stream.makeOffsetAutoLoop("CounterChain4944_offset");
SMIO CounterChain4944 = addStateMachine("CounterChain4944_sm", new CounterChain4944_CtrSM(owner, CounterChain4944_strides)); // gap = 0
CounterChain4944.connectInput("en", CounterChain4944_en);
CounterChain4944.connectInput("reset", pipe4950_done);
DFEVar CounterChain4944_maxed = CounterChain4944.getOutput("saturated");
CounterChain4944_done <== stream.offset(CounterChain4944.getOutput("done"), -1);
OffsetExpr CounterChain4944_additionalOffset = new OffsetExpr();
CounterChain4944.connectInput("max0", CounterChain4944_max[0]);
DFEVar Counter4943 = CounterChain4944.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe4950 */
DFEVar pipe4950_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4087 = Counter4943;
// DFEVar Vector4945 = Par_pop_fifo(FIFO4932, 1);
FIFO4932_readEn <== pipe4950_ctr_en;
DFEVector<DFEVar> Vector4945 = FIFO4932_rdata;
DFEVar FixedPoint4090 = FixedPoint4075_chain[1].read() * const96_FixedPoint3195;
DFEVar FixedPoint4091 = FixedPoint4090 + FixedPoint4087;
DFEVector<DFEVar> Vector4093 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4091));
DFEVar FixedPoint4946 = Vector4945[0];
DFEVector<DFEVar> Vector4947 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4946));
/* Bram_store { */
BRAM4929_0.connectWport(FixedPoint4075_chain[1].read(), FixedPoint4087, Vector4947, pipe4950_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe4950 */
}
/* } ParPipeForeach metapipe4952 */
// FIFO FIFO4953 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO4953_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO4953_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO4953_readEn = dfeBool().newInstance(this);
DFEVar FIFO4953_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe4973 = ParPipeForeach(CounterChain4955) { */
{
/* MPSM to be emitted */
/* metapipe4973_MPSM metapipe4973 { */
SMIO metapipe4973_sm = addStateMachine("metapipe4973_sm", new metapipe4973_MPSM(this));
    metapipe4973_sm.connectInput("sm_en", metapipe4973_en);
    metapipe4973_done <== stream.offset(metapipe4973_sm.getOutput("sm_done"),-1);
DFEVar metapipe4973_niter = ((const96_FixedPoint3195 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe4973_sm.connectInput("sm_numIter", metapipe4973_niter.cast(dfeUInt(32)));
DFEVar metapipe4973_rst_en = metapipe4973_sm.getOutput("rst_en");
metapipe4973_sm.connectInput("s0_done", void4961_done);
void4961_en <== metapipe4973_sm.getOutput("s0_en");
metapipe4973_sm.connectInput("s1_done", void4963_done);
void4963_en <== metapipe4973_sm.getOutput("s1_en");
metapipe4973_sm.connectInput("s2_done", pipe4971_done);
pipe4971_en <== metapipe4973_sm.getOutput("s2_en");
DFEVar Counter4954_max_0 = const96_FixedPoint3195;
DFEVar metapipe4973_datapath_en = metapipe4973_en;
DFEVar metapipe4973_ctr_en = void4961_done;
/* CustomCounterChain { */
DFEVar CounterChain4955_en = void4961_done;
DFEVar[] CounterChain4955_max = {const96_FixedPoint3195};
int[] CounterChain4955_strides = {1};
OffsetExpr CounterChain4955_offset = stream.makeOffsetAutoLoop("CounterChain4955_offset");
SMIO CounterChain4955 = addStateMachine("CounterChain4955_sm", new CounterChain4955_CtrSM(owner, CounterChain4955_strides)); // gap = 0
CounterChain4955.connectInput("en", CounterChain4955_en);
CounterChain4955.connectInput("reset", metapipe4973_done);
DFEVar CounterChain4955_maxed = CounterChain4955.getOutput("saturated");
DFEVar CounterChain4955_done = stream.offset(CounterChain4955.getOutput("done"), -1);
OffsetExpr CounterChain4955_additionalOffset = new OffsetExpr();
CounterChain4955.connectInput("max0", CounterChain4955_max[0]);
DFEVar Counter4954 = CounterChain4955.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe4973_MPSM metapipe4973 */
DFEVar metapipe4973_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4103 = Counter4954;
DblBufReg[] FixedPoint4103_chain = spatialUtils.getRegChain(
              "metapipe4973_FixedPoint4103", 3, FixedPoint4103,
              new DFEVar[]{void4961_done,void4963_done,pipe4971_done});
// Unit pipe writtenIn(void4961) = List(Sym(4956))
//   reg4956 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg4956) = false
/* PipeSM void4961 { */
OffsetExpr void4961_offset = stream.makeOffsetAutoLoop("void4961_offset");
SMIO void4961_sm = addStateMachine("void4961_sm", new PipeSM(this, 1));
    void4961_sm.connectInput("sm_en", void4961_en);
    void4961_done <== stream.offset(void4961_sm.getOutput("sm_done"),-1-void4961_offset);
DFEVar void4961_rst_en = void4961_sm.getOutput("rst_en");
void4961_sm.connectInput("rst_done", void4961_rst_done);
void4961_rst_done <== stream.offset(void4961_rst_en, -void4961_offset-1);
void4961_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void4961_sm.connectInput("ctr_done", stream.offset(void4961_sm.getOutput("ctr_en"), -1));
DFEVar void4961_datapath_en = void4961_en & ~void4961_rst_en;
DFEVar void4961_ctr_en = void4961_datapath_en;
/* } PipeSM void4961 */
/* Block void4961 Unitpipe { */
{
DFEVar FixedPoint4105 = FixedPoint4068 + FixedPoint4103;
DFEVar FixedPoint4957 = FixedPoint4105 * FixedPoint4588;
DFEVar FixedPoint4958 = FixedPoint4957 + FixedPoint3903;
/* Reg_write { */
reg4956_0_lib.write(FixedPoint4958, void4961_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void4961 Unitpipe */
DFEVar FixedPoint4962 = reg4956_0_lib.read(1); // reg read
MemoryCmdGenLib void4963 = new MemoryCmdGenLib(
              this,
              void4963_en, void4963_done,
              DRAM4590, FixedPoint4962,
              "DRAM4590_void4963_in",
              96,
              FIFO4953_readEn, FIFO4953_rdata);
FIFO4953_writeEn <== void4963_en;
FIFO4953_wdata <== FIFO4953_rdata;
/* ParPipeForeach pipe4971 = ParPipeForeach(CounterChain4965) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe4971 { */
OffsetExpr pipe4971_offset = stream.makeOffsetAutoLoop("pipe4971_offset");
SMIO pipe4971_sm = addStateMachine("pipe4971_sm", new PipeSM(this, 1));
    pipe4971_sm.connectInput("sm_en", pipe4971_en);
    pipe4971_done <== stream.offset(pipe4971_sm.getOutput("sm_done"),-1-pipe4971_offset);
DFEVar pipe4971_rst_en = pipe4971_sm.getOutput("rst_en");
pipe4971_sm.connectInput("rst_done", pipe4971_rst_done);
pipe4971_rst_done <== stream.offset(pipe4971_rst_en, -pipe4971_offset-1);
pipe4971_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4964_max_0 = pipe4971_sm.getOutput("ctr_maxOut_0");
pipe4971_sm.connectInput("ctr_done", CounterChain4965_done);
DFEVar pipe4971_datapath_en = pipe4971_sm.getOutput("ctr_en");
DFEVar pipe4971_ctr_en = pipe4971_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain4965_en = pipe4971_datapath_en;
DFEVar[] CounterChain4965_max = {Counter4964_max_0};
int[] CounterChain4965_strides = {1};
OffsetExpr CounterChain4965_offset = stream.makeOffsetAutoLoop("CounterChain4965_offset");
SMIO CounterChain4965 = addStateMachine("CounterChain4965_sm", new CounterChain4965_CtrSM(owner, CounterChain4965_strides)); // gap = 0
CounterChain4965.connectInput("en", CounterChain4965_en);
CounterChain4965.connectInput("reset", pipe4971_done);
DFEVar CounterChain4965_maxed = CounterChain4965.getOutput("saturated");
CounterChain4965_done <== stream.offset(CounterChain4965.getOutput("done"), -1);
OffsetExpr CounterChain4965_additionalOffset = new OffsetExpr();
CounterChain4965.connectInput("max0", CounterChain4965_max[0]);
DFEVar Counter4964 = CounterChain4965.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe4971 */
DFEVar pipe4971_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4115 = Counter4964;
// DFEVar Vector4966 = Par_pop_fifo(FIFO4953, 1);
FIFO4953_readEn <== pipe4971_ctr_en;
DFEVector<DFEVar> Vector4966 = FIFO4953_rdata;
DFEVar FixedPoint4118 = FixedPoint4103_chain[1].read() * const96_FixedPoint3195;
DFEVar FixedPoint4119 = FixedPoint4118 + FixedPoint4115;
DFEVector<DFEVar> Vector4121 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4119));
DFEVar FixedPoint4967 = Vector4966[0];
DFEVector<DFEVar> Vector4968 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4967));
/* Bram_store { */
BRAM4930_0.connectWport(FixedPoint4103_chain[1].read(), FixedPoint4115, Vector4968, pipe4971_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe4971 */
}
/* } ParPipeForeach metapipe4973 */
}
/* } Block void4975 Parallel */
/* ParPipeForeach seq5004 = ParPipeForeach(CounterChain4978) { */
{
/* SeqSM to be emitted */
/* seq5004_SeqSM seq5004 { */
SMIO seq5004_sm = addStateMachine("seq5004_sm", new seq5004_SeqSM(this));
    seq5004_sm.connectInput("sm_en", seq5004_en);
    seq5004_done <== stream.offset(seq5004_sm.getOutput("sm_done"),-1);
DFEVar seq5004_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1)) * ((const96_FixedPoint3195 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
seq5004_sm.connectInput("sm_numIter", seq5004_niter.cast(dfeUInt(32)));
DFEVar seq5004_rst_en = seq5004_sm.getOutput("rst_en");
seq5004_sm.connectInput("s0_done", pipe4995_done);
pipe4995_en <== seq5004_sm.getOutput("s0_en");
seq5004_sm.connectInput("s1_done", void5002_done);
void5002_en <== seq5004_sm.getOutput("s1_en");
DFEVar Counter4976_max_0 = const4_FixedPoint3194;
DFEVar Counter4977_max_1 = const96_FixedPoint3195;
DFEVar seq5004_datapath_en = seq5004_en;
DFEVar seq5004_ctr_en = void5002_done;
/* CustomCounterChain { */
DFEVar CounterChain4978_en = void5002_done;
DFEVar[] CounterChain4978_max = {Counter4976_max_0,Counter4977_max_1};
int[] CounterChain4978_strides = {1,1};
OffsetExpr CounterChain4978_offset = stream.makeOffsetAutoLoop("CounterChain4978_offset");
SMIO CounterChain4978 = addStateMachine("CounterChain4978_sm", new CounterChain4978_CtrSM(owner, CounterChain4978_strides)); // gap = 0
CounterChain4978.connectInput("en", CounterChain4978_en);
CounterChain4978.connectInput("reset", seq5004_done);
DFEVar CounterChain4978_maxed = CounterChain4978.getOutput("saturated");
DFEVar CounterChain4978_done = stream.offset(CounterChain4978.getOutput("done"), -1);
OffsetExpr CounterChain4978_additionalOffset = new OffsetExpr();
CounterChain4978.connectInput("max0", CounterChain4978_max[0]);
DFEVar Counter4976 = CounterChain4978.getOutput("counter0");
CounterChain4978.connectInput("max1", CounterChain4978_max[1]);
DFEVar Counter4977 = CounterChain4978.getOutput("counter1");
/* } CustomCounterChain */
/* } seq5004_SeqSM seq5004 */
DFEVar seq5004_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4133 = Counter4976;
DFEVar FixedPoint4134 = Counter4977;
/* ParPipeReduce pipe4995 = ParPipeReduce(CounterChain4981, reg4979) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe4995 controller { */
/* PipeSM pipe4995 { */
OffsetExpr pipe4995_offset = stream.makeOffsetAutoLoop("pipe4995_offset");
SMIO pipe4995_sm = addStateMachine("pipe4995_sm", new PipeSM(this, 1));
    pipe4995_sm.connectInput("sm_en", pipe4995_en);
    pipe4995_done <== stream.offset(pipe4995_sm.getOutput("sm_done"),-1-pipe4995_offset);
DFEVar pipe4995_rst_en = pipe4995_sm.getOutput("rst_en");
pipe4995_sm.connectInput("rst_done", pipe4995_rst_done);
pipe4995_rst_done <== stream.offset(pipe4995_rst_en, -pipe4995_offset-1);
pipe4995_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter4980_max_0 = pipe4995_sm.getOutput("ctr_maxOut_0");
pipe4995_sm.connectInput("ctr_done", CounterChain4981_done);
DFEVar pipe4995_datapath_en = pipe4995_sm.getOutput("ctr_en");
DFEVar pipe4995_loopLengthVal = pipe4995_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe4995_redLoopChain = control.count.makeCounterChain(pipe4995_datapath_en);
DFEVar pipe4995_redLoopCtr = pipe4995_redLoopChain.addCounter(pipe4995_loopLengthVal, 1);
DFEVar pipe4995_redLoop_done = stream.offset(pipe4995_redLoopChain.getCounterWrap(pipe4995_redLoopCtr), -1);
DFEVar pipe4995_ctr_en = pipe4995_datapath_en & pipe4995_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain4981_en = pipe4995_datapath_en & pipe4995_redLoop_done;
DFEVar[] CounterChain4981_max = {Counter4980_max_0};
int[] CounterChain4981_strides = {1};
OffsetExpr CounterChain4981_offset = stream.makeOffsetAutoLoop("CounterChain4981_offset");
SMIO CounterChain4981 = addStateMachine("CounterChain4981_sm", new CounterChain4981_CtrSM(owner, CounterChain4981_strides)); // gap = 0
CounterChain4981.connectInput("en", CounterChain4981_en);
CounterChain4981.connectInput("reset", pipe4995_done);
DFEVar CounterChain4981_maxed = CounterChain4981.getOutput("saturated");
CounterChain4981_done <== stream.offset(CounterChain4981.getOutput("done"), -1);
OffsetExpr CounterChain4981_additionalOffset = new OffsetExpr();
CounterChain4981.connectInput("max0", CounterChain4981_max[0]);
DFEVector<DFEVar> Counter4980 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter4980[0] <== CounterChain4981.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter4980[i+1] <== CounterChain4981.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe4995 */
/* } pipe4995 controller */
/* ParPipeReduce pipe4995 par loop { */
DFEVar FixedPoint4146 = Counter4980[0];
DFEVar FixedPoint4147 = Counter4980[1];
/* } pipe4995 par loop */
DFEVar FixedPoint4992 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe4995 func block { */
DFEVar FixedPoint4148 = FixedPoint4133 * const96_FixedPoint3195;
DFEVar FixedPoint4149 = FixedPoint4148 + FixedPoint4146;
DFEVar FixedPoint4150 = FixedPoint4148 + FixedPoint4147;
DFEVector<DFEVar> Vector4151 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint4149,FixedPoint4150));
/* Bram_load { */
// All readers share row. vectorized
DFEVector<DFEVar> Vector4982 = BRAM4929_0.connectRport(FixedPoint4133, new DFEVectorType<DFEVar>(FixedPoint4133.getType(), 2).newInstance(this, Arrays.asList(FixedPoint4133,FixedPoint4133)), new int[] {1}); //r8
/* } Bram_load */
DFEVar FixedPoint4155 = FixedPoint4146 * const96_FixedPoint3195;
DFEVar FixedPoint4157 = FixedPoint4155 + FixedPoint4134;
DFEVar FixedPoint4156 = FixedPoint4147 * const96_FixedPoint3195;
DFEVar FixedPoint4158 = FixedPoint4156 + FixedPoint4134;
DFEVector<DFEVar> Vector4159 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint4157,FixedPoint4158));
/* Bram_load { */
// All readers share column. vectorized 
DFEVector<DFEVar> Vector4983 = BRAM4930_0.connectRport(new DFEVectorType<DFEVar>(FixedPoint4146.getType(), 2).newInstance(this, Arrays.asList(FixedPoint4146,FixedPoint4147)), FixedPoint4134, new int[] {1}); //r7
/* } Bram_load */
// FixedPoint4984 is just a register read
// FixedPoint4985 already emitted in pipe4995;
// FixedPoint4986 already emitted in pipe4995;
// FixedPoint4987 already emitted in pipe4995;
// FixedPoint4988 already emitted in pipe4995;
// FixedPoint4989 already emitted in pipe4995;
// FixedPoint4990 already emitted in pipe4995;
// FixedPoint4991 already emitted in pipe4995;
// FixedPoint4992 already emitted in pipe4995;
/* Reg_write { */
// Write to accumulator register
DFEVar reg4979_en = pipe4995_datapath_en & pipe4995_redLoop_done;
Accumulator.Params reg4979_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe4995_done /*because _rst_en goes hi on each iter*/).withEnable(reg4979_en);
DFEVar reg4979 = Reductions.accumulator.makeAccumulator(FixedPoint4992, reg4979_accParams);
reg4979_1_lib.write(reg4979, pipe4995_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 2 */
/* } pipe4995 func block */
new pipe4995_reduce_kernel(owner , Vector4982,Vector4983 , FixedPoint4992 , FixedPoint4133,FixedPoint4134,FixedPoint4146,FixedPoint4147,const96_FixedPoint3195); // Reduce kernel
}
/* } ParPipeReduce pipe4995 */
// Unit pipe writtenIn(void5002) = List(Sym(4931))
//   BRAM4931 = Reflect(Bram_new(Sym(3197),Sym(285)),Summary(mutable),List()), isAccum(BRAM4931) = true
/* PipeSM void5002 { */
OffsetExpr void5002_offset = stream.makeOffsetAutoLoop("void5002_offset");
SMIO void5002_sm = addStateMachine("void5002_sm", new PipeSM(this, 1));
    void5002_sm.connectInput("sm_en", void5002_en);
    void5002_done <== stream.offset(void5002_sm.getOutput("sm_done"),-1-void5002_offset);
DFEVar void5002_rst_en = void5002_sm.getOutput("rst_en");
void5002_sm.connectInput("rst_done", void5002_rst_done);
void5002_rst_done <== stream.offset(void5002_rst_en, -void5002_offset-1);
void5002_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5002_sm.connectInput("ctr_done", stream.offset(void5002_sm.getOutput("ctr_en"), -1));
DFEVar void5002_datapath_en = void5002_en & ~void5002_rst_en;
DFEVar void5002_ctr_en = void5002_datapath_en;
/* } PipeSM void5002 */
/* Block void5002 Unitpipe { */
{
DFEVar FixedPoint4148 = FixedPoint4133 * const96_FixedPoint3195;
DFEVar FixedPoint4179 = FixedPoint4148 + FixedPoint4134;
/* Bram_load { */
DFEVar FixedPoint4996 = BRAM4931_0.connectRport(FixedPoint4133, FixedPoint4134, new int[] {0}); //r6
/* } Bram_load */
DFEVar FixedPoint4997 = reg4979_1; // reg read
DFEVar Bit4182 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit4182 <== FixedPoint4068_chain[0].read() === const0_FixedPoint285;
DFEVar FixedPoint4998 = Bit4182 ? const0_FixedPoint285 : FixedPoint4996 ;
DFEVar FixedPoint4999 = FixedPoint4998 + FixedPoint4997;
/* Bram_store { */
BRAM4931_0.connectWport(stream.offset(FixedPoint4133, -void5002_offset), stream.offset(FixedPoint4134, -void5002_offset),
                stream.offset(FixedPoint4999, -void5002_offset), stream.offset(void5002_done /* Not sure if this is right */, -void5002_offset), new int[] {0}); //w4
BRAM4931_1.connectWport(stream.offset(FixedPoint4133, -void5002_offset), stream.offset(FixedPoint4134, -void5002_offset),
                stream.offset(FixedPoint4999, -void5002_offset), stream.offset(void5002_done /* Not sure if this is right */, -void5002_offset), new int[] {0}); //w4
/* } Bram_store */
}
/* } Block void5002 Unitpipe */
}
/* } ParPipeForeach seq5004 */
// FIFO FIFO5005 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint333, const0_FixedPoint285);
DFEVector<DFEVar> FIFO5005_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO5005_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO5005_readEn = dfeBool().newInstance(this);
DFEVar FIFO5005_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe5025 = ParPipeForeach(CounterChain5007) { */
{
/* MPSM to be emitted */
/* metapipe5025_MPSM metapipe5025 { */
SMIO metapipe5025_sm = addStateMachine("metapipe5025_sm", new metapipe5025_MPSM(this));
    metapipe5025_sm.connectInput("sm_en", metapipe5025_en);
    metapipe5025_done <== stream.offset(metapipe5025_sm.getOutput("sm_done"),-1);
DFEVar metapipe5025_niter = ((const4_FixedPoint3194 - const0_FixedPoint285) / (const1_FixedPoint11 * 1));
metapipe5025_sm.connectInput("sm_numIter", metapipe5025_niter.cast(dfeUInt(32)));
DFEVar metapipe5025_rst_en = metapipe5025_sm.getOutput("rst_en");
metapipe5025_sm.connectInput("s0_done", pipe5015_done);
pipe5015_en <== metapipe5025_sm.getOutput("s0_en");
metapipe5025_sm.connectInput("s1_done", void5021_done);
void5021_en <== metapipe5025_sm.getOutput("s1_en");
metapipe5025_sm.connectInput("s2_done", void5023_done);
void5023_en <== metapipe5025_sm.getOutput("s2_en");
DFEVar Counter5006_max_0 = const4_FixedPoint3194;
DFEVar metapipe5025_datapath_en = metapipe5025_en;
DFEVar metapipe5025_ctr_en = pipe5015_done;
/* CustomCounterChain { */
DFEVar CounterChain5007_en = pipe5015_done;
DFEVar[] CounterChain5007_max = {Counter5006_max_0};
int[] CounterChain5007_strides = {1};
OffsetExpr CounterChain5007_offset = stream.makeOffsetAutoLoop("CounterChain5007_offset");
SMIO CounterChain5007 = addStateMachine("CounterChain5007_sm", new CounterChain5007_CtrSM(owner, CounterChain5007_strides)); // gap = 0
CounterChain5007.connectInput("en", CounterChain5007_en);
CounterChain5007.connectInput("reset", metapipe5025_done);
DFEVar CounterChain5007_maxed = CounterChain5007.getOutput("saturated");
DFEVar CounterChain5007_done = stream.offset(CounterChain5007.getOutput("done"), -1);
OffsetExpr CounterChain5007_additionalOffset = new OffsetExpr();
CounterChain5007.connectInput("max0", CounterChain5007_max[0]);
DFEVar Counter5006 = CounterChain5007.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe5025_MPSM metapipe5025 */
DFEVar metapipe5025_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4194 = Counter5006;
DblBufReg[] FixedPoint4194_chain = spatialUtils.getRegChain(
              "metapipe5025_FixedPoint4194", 3, FixedPoint4194,
              new DFEVar[]{pipe5015_done,void5021_done,void5023_done});
/* ParPipeForeach pipe5015 = ParPipeForeach(CounterChain5009) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe5015 { */
OffsetExpr pipe5015_offset = stream.makeOffsetAutoLoop("pipe5015_offset");
SMIO pipe5015_sm = addStateMachine("pipe5015_sm", new PipeSM(this, 1));
    pipe5015_sm.connectInput("sm_en", pipe5015_en);
    pipe5015_done <== stream.offset(pipe5015_sm.getOutput("sm_done"),-1-pipe5015_offset);
DFEVar pipe5015_rst_en = pipe5015_sm.getOutput("rst_en");
pipe5015_sm.connectInput("rst_done", pipe5015_rst_done);
pipe5015_rst_done <== stream.offset(pipe5015_rst_en, -pipe5015_offset-1);
pipe5015_sm.connectInput("sm_maxIn_0", const96_FixedPoint3195);
DFEVar Counter5008_max_0 = pipe5015_sm.getOutput("ctr_maxOut_0");
pipe5015_sm.connectInput("ctr_done", CounterChain5009_done);
DFEVar pipe5015_datapath_en = pipe5015_sm.getOutput("ctr_en");
DFEVar pipe5015_ctr_en = pipe5015_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain5009_en = pipe5015_datapath_en;
DFEVar[] CounterChain5009_max = {Counter5008_max_0};
int[] CounterChain5009_strides = {1};
OffsetExpr CounterChain5009_offset = stream.makeOffsetAutoLoop("CounterChain5009_offset");
SMIO CounterChain5009 = addStateMachine("CounterChain5009_sm", new CounterChain5009_CtrSM(owner, CounterChain5009_strides)); // gap = 0
CounterChain5009.connectInput("en", CounterChain5009_en);
CounterChain5009.connectInput("reset", pipe5015_done);
DFEVar CounterChain5009_maxed = CounterChain5009.getOutput("saturated");
CounterChain5009_done <== stream.offset(CounterChain5009.getOutput("done"), -1);
OffsetExpr CounterChain5009_additionalOffset = new OffsetExpr();
CounterChain5009.connectInput("max0", CounterChain5009_max[0]);
DFEVar Counter5008 = CounterChain5009.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe5015 */
DFEVar pipe5015_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint4197 = Counter5008;
DFEVar FixedPoint4198 = FixedPoint4194 * const96_FixedPoint3195;
DFEVar FixedPoint4199 = FixedPoint4198 + FixedPoint4197;
DFEVector<DFEVar> Vector4200 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint4199));
/* Bram_load { */
DFEVector<DFEVar> Vector5010 = new DFEVectorType<DFEVar>(BRAM4931_1.type, 1).newInstance(this, Arrays.asList(BRAM4931_1.connectRport(FixedPoint4194, FixedPoint4197, new int[] {1}))); //r5
/* } Bram_load */
DFEVar Bit4204 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit4204 <== FixedPoint4197 < const96_FixedPoint3195;
DFEVector<DFEVar> Vector4205 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit4204));
DFEVar FixedPoint5011 = Vector5010[0];
DFEVector<DFEVar> Vector5012 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint5011));
// Par_push_fifo(FIFO5005, Vector5012, Vector4205, true);
FIFO5005_writeEn <== pipe5015_ctr_en;
FIFO5005_wdata <== Vector5012;
}
/* } ParPipeForeach pipe5015 */
// Unit pipe writtenIn(void5021) = List(Sym(5016))
//   reg5016 = Reflect(Reg_new(Sym(285)),Summary(mutable),List()), isAccum(reg5016) = false
/* PipeSM void5021 { */
OffsetExpr void5021_offset = stream.makeOffsetAutoLoop("void5021_offset");
SMIO void5021_sm = addStateMachine("void5021_sm", new PipeSM(this, 1));
    void5021_sm.connectInput("sm_en", void5021_en);
    void5021_done <== stream.offset(void5021_sm.getOutput("sm_done"),-1-void5021_offset);
DFEVar void5021_rst_en = void5021_sm.getOutput("rst_en");
void5021_sm.connectInput("rst_done", void5021_rst_done);
void5021_rst_done <== stream.offset(void5021_rst_en, -void5021_offset-1);
void5021_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void5021_sm.connectInput("ctr_done", stream.offset(void5021_sm.getOutput("ctr_en"), -1));
DFEVar void5021_datapath_en = void5021_en & ~void5021_rst_en;
DFEVar void5021_ctr_en = void5021_datapath_en;
/* } PipeSM void5021 */
/* Block void5021 Unitpipe { */
{
DFEVar FixedPoint4211 = FixedPoint3901 + FixedPoint4194_chain[0].read();
DFEVar FixedPoint5017 = FixedPoint4211 * FixedPoint4588;
DFEVar FixedPoint5018 = FixedPoint5017 + FixedPoint3903;
/* Reg_write { */
reg5016_0_lib.write(FixedPoint5018, void5021_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@abde0e7, numDuplicates = 1 */
}
/* } Block void5021 Unitpipe */
DFEVar FixedPoint5022 = reg5016_0_lib.read(1); // reg read
// void5023: Offchip_store_cmd(DRAM4592,FIFO5005, FixedPoint5022, const96_FixedPoint3195, 1)
MemoryCmdStLib void5023 = new MemoryCmdStLib(
          this,
          void5023_en, void5023_done,
          DRAM4592, FixedPoint5022,
          "DRAM4592_void5023_out",
          const96_FixedPoint3195,
          FIFO5005_writeEn, FIFO5005_wdata);
FIFO5005_readEn <== void5023_en;
}
/* } ParPipeForeach metapipe5025 */
}
/* } ParPipeForeach metapipe5027 */
}
/* } Block void5029 Parallel */
}
/* } ParPipeForeach metapipe5031 */
























// rdone signals for N-Buffers go here
reg4956_0_lib.connectStageCtrl(void4963_done, void4963_en, new int[] { 1 }); /*read*/
reg4956_0_lib.connectStageCtrl(void4961_done, void4961_en, new int[] { 0 }); /*write*/
reg4956_0_lib.connectUnwrittenPorts(new int[] {1});
reg4956_0_lib.connectUnreadPorts(new int[] {0});
reg4956_0_lib.connectUntouchedPorts(new int[] {});
reg4956_0_lib.connectDummyBroadcast();
BRAM4931_1.connectStageCtrl(metapipe5025_done, metapipe5025_en, new int[] { 1 }); /*read*/
BRAM4931_1.connectStageCtrl(seq5004_done, seq5004_en, new int[] { 0 }); /*write*/
BRAM4931_1.connectUnwrittenPorts(new int[] {1});
BRAM4931_1.connectUnreadPorts(new int[] {0});
BRAM4931_1.connectUntouchedPorts(new int[] {});
BRAM4931_1.connectDummyBroadcast();
BRAM4930_0.connectStageCtrl(seq5004_done, seq5004_en, new int[] { 1 }); /*read*/
BRAM4930_0.connectStageCtrl(void4975_done, void4975_en, new int[] { 0 }); /*write*/
BRAM4930_0.connectUnwrittenPorts(new int[] {1});
BRAM4930_0.connectUnreadPorts(new int[] {0});
BRAM4930_0.connectUntouchedPorts(new int[] {});
BRAM4930_0.connectDummyBroadcast();
reg4836_0_lib.connectStageCtrl(void4843_done, void4843_en, new int[] { 1 }); /*read*/
reg4836_0_lib.connectStageCtrl(void4841_done, void4841_en, new int[] { 0 }); /*write*/
reg4836_0_lib.connectUnwrittenPorts(new int[] {1});
reg4836_0_lib.connectUnreadPorts(new int[] {0});
reg4836_0_lib.connectUntouchedPorts(new int[] {});
reg4836_0_lib.connectDummyBroadcast();
BRAM4830_0.connectStageCtrl(seq4905_done, seq4905_en, new int[] { 1 }); /*read*/
BRAM4830_0.connectStageCtrl(void4876_done, void4876_en, new int[] { 0 }); /*write*/
BRAM4830_0.connectUnwrittenPorts(new int[] {1});
BRAM4830_0.connectUnreadPorts(new int[] {0});
BRAM4830_0.connectUntouchedPorts(new int[] {});
BRAM4830_0.connectDummyBroadcast();
reg5016_0_lib.connectStageCtrl(void5023_done, void5023_en, new int[] { 1 }); /*read*/
reg5016_0_lib.connectStageCtrl(void5021_done, void5021_en, new int[] { 0 }); /*write*/
reg5016_0_lib.connectUnwrittenPorts(new int[] {1});
reg5016_0_lib.connectUnreadPorts(new int[] {0});
reg5016_0_lib.connectUntouchedPorts(new int[] {});
reg5016_0_lib.connectDummyBroadcast();
reg4917_0_lib.connectStageCtrl(void4924_done, void4924_en, new int[] { 1 }); /*read*/
reg4917_0_lib.connectStageCtrl(void4922_done, void4922_en, new int[] { 0 }); /*write*/
reg4917_0_lib.connectUnwrittenPorts(new int[] {1});
reg4917_0_lib.connectUnreadPorts(new int[] {0});
reg4917_0_lib.connectUntouchedPorts(new int[] {});
reg4917_0_lib.connectDummyBroadcast();
BRAM4832_1.connectStageCtrl(metapipe4926_done, metapipe4926_en, new int[] { 1 }); /*read*/
BRAM4832_1.connectStageCtrl(seq4905_done, seq4905_en, new int[] { 0 }); /*write*/
BRAM4832_1.connectUnwrittenPorts(new int[] {1});
BRAM4832_1.connectUnreadPorts(new int[] {0});
BRAM4832_1.connectUntouchedPorts(new int[] {});
BRAM4832_1.connectDummyBroadcast();
BRAM4929_0.connectStageCtrl(seq5004_done, seq5004_en, new int[] { 1 }); /*read*/
BRAM4929_0.connectStageCtrl(void4975_done, void4975_en, new int[] { 0 }); /*write*/
BRAM4929_0.connectUnwrittenPorts(new int[] {1});
BRAM4929_0.connectUnreadPorts(new int[] {0});
BRAM4929_0.connectUntouchedPorts(new int[] {});
BRAM4929_0.connectDummyBroadcast();
BRAM4831_0.connectStageCtrl(seq4905_done, seq4905_en, new int[] { 1 }); /*read*/
BRAM4831_0.connectStageCtrl(void4876_done, void4876_en, new int[] { 0 }); /*write*/
BRAM4831_0.connectUnwrittenPorts(new int[] {1});
BRAM4831_0.connectUnreadPorts(new int[] {0});
BRAM4831_0.connectUntouchedPorts(new int[] {});
BRAM4831_0.connectDummyBroadcast();
reg4857_0_lib.connectStageCtrl(void4864_done, void4864_en, new int[] { 1 }); /*read*/
reg4857_0_lib.connectStageCtrl(void4862_done, void4862_en, new int[] { 0 }); /*write*/
reg4857_0_lib.connectUnwrittenPorts(new int[] {1});
reg4857_0_lib.connectUnreadPorts(new int[] {0});
reg4857_0_lib.connectUntouchedPorts(new int[] {});
reg4857_0_lib.connectDummyBroadcast();
reg4935_0_lib.connectStageCtrl(void4942_done, void4942_en, new int[] { 1 }); /*read*/
reg4935_0_lib.connectStageCtrl(void4940_done, void4940_en, new int[] { 0 }); /*write*/
reg4935_0_lib.connectUnwrittenPorts(new int[] {1});
reg4935_0_lib.connectUnreadPorts(new int[] {0});
reg4935_0_lib.connectUntouchedPorts(new int[] {});
reg4935_0_lib.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
