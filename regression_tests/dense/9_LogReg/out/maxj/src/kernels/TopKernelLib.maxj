/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);

















int DRAM2535 = 1048576;

int DRAM2536 = 2097152;

int DRAM2537 = 3145728;






/* Emitting Hwblock dependencies { */
// Dep: const384_FixedPoint5 = ConstFixPt(384,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const0_FixedPoint244 = ConstFixPt(0,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$Signed,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B32,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: String1 = ArrayApply(Sym(0),Const(0))
// Dep: FixedPoint2 = Tpes_String_to_fixpt(Sym(1))
// Dep: int3 = Tpes_Fix_to_int(Sym(2))
// Dep: const10p0_FloatPoint8 = ConstFltPt(10.0,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B24,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B8)
// Dep: int6 = Tpes_Fix_to_int(Sym(5))
// Dep: DeliteArray2448 = Reflect(DeliteArrayFromFunction(Sym(3),<function1>),Summary(maySimple),List())
// Dep: DeliteArray2488 = Reflect(DeliteArrayFromFunction(Sym(3),<function1>),Summary(maySimple),List(Sym(2448)))
// Dep: int2530 = DeliteArrayLength(Sym(2488))
// Dep: argin2529 = Reflect(Argin_new(Sym(244)),Summary(mutable),List())
DFEVar FixedPoint2531 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint2531 <== argin2529;
// Dep: FixedPoint2531 = Tpes_Int_to_fix(Sym(2530))
// Dep: void2532 = Reflect(Set_arg(Sym(2529),Sym(2531)),Summary(mayRead(Sym(2529)), mstRead(Sym(2529)), mayWrite(Sym(2529)), mstWrite(Sym(2529))),List(Sym(2529)))

// Dep: FixedPoint2533 = Reflect(Reg_read(Sym(2529)),Summary(mayRead(Sym(2529)), mstRead(Sym(2529))),List(Sym(2529), Sym(2532)))
// Dep: FixedPoint2534 = FixPt_Mul(Sym(2533),Sym(5))
DFEVar FixedPoint2534 = FixedPoint2533 * const384_FixedPoint5;
// Dep: DRAM2537 = Reflect(Offchip_new(Sym(5)),Summary(mutable),List())
// Dep: DRAM2535 = Reflect(Offchip_new(Sym(2534)),Summary(mutable),List())
// Dep: DRAM2536 = Reflect(Offchip_new(Sym(2533)),Summary(mutable),List())
// Dep: const1p0_FloatPoint147 = ConstFltPt(1.0,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B24,LogReg$@5bebc341.type#spatial.shared.SpatialIdentifiers$B8)
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(2610) -> Map(), Sym(2703) -> Map(Sym(2110) -> _chain[1].read()), Sym(2725) -> Map(Sym(2110) -> _chain[2].read()), Sym(2684) -> Map(Sym(2110) -> _chain[0].read()), Sym(2623) -> Map(Sym(2035) -> _chain[1].read()), Sym(2642) -> Map(), Sym(2612) -> Map(Sym(2035) -> _chain[0].read()), Sym(2754) -> Map(Sym(2029) -> _chain[1].read()), Sym(2727) -> Map(Sym(2029) -> _chain[0].read()), Sym(2674) -> Map()) */
DFEVar void2798_en = top_en;
top_done <== void2798_done;
// Hwblock: childrenOf(void2798) = List(Sym(2595), Sym(2756), Sym(2781), Sym(2796))
/* void2798_SeqSM void2798 { */
SMIO void2798_sm = addStateMachine("void2798_sm", new void2798_SeqSM(this));
    void2798_sm.connectInput("sm_en", void2798_en);
    void2798_done <== stream.offset(void2798_sm.getOutput("sm_done"),-1);
void2798_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2798_rst_en = void2798_sm.getOutput("rst_en");
void2798_sm.connectInput("s0_done", void2595_done);
void2595_en <== void2798_sm.getOutput("s0_en");
void2798_sm.connectInput("s1_done", metapipe2756_done);
metapipe2756_en <== void2798_sm.getOutput("s1_en");
void2798_sm.connectInput("s2_done", pipe2781_done);
pipe2781_en <== void2798_sm.getOutput("s2_en");
void2798_sm.connectInput("s3_done", void2796_done);
void2796_en <== void2798_sm.getOutput("s3_en");
DFEVar void2798_datapath_en = void2798_en & ~void2798_rst_en;
DFEVar void2798_ctr_en = void2798_datapath_en;
/* } void2798_SeqSM void2798 */
// FIFO FIFO2581 = Fifo_new[dfeFloat(8,24)](const512_FixedPoint262, const0_FloatPoint257);
DFEVector<DFEVar> FIFO2581_rdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVector<DFEVar> FIFO2581_wdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVar FIFO2581_readEn = dfeBool().newInstance(this);
DFEVar FIFO2581_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2595) = List()
/* void2595_MPSM void2595 { */
SMIO void2595_sm = addStateMachine("void2595_sm", new void2595_MPSM(this));
    void2595_sm.connectInput("sm_en", void2595_en);
    void2595_done <== stream.offset(void2595_sm.getOutput("sm_done"),-1);
void2595_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2595_rst_en = void2595_sm.getOutput("rst_en");
void2595_sm.connectInput("s0_done", void2582_done);
void2582_en <== void2595_sm.getOutput("s0_en");
void2595_sm.connectInput("s1_done", pipe2593_done);
pipe2593_en <== void2595_sm.getOutput("s1_en");
DFEVar void2595_datapath_en = void2595_en & ~void2595_rst_en;
DFEVar void2595_ctr_en = void2595_datapath_en;
/* } void2595_MPSM void2595 */
/* Block void2595 Unitpipe { */
{
MemoryCmdGenLib void2582 = new MemoryCmdGenLib(
              this,
              void2582_en, void2582_done,
              DRAM2537, const0_FixedPoint244,
              "DRAM2537_void2582_in",
              384,
              FIFO2581_readEn, FIFO2581_rdata);
FIFO2581_writeEn <== void2582_en;
FIFO2581_wdata <== FIFO2581_rdata;
/* ParPipeForeach pipe2593 = ParPipeForeach(CounterChain2584) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2593 { */
OffsetExpr pipe2593_offset = stream.makeOffsetAutoLoop("pipe2593_offset");
SMIO pipe2593_sm = addStateMachine("pipe2593_sm", new PipeSM(this, 1));
    pipe2593_sm.connectInput("sm_en", pipe2593_en);
    pipe2593_done <== stream.offset(pipe2593_sm.getOutput("sm_done"),-1-pipe2593_offset);
DFEVar pipe2593_rst_en = pipe2593_sm.getOutput("rst_en");
pipe2593_sm.connectInput("rst_done", pipe2593_rst_done);
pipe2593_rst_done <== stream.offset(pipe2593_rst_en, -pipe2593_offset-1);
pipe2593_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2583_max_0 = pipe2593_sm.getOutput("ctr_maxOut_0");
pipe2593_sm.connectInput("ctr_done", CounterChain2584_done);
DFEVar pipe2593_datapath_en = pipe2593_sm.getOutput("ctr_en");
DFEVar pipe2593_ctr_en = pipe2593_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2584_en = pipe2593_datapath_en;
DFEVar[] CounterChain2584_max = {const384_FixedPoint5};
int[] CounterChain2584_strides = {1};
OffsetExpr CounterChain2584_offset = stream.makeOffsetAutoLoop("CounterChain2584_offset");
SMIO CounterChain2584 = addStateMachine("CounterChain2584_sm", new CounterChain2584_CtrSM(owner, CounterChain2584_strides)); // gap = 0
CounterChain2584.connectInput("en", CounterChain2584_en);
CounterChain2584.connectInput("reset", pipe2593_done);
DFEVar CounterChain2584_maxed = CounterChain2584.getOutput("saturated");
CounterChain2584_done <== stream.offset(CounterChain2584.getOutput("done"), -1);
OffsetExpr CounterChain2584_additionalOffset = new OffsetExpr();
CounterChain2584.connectInput("max0", CounterChain2584_max[0]);
DFEVector<DFEVar> Counter2583 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2583[0] <== CounterChain2584.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2583[i+1] <== CounterChain2584.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2593 */
DFEVar pipe2593_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1994 = Counter2583[0];
DFEVar FixedPoint1995 = Counter2583[1];
DFEVar FixedPoint1996 = Counter2583[2];
DFEVar FixedPoint1997 = Counter2583[3];
// DFEVar Vector2585 = Par_pop_fifo(FIFO2581, 4);
FIFO2581_readEn <== pipe2593_ctr_en;
DFEVector<DFEVar> Vector2585 = FIFO2581_rdata;
DFEVector<DFEVar> Vector2005 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint1994,FixedPoint1995,FixedPoint1996,FixedPoint1997));
DFEVar FloatPoint2586 = Vector2585[0];
DFEVar FloatPoint2587 = Vector2585[1];
DFEVar FloatPoint2588 = Vector2585[2];
DFEVar FloatPoint2589 = Vector2585[3];
DFEVector<DFEVar> Vector2590 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2586,FloatPoint2587,FloatPoint2588,FloatPoint2589));
/* Bram_store { */
BRAM2580_0.connectWport(Vector2005, Vector2590, pipe2593_datapath_en, new int[] {0}); //w8
BRAM2580_1.connectWport(Vector2005, Vector2590, pipe2593_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2593 */
}
/* } Block void2595 Unitpipe */
/* ParPipeReduce metapipe2756 = ParPipeReduce(CounterChain2599, BRAM2596) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe2756 controller { */
/* metapipe2756_MPSM metapipe2756 { */
SMIO metapipe2756_sm = addStateMachine("metapipe2756_sm", new metapipe2756_MPSM(this));
    metapipe2756_sm.connectInput("sm_en", metapipe2756_en);
    metapipe2756_done <== stream.offset(metapipe2756_sm.getOutput("sm_done"),-1);
DFEVar metapipe2756_niter = ((FixedPoint2597 - const0_FixedPoint244) / (const192_FixedPoint1668 * 1));
metapipe2756_sm.connectInput("sm_numIter", metapipe2756_niter.cast(dfeUInt(32)));
DFEVar metapipe2756_rst_en = metapipe2756_sm.getOutput("rst_en");
metapipe2756_sm.connectInput("s0_done", void2642_done);
void2642_en <== metapipe2756_sm.getOutput("s0_en");
metapipe2756_sm.connectInput("s1_done", metapipe2727_done);
metapipe2727_en <== metapipe2756_sm.getOutput("s1_en");
metapipe2756_sm.connectInput("s2_done", pipe2754_done);
pipe2754_en <== metapipe2756_sm.getOutput("s2_en");
DFEVar Counter2598_max_0 = FixedPoint2597;
DFEVar metapipe2756_datapath_en = metapipe2756_en;
DFEVar metapipe2756_ctr_en = void2642_done;
/* CustomCounterChain { */
DFEVar CounterChain2599_en = void2642_done;
DFEVar[] CounterChain2599_max = {FixedPoint2597};
int[] CounterChain2599_strides = {192};
OffsetExpr CounterChain2599_offset = stream.makeOffsetAutoLoop("CounterChain2599_offset");
SMIO CounterChain2599 = addStateMachine("CounterChain2599_sm", new CounterChain2599_CtrSM(owner, CounterChain2599_strides)); // gap = 0
CounterChain2599.connectInput("en", CounterChain2599_en);
CounterChain2599.connectInput("reset", metapipe2756_done);
DFEVar CounterChain2599_maxed = CounterChain2599.getOutput("saturated");
DFEVar CounterChain2599_done = stream.offset(CounterChain2599.getOutput("done"), -1);
OffsetExpr CounterChain2599_additionalOffset = new OffsetExpr();
CounterChain2599.connectInput("max0", CounterChain2599_max[0]);
DFEVar Counter2598 = CounterChain2599.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2756_MPSM metapipe2756 */
/* } metapipe2756 controller */
/* ParPipeReduce metapipe2756 par loop { */
DFEVar FixedPoint2029 = Counter2598;
/* } metapipe2756 par loop */
DblBufReg[] FixedPoint2029_chain = spatialUtils.getRegChain(
              "metapipe2756_FixedPoint2029", 3, FixedPoint2029,
              new DFEVar[]{void2642_done,metapipe2727_done,pipe2754_done});
/* ParPipeReduce metapipe2756 func block { */
/* void2642_ParSM void2642 { */
SMIO void2642_sm = addStateMachine("void2642_sm", new void2642_ParSM(this));
    void2642_sm.connectInput("sm_en", void2642_en);
    void2642_done <== stream.offset(void2642_sm.getOutput("sm_done"),-1);
void2642_sm.connectInput("s0_done", metapipe2625_done);
metapipe2625_en <== void2642_sm.getOutput("s0_en");
void2642_sm.connectInput("s1_done", void2640_done);
void2640_en <== void2642_sm.getOutput("s1_en");
/* } void2642_ParSM void2642 */
/* Block void2642 Parallel { */
{
// FIFO FIFO2604 = Fifo_new[dfeFloat(8,24)](const512_FixedPoint262, const0_FloatPoint257);
DFEVector<DFEVar> FIFO2604_rdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVector<DFEVar> FIFO2604_wdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVar FIFO2604_readEn = dfeBool().newInstance(this);
DFEVar FIFO2604_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe2625 = ParPipeForeach(CounterChain2606) { */
{
/* MPSM to be emitted */
/* metapipe2625_MPSM metapipe2625 { */
SMIO metapipe2625_sm = addStateMachine("metapipe2625_sm", new metapipe2625_MPSM(this));
    metapipe2625_sm.connectInput("sm_en", metapipe2625_en);
    metapipe2625_done <== stream.offset(metapipe2625_sm.getOutput("sm_done"),-1);
DFEVar metapipe2625_niter = ((const192_FixedPoint1668 - const0_FixedPoint244) / (const1_FixedPoint265 * 1));
metapipe2625_sm.connectInput("sm_numIter", metapipe2625_niter.cast(dfeUInt(32)));
DFEVar metapipe2625_rst_en = metapipe2625_sm.getOutput("rst_en");
metapipe2625_sm.connectInput("s0_done", void2610_done);
void2610_en <== metapipe2625_sm.getOutput("s0_en");
metapipe2625_sm.connectInput("s1_done", void2612_done);
void2612_en <== metapipe2625_sm.getOutput("s1_en");
metapipe2625_sm.connectInput("s2_done", pipe2623_done);
pipe2623_en <== metapipe2625_sm.getOutput("s2_en");
DFEVar Counter2605_max_0 = const192_FixedPoint1668;
DFEVar metapipe2625_datapath_en = metapipe2625_en;
DFEVar metapipe2625_ctr_en = void2610_done;
/* CustomCounterChain { */
DFEVar CounterChain2606_en = void2610_done;
DFEVar[] CounterChain2606_max = {const192_FixedPoint1668};
int[] CounterChain2606_strides = {1};
OffsetExpr CounterChain2606_offset = stream.makeOffsetAutoLoop("CounterChain2606_offset");
SMIO CounterChain2606 = addStateMachine("CounterChain2606_sm", new CounterChain2606_CtrSM(owner, CounterChain2606_strides)); // gap = 0
CounterChain2606.connectInput("en", CounterChain2606_en);
CounterChain2606.connectInput("reset", metapipe2625_done);
DFEVar CounterChain2606_maxed = CounterChain2606.getOutput("saturated");
DFEVar CounterChain2606_done = stream.offset(CounterChain2606.getOutput("done"), -1);
OffsetExpr CounterChain2606_additionalOffset = new OffsetExpr();
CounterChain2606.connectInput("max0", CounterChain2606_max[0]);
DFEVar Counter2605 = CounterChain2606.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2625_MPSM metapipe2625 */
DFEVar metapipe2625_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2035 = Counter2605;
DblBufReg[] FixedPoint2035_chain = spatialUtils.getRegChain(
              "metapipe2625_FixedPoint2035", 3, FixedPoint2035,
              new DFEVar[]{void2610_done,void2612_done,pipe2623_done});
// Unit pipe writtenIn(void2610) = List(Sym(2607))
//   reg2607 = Reflect(Reg_new(Sym(244)),Summary(mutable),List()), isAccum(reg2607) = false
/* PipeSM void2610 { */
OffsetExpr void2610_offset = stream.makeOffsetAutoLoop("void2610_offset");
SMIO void2610_sm = addStateMachine("void2610_sm", new PipeSM(this, 1));
    void2610_sm.connectInput("sm_en", void2610_en);
    void2610_done <== stream.offset(void2610_sm.getOutput("sm_done"),-1-void2610_offset);
DFEVar void2610_rst_en = void2610_sm.getOutput("rst_en");
void2610_sm.connectInput("rst_done", void2610_rst_done);
void2610_rst_done <== stream.offset(void2610_rst_en, -void2610_offset-1);
void2610_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void2610_sm.connectInput("ctr_done", stream.offset(void2610_sm.getOutput("ctr_en"), -1));
DFEVar void2610_datapath_en = void2610_en & ~void2610_rst_en;
DFEVar void2610_ctr_en = void2610_datapath_en;
/* } PipeSM void2610 */
/* Block void2610 Unitpipe { */
{
DFEVar Bit362 = constant.var( true );
DFEVar FixedPoint2037 = FixedPoint2029 + FixedPoint2035;
DFEVar FixedPoint2038 = FixedPoint2037 * const384_FixedPoint5;
/* Reg_write { */
reg2607_0_lib.write(FixedPoint2038, void2610_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@5162bbf4, numDuplicates = 1 */
}
/* } Block void2610 Unitpipe */
DFEVar FixedPoint2611 = reg2607_0_lib.read(1); // reg read
MemoryCmdGenLib void2612 = new MemoryCmdGenLib(
              this,
              void2612_en, void2612_done,
              DRAM2535, FixedPoint2611,
              "DRAM2535_void2612_in",
              384,
              FIFO2604_readEn, FIFO2604_rdata);
FIFO2604_writeEn <== void2612_en;
FIFO2604_wdata <== FIFO2604_rdata;
/* ParPipeForeach pipe2623 = ParPipeForeach(CounterChain2614) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2623 { */
OffsetExpr pipe2623_offset = stream.makeOffsetAutoLoop("pipe2623_offset");
SMIO pipe2623_sm = addStateMachine("pipe2623_sm", new PipeSM(this, 1));
    pipe2623_sm.connectInput("sm_en", pipe2623_en);
    pipe2623_done <== stream.offset(pipe2623_sm.getOutput("sm_done"),-1-pipe2623_offset);
DFEVar pipe2623_rst_en = pipe2623_sm.getOutput("rst_en");
pipe2623_sm.connectInput("rst_done", pipe2623_rst_done);
pipe2623_rst_done <== stream.offset(pipe2623_rst_en, -pipe2623_offset-1);
pipe2623_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2613_max_0 = pipe2623_sm.getOutput("ctr_maxOut_0");
pipe2623_sm.connectInput("ctr_done", CounterChain2614_done);
DFEVar pipe2623_datapath_en = pipe2623_sm.getOutput("ctr_en");
DFEVar pipe2623_ctr_en = pipe2623_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2614_en = pipe2623_datapath_en;
DFEVar[] CounterChain2614_max = {Counter2613_max_0};
int[] CounterChain2614_strides = {1};
OffsetExpr CounterChain2614_offset = stream.makeOffsetAutoLoop("CounterChain2614_offset");
SMIO CounterChain2614 = addStateMachine("CounterChain2614_sm", new CounterChain2614_CtrSM(owner, CounterChain2614_strides)); // gap = 0
CounterChain2614.connectInput("en", CounterChain2614_en);
CounterChain2614.connectInput("reset", pipe2623_done);
DFEVar CounterChain2614_maxed = CounterChain2614.getOutput("saturated");
CounterChain2614_done <== stream.offset(CounterChain2614.getOutput("done"), -1);
OffsetExpr CounterChain2614_additionalOffset = new OffsetExpr();
CounterChain2614.connectInput("max0", CounterChain2614_max[0]);
DFEVector<DFEVar> Counter2613 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2613[0] <== CounterChain2614.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2613[i+1] <== CounterChain2614.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2623 */
DFEVar pipe2623_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2046 = Counter2613[0];
DFEVar FixedPoint2047 = Counter2613[1];
DFEVar FixedPoint2048 = Counter2613[2];
DFEVar FixedPoint2049 = Counter2613[3];
// DFEVar Vector2615 = Par_pop_fifo(FIFO2604, 4);
FIFO2604_readEn <== pipe2623_ctr_en;
DFEVector<DFEVar> Vector2615 = FIFO2604_rdata;
DFEVar FixedPoint2055 = FixedPoint2035_chain[1].read() * const384_FixedPoint5;
DFEVar FixedPoint2056 = FixedPoint2055 + FixedPoint2046;
DFEVar FixedPoint2057 = FixedPoint2055 + FixedPoint2047;
DFEVar FixedPoint2058 = FixedPoint2055 + FixedPoint2048;
DFEVar FixedPoint2059 = FixedPoint2055 + FixedPoint2049;
DFEVector<DFEVar> Vector2061 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2056,FixedPoint2057,FixedPoint2058,FixedPoint2059));
DFEVar FloatPoint2616 = Vector2615[0];
DFEVar FloatPoint2617 = Vector2615[1];
DFEVar FloatPoint2618 = Vector2615[2];
DFEVar FloatPoint2619 = Vector2615[3];
DFEVector<DFEVar> Vector2620 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2616,FloatPoint2617,FloatPoint2618,FloatPoint2619));
/* Bram_store { */
// All readers share row. vectorized
BRAM2602_0.connectWport(FixedPoint2035_chain[1].read(), new DFEVectorType<DFEVar>(FixedPoint2035_chain[1].read().getType(), 4).newInstance(this, Arrays.asList(FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read())),
                  Vector2620, pipe2623_datapath_en, new int[] {0}); //w16
BRAM2602_1.connectWport(FixedPoint2035_chain[1].read(), new DFEVectorType<DFEVar>(FixedPoint2035_chain[1].read().getType(), 4).newInstance(this, Arrays.asList(FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read(),FixedPoint2035_chain[1].read())),
                  Vector2620, pipe2623_datapath_en, new int[] {0}); //w16
/* } Bram_store */
}
/* } ParPipeForeach pipe2623 */
}
/* } ParPipeForeach metapipe2625 */
// FIFO FIFO2626 = Fifo_new[dfeFloat(8,24)](const512_FixedPoint262, const0_FloatPoint257);
DFEVector<DFEVar> FIFO2626_rdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVector<DFEVar> FIFO2626_wdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVar FIFO2626_readEn = dfeBool().newInstance(this);
DFEVar FIFO2626_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2640) = List()
/* void2640_MPSM void2640 { */
SMIO void2640_sm = addStateMachine("void2640_sm", new void2640_MPSM(this));
    void2640_sm.connectInput("sm_en", void2640_en);
    void2640_done <== stream.offset(void2640_sm.getOutput("sm_done"),-1);
void2640_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2640_rst_en = void2640_sm.getOutput("rst_en");
void2640_sm.connectInput("s0_done", void2627_done);
void2627_en <== void2640_sm.getOutput("s0_en");
void2640_sm.connectInput("s1_done", pipe2638_done);
pipe2638_en <== void2640_sm.getOutput("s1_en");
DFEVar void2640_datapath_en = void2640_en & ~void2640_rst_en;
DFEVar void2640_ctr_en = void2640_datapath_en;
/* } void2640_MPSM void2640 */
/* Block void2640 Unitpipe { */
{
MemoryCmdGenLib void2627 = new MemoryCmdGenLib(
              this,
              void2627_en, void2627_done,
              DRAM2536, FixedPoint2029,
              "DRAM2536_void2627_in",
              192,
              FIFO2626_readEn, FIFO2626_rdata);
FIFO2626_writeEn <== void2627_en;
FIFO2626_wdata <== FIFO2626_rdata;
/* ParPipeForeach pipe2638 = ParPipeForeach(CounterChain2629) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2638 { */
OffsetExpr pipe2638_offset = stream.makeOffsetAutoLoop("pipe2638_offset");
SMIO pipe2638_sm = addStateMachine("pipe2638_sm", new PipeSM(this, 1));
    pipe2638_sm.connectInput("sm_en", pipe2638_en);
    pipe2638_done <== stream.offset(pipe2638_sm.getOutput("sm_done"),-1-pipe2638_offset);
DFEVar pipe2638_rst_en = pipe2638_sm.getOutput("rst_en");
pipe2638_sm.connectInput("rst_done", pipe2638_rst_done);
pipe2638_rst_done <== stream.offset(pipe2638_rst_en, -pipe2638_offset-1);
pipe2638_sm.connectInput("sm_maxIn_0", const192_FixedPoint1668);
DFEVar Counter2628_max_0 = pipe2638_sm.getOutput("ctr_maxOut_0");
pipe2638_sm.connectInput("ctr_done", CounterChain2629_done);
DFEVar pipe2638_datapath_en = pipe2638_sm.getOutput("ctr_en");
DFEVar pipe2638_ctr_en = pipe2638_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2629_en = pipe2638_datapath_en;
DFEVar[] CounterChain2629_max = {const192_FixedPoint1668};
int[] CounterChain2629_strides = {1};
OffsetExpr CounterChain2629_offset = stream.makeOffsetAutoLoop("CounterChain2629_offset");
SMIO CounterChain2629 = addStateMachine("CounterChain2629_sm", new CounterChain2629_CtrSM(owner, CounterChain2629_strides)); // gap = 0
CounterChain2629.connectInput("en", CounterChain2629_en);
CounterChain2629.connectInput("reset", pipe2638_done);
DFEVar CounterChain2629_maxed = CounterChain2629.getOutput("saturated");
CounterChain2629_done <== stream.offset(CounterChain2629.getOutput("done"), -1);
OffsetExpr CounterChain2629_additionalOffset = new OffsetExpr();
CounterChain2629.connectInput("max0", CounterChain2629_max[0]);
DFEVector<DFEVar> Counter2628 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2628[0] <== CounterChain2629.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2628[i+1] <== CounterChain2629.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2638 */
DFEVar pipe2638_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2075 = Counter2628[0];
DFEVar FixedPoint2076 = Counter2628[1];
DFEVar FixedPoint2077 = Counter2628[2];
DFEVar FixedPoint2078 = Counter2628[3];
// DFEVar Vector2630 = Par_pop_fifo(FIFO2626, 4);
FIFO2626_readEn <== pipe2638_ctr_en;
DFEVector<DFEVar> Vector2630 = FIFO2626_rdata;
DFEVector<DFEVar> Vector2085 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2075,FixedPoint2076,FixedPoint2077,FixedPoint2078));
DFEVar FloatPoint2631 = Vector2630[0];
DFEVar FloatPoint2632 = Vector2630[1];
DFEVar FloatPoint2633 = Vector2630[2];
DFEVar FloatPoint2634 = Vector2630[3];
DFEVector<DFEVar> Vector2635 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2631,FloatPoint2632,FloatPoint2633,FloatPoint2634));
/* Bram_store { */
BRAM2603_0.connectWport(Vector2085, Vector2635, pipe2638_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2638 */
}
/* } Block void2640 Unitpipe */
}
/* } Block void2642 Parallel */
/* ParPipeReduce metapipe2727 = ParPipeReduce(CounterChain2645, BRAM2643) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe2727 controller { */
/* metapipe2727_MPSM metapipe2727 { */
SMIO metapipe2727_sm = addStateMachine("metapipe2727_sm", new metapipe2727_MPSM(this));
    metapipe2727_sm.connectInput("sm_en", metapipe2727_en);
    metapipe2727_done <== stream.offset(metapipe2727_sm.getOutput("sm_done"),-1);
DFEVar metapipe2727_niter = ((const192_FixedPoint1668 - const0_FixedPoint244) / (const1_FixedPoint265 * 1));
metapipe2727_sm.connectInput("sm_numIter", metapipe2727_niter.cast(dfeUInt(32)));
DFEVar metapipe2727_rst_en = metapipe2727_sm.getOutput("rst_en");
metapipe2727_sm.connectInput("s0_done", pipe2674_done);
pipe2674_en <== metapipe2727_sm.getOutput("s0_en");
metapipe2727_sm.connectInput("s1_done", void2684_done);
void2684_en <== metapipe2727_sm.getOutput("s1_en");
metapipe2727_sm.connectInput("s2_done", pipe2703_done);
pipe2703_en <== metapipe2727_sm.getOutput("s2_en");
metapipe2727_sm.connectInput("s3_done", pipe2725_done);
pipe2725_en <== metapipe2727_sm.getOutput("s3_en");
DFEVar Counter2644_max_0 = const192_FixedPoint1668;
DFEVar metapipe2727_datapath_en = metapipe2727_en;
DFEVar metapipe2727_ctr_en = pipe2674_done;
/* CustomCounterChain { */
DFEVar CounterChain2645_en = pipe2674_done;
DFEVar[] CounterChain2645_max = {Counter2644_max_0};
int[] CounterChain2645_strides = {1};
OffsetExpr CounterChain2645_offset = stream.makeOffsetAutoLoop("CounterChain2645_offset");
SMIO CounterChain2645 = addStateMachine("CounterChain2645_sm", new CounterChain2645_CtrSM(owner, CounterChain2645_strides)); // gap = 0
CounterChain2645.connectInput("en", CounterChain2645_en);
CounterChain2645.connectInput("reset", metapipe2727_done);
DFEVar CounterChain2645_maxed = CounterChain2645.getOutput("saturated");
DFEVar CounterChain2645_done = stream.offset(CounterChain2645.getOutput("done"), -1);
OffsetExpr CounterChain2645_additionalOffset = new OffsetExpr();
CounterChain2645.connectInput("max0", CounterChain2645_max[0]);
DFEVar Counter2644 = CounterChain2645.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2727_MPSM metapipe2727 */
/* } metapipe2727 controller */
/* ParPipeReduce metapipe2727 par loop { */
DFEVar FixedPoint2110 = Counter2644;
/* } metapipe2727 par loop */
DblBufReg[] FixedPoint2110_chain = spatialUtils.getRegChain(
              "metapipe2727_FixedPoint2110", 4, FixedPoint2110,
              new DFEVar[]{pipe2674_done,void2684_done,pipe2703_done,pipe2725_done});
/* ParPipeReduce metapipe2727 func block { */
/* ParPipeReduce pipe2674 = ParPipeReduce(CounterChain2652, reg2650) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe2674 controller { */
/* PipeSM pipe2674 { */
OffsetExpr pipe2674_offset = stream.makeOffsetAutoLoop("pipe2674_offset");
SMIO pipe2674_sm = addStateMachine("pipe2674_sm", new PipeSM(this, 1));
    pipe2674_sm.connectInput("sm_en", pipe2674_en);
    pipe2674_done <== stream.offset(pipe2674_sm.getOutput("sm_done"),-1-pipe2674_offset);
DFEVar pipe2674_rst_en = pipe2674_sm.getOutput("rst_en");
pipe2674_sm.connectInput("rst_done", pipe2674_rst_done);
pipe2674_rst_done <== stream.offset(pipe2674_rst_en, -pipe2674_offset-1);
pipe2674_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2651_max_0 = pipe2674_sm.getOutput("ctr_maxOut_0");
pipe2674_sm.connectInput("ctr_done", CounterChain2652_done);
DFEVar pipe2674_datapath_en = pipe2674_sm.getOutput("ctr_en");
DFEVar pipe2674_loopLengthVal = pipe2674_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe2674_redLoopChain = control.count.makeCounterChain(pipe2674_datapath_en);
DFEVar pipe2674_redLoopCtr = pipe2674_redLoopChain.addCounter(pipe2674_loopLengthVal, 1);
DFEVar pipe2674_redLoop_done = stream.offset(pipe2674_redLoopChain.getCounterWrap(pipe2674_redLoopCtr), -1);
DFEVar pipe2674_ctr_en = pipe2674_datapath_en & pipe2674_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain2652_en = pipe2674_datapath_en & pipe2674_redLoop_done;
DFEVar[] CounterChain2652_max = {Counter2651_max_0};
int[] CounterChain2652_strides = {1};
OffsetExpr CounterChain2652_offset = stream.makeOffsetAutoLoop("CounterChain2652_offset");
SMIO CounterChain2652 = addStateMachine("CounterChain2652_sm", new CounterChain2652_CtrSM(owner, CounterChain2652_strides)); // gap = 0
CounterChain2652.connectInput("en", CounterChain2652_en);
CounterChain2652.connectInput("reset", pipe2674_done);
DFEVar CounterChain2652_maxed = CounterChain2652.getOutput("saturated");
CounterChain2652_done <== stream.offset(CounterChain2652.getOutput("done"), -1);
OffsetExpr CounterChain2652_additionalOffset = new OffsetExpr();
CounterChain2652.connectInput("max0", CounterChain2652_max[0]);
DFEVector<DFEVar> Counter2651 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2651[0] <== CounterChain2652.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2651[i+1] <== CounterChain2652.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2674 */
/* } pipe2674 controller */
/* ParPipeReduce pipe2674 par loop { */
DFEVar FixedPoint2124 = Counter2651[0];
DFEVar FixedPoint2125 = Counter2651[1];
DFEVar FixedPoint2126 = Counter2651[2];
DFEVar FixedPoint2127 = Counter2651[3];
/* } pipe2674 par loop */
DFEVar FloatPoint2671 = dfeFloat(8,24).newInstance(this);
/* ParPipeReduce pipe2674 func block { */
DFEVar FixedPoint2128 = FixedPoint2110 * const384_FixedPoint5;
DFEVar FixedPoint2129 = FixedPoint2128 + FixedPoint2124;
DFEVar FixedPoint2130 = FixedPoint2128 + FixedPoint2125;
DFEVar FixedPoint2131 = FixedPoint2128 + FixedPoint2126;
DFEVar FixedPoint2132 = FixedPoint2128 + FixedPoint2127;
DFEVector<DFEVar> Vector2133 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2129,FixedPoint2130,FixedPoint2131,FixedPoint2132));
/* Bram_load { */
// All readers share row. vectorized
DFEVector<DFEVar> Vector2653 = BRAM2602_0.connectRport(FixedPoint2110, new DFEVectorType<DFEVar>(FixedPoint2110.getType(), 4).newInstance(this, Arrays.asList(FixedPoint2110,FixedPoint2110,FixedPoint2110,FixedPoint2110)), new int[] {1}); //r8
/* } Bram_load */
DFEVector<DFEVar> Vector2139 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2124,FixedPoint2125,FixedPoint2126,FixedPoint2127));
/* Bram_load { */
DFEVector<DFEVar> Vector2654 = BRAM2580_0.connectRport(Vector2139, new int[] {0}); //r4
/* } Bram_load */
// FloatPoint2655 is just a register read
DFEVar Bit362 = constant.var( true );
// FloatPoint2656 already emitted in pipe2674;
// FloatPoint2657 already emitted in pipe2674;
// FloatPoint2658 already emitted in pipe2674;
// FloatPoint2659 already emitted in pipe2674;
// FloatPoint2660 already emitted in pipe2674;
// FloatPoint2661 already emitted in pipe2674;
// FloatPoint2662 already emitted in pipe2674;
// FloatPoint2663 already emitted in pipe2674;
// FloatPoint2664 already emitted in pipe2674;
// FloatPoint2665 already emitted in pipe2674;
// FloatPoint2666 already emitted in pipe2674;
// FloatPoint2667 already emitted in pipe2674;
// FloatPoint2668 already emitted in pipe2674;
// FloatPoint2669 already emitted in pipe2674;
// FloatPoint2670 already emitted in pipe2674;
// FloatPoint2671 already emitted in pipe2674;
/* Reg_write { */
// Write to accumulator register
DFEVar reg2650_en = pipe2674_datapath_en & pipe2674_redLoop_done;
DFEVar reg2650 = FloatingPointAccumulator.accumulateWithReset(FloatPoint2671, reg2650_en, pipe2674_done /*because _rst_en goes hi on each iter*/, true);
reg2650_1_lib.write(reg2650, pipe2674_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@5162bbf4, numDuplicates = 2 */
/* } pipe2674 func block */
new pipe2674_reduce_kernel(owner , Vector2653,Vector2654 , FloatPoint2671 , FixedPoint2110,FixedPoint2124,FixedPoint2125,FixedPoint2126,FixedPoint2127,const384_FixedPoint5); // Reduce kernel
}
/* } ParPipeReduce pipe2674 */
// Unit pipe writtenIn(void2684) = List(Sym(2648))
//   reg2648 = Reflect(Reg_new(Sym(257)),Summary(mutable),List()), isAccum(reg2648) = false
/* PipeSM void2684 { */
OffsetExpr void2684_offset = stream.makeOffsetAutoLoop("void2684_offset");
SMIO void2684_sm = addStateMachine("void2684_sm", new PipeSM(this, 1));
    void2684_sm.connectInput("sm_en", void2684_en);
    void2684_done <== stream.offset(void2684_sm.getOutput("sm_done"),-1-void2684_offset);
DFEVar void2684_rst_en = void2684_sm.getOutput("rst_en");
void2684_sm.connectInput("rst_done", void2684_rst_done);
void2684_rst_done <== stream.offset(void2684_rst_en, -void2684_offset-1);
void2684_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void2684_sm.connectInput("ctr_done", stream.offset(void2684_sm.getOutput("ctr_en"), -1));
DFEVar void2684_datapath_en = void2684_en & ~void2684_rst_en;
DFEVar void2684_ctr_en = void2684_datapath_en;
/* } PipeSM void2684 */
/* Block void2684 Unitpipe { */
{
/* Bram_load { */
DFEVar FloatPoint2675 = BRAM2603_0.connectRport(FixedPoint2110_chain[0].read(), new int[] {1}); //r3
/* } Bram_load */
DFEVar FloatPoint2676 = reg2650_1_lib.read(1); // reg read
DFEVar Bit362 = constant.var( true );
DFEVar FloatPoint2677 = -FloatPoint2676 ;
DFEVar FloatPoint2678 = KernelMath.exp( FloatPoint2677 );
DFEVar FloatPoint2679 = FloatPoint2678 + const1p0_FloatPoint147;
DFEVar FloatPoint2680 = const1p0_FloatPoint147 / FloatPoint2679 ;
DFEVar FloatPoint2681 = FloatPoint2675 - FloatPoint2680 ;
/* Reg_write { */
reg2648_0_lib.write(FloatPoint2681, void2684_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@5162bbf4, numDuplicates = 1 */
}
/* } Block void2684 Unitpipe */
/* ParPipeForeach pipe2703 = ParPipeForeach(CounterChain2686) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2703 { */
OffsetExpr pipe2703_offset = stream.makeOffsetAutoLoop("pipe2703_offset");
SMIO pipe2703_sm = addStateMachine("pipe2703_sm", new PipeSM(this, 1));
    pipe2703_sm.connectInput("sm_en", pipe2703_en);
    pipe2703_done <== stream.offset(pipe2703_sm.getOutput("sm_done"),-1-pipe2703_offset);
DFEVar pipe2703_rst_en = pipe2703_sm.getOutput("rst_en");
pipe2703_sm.connectInput("rst_done", pipe2703_rst_done);
pipe2703_rst_done <== stream.offset(pipe2703_rst_en, -pipe2703_offset-1);
pipe2703_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2685_max_0 = pipe2703_sm.getOutput("ctr_maxOut_0");
pipe2703_sm.connectInput("ctr_done", CounterChain2686_done);
DFEVar pipe2703_datapath_en = pipe2703_sm.getOutput("ctr_en");
DFEVar pipe2703_ctr_en = pipe2703_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2686_en = pipe2703_datapath_en;
DFEVar[] CounterChain2686_max = {Counter2685_max_0};
int[] CounterChain2686_strides = {1};
OffsetExpr CounterChain2686_offset = stream.makeOffsetAutoLoop("CounterChain2686_offset");
SMIO CounterChain2686 = addStateMachine("CounterChain2686_sm", new CounterChain2686_CtrSM(owner, CounterChain2686_strides)); // gap = 0
CounterChain2686.connectInput("en", CounterChain2686_en);
CounterChain2686.connectInput("reset", pipe2703_done);
DFEVar CounterChain2686_maxed = CounterChain2686.getOutput("saturated");
CounterChain2686_done <== stream.offset(CounterChain2686.getOutput("done"), -1);
OffsetExpr CounterChain2686_additionalOffset = new OffsetExpr();
CounterChain2686.connectInput("max0", CounterChain2686_max[0]);
DFEVector<DFEVar> Counter2685 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2685[0] <== CounterChain2686.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2685[i+1] <== CounterChain2686.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2703 */
DFEVar pipe2703_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2183 = Counter2685[0];
DFEVar FixedPoint2184 = Counter2685[1];
DFEVar FixedPoint2185 = Counter2685[2];
DFEVar FixedPoint2186 = Counter2685[3];
DFEVar FixedPoint2128 = FixedPoint2110_chain[1].read() * const384_FixedPoint5;
DFEVar FixedPoint2187 = FixedPoint2128 + FixedPoint2183;
DFEVar FixedPoint2188 = FixedPoint2128 + FixedPoint2184;
DFEVar FixedPoint2189 = FixedPoint2128 + FixedPoint2185;
DFEVar FixedPoint2190 = FixedPoint2128 + FixedPoint2186;
DFEVector<DFEVar> Vector2191 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2187,FixedPoint2188,FixedPoint2189,FixedPoint2190));
/* Bram_load { */
// All readers share row. vectorized
DFEVector<DFEVar> Vector2687 = BRAM2602_1.connectRport(FixedPoint2110_chain[1].read(), new DFEVectorType<DFEVar>(FixedPoint2110_chain[1].read().getType(), 4).newInstance(this, Arrays.asList(FixedPoint2110_chain[1].read(),FixedPoint2110_chain[1].read(),FixedPoint2110_chain[1].read(),FixedPoint2110_chain[1].read())), new int[] {1}); //r8
/* } Bram_load */
DFEVar FloatPoint2688 = reg2648_0_lib.read(1); // reg read
DFEVar FloatPoint2689 = reg2648_0_lib.read(1); // reg read
DFEVar FloatPoint2690 = reg2648_0_lib.read(1); // reg read
DFEVar FloatPoint2691 = reg2648_0_lib.read(1); // reg read
DFEVector<DFEVar> Vector2206 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2183,FixedPoint2184,FixedPoint2185,FixedPoint2186));
DFEVar FloatPoint2692 = Vector2687[0];
DFEVar FloatPoint2693 = FloatPoint2692 - FloatPoint2688 ;
DFEVar FloatPoint2694 = Vector2687[1];
DFEVar FloatPoint2695 = FloatPoint2694 - FloatPoint2689 ;
DFEVar FloatPoint2696 = Vector2687[2];
DFEVar FloatPoint2697 = FloatPoint2696 - FloatPoint2690 ;
DFEVar FloatPoint2698 = Vector2687[3];
DFEVar FloatPoint2699 = FloatPoint2698 - FloatPoint2691 ;
DFEVector<DFEVar> Vector2700 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2693,FloatPoint2695,FloatPoint2697,FloatPoint2699));
/* Bram_store { */
BRAM2649_0.connectWport(Vector2206, Vector2700, pipe2703_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2703 */
/* ParPipeForeach pipe2725 = ParPipeForeach(CounterChain2647) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2725 { */
OffsetExpr pipe2725_offset = stream.makeOffsetAutoLoop("pipe2725_offset");
SMIO pipe2725_sm = addStateMachine("pipe2725_sm", new PipeSM(this, 1));
    pipe2725_sm.connectInput("sm_en", pipe2725_en);
    pipe2725_done <== stream.offset(pipe2725_sm.getOutput("sm_done"),-1-pipe2725_offset);
DFEVar pipe2725_rst_en = pipe2725_sm.getOutput("rst_en");
pipe2725_sm.connectInput("rst_done", pipe2725_rst_done);
pipe2725_rst_done <== stream.offset(pipe2725_rst_en, -pipe2725_offset-1);
pipe2725_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2646_max_0 = pipe2725_sm.getOutput("ctr_maxOut_0");
pipe2725_sm.connectInput("ctr_done", CounterChain2647_done);
DFEVar pipe2725_datapath_en = pipe2725_sm.getOutput("ctr_en");
DFEVar pipe2725_ctr_en = pipe2725_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2647_en = pipe2725_datapath_en;
DFEVar[] CounterChain2647_max = {Counter2646_max_0};
int[] CounterChain2647_strides = {1};
OffsetExpr CounterChain2647_offset = stream.makeOffsetAutoLoop("CounterChain2647_offset");
SMIO CounterChain2647 = addStateMachine("CounterChain2647_sm", new CounterChain2647_CtrSM(owner, CounterChain2647_strides)); // gap = 0
CounterChain2647.connectInput("en", CounterChain2647_en);
CounterChain2647.connectInput("reset", pipe2725_done);
DFEVar CounterChain2647_maxed = CounterChain2647.getOutput("saturated");
CounterChain2647_done <== stream.offset(CounterChain2647.getOutput("done"), -1);
OffsetExpr CounterChain2647_additionalOffset = new OffsetExpr();
CounterChain2647.connectInput("max0", CounterChain2647_max[0]);
DFEVector<DFEVar> Counter2646 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2646[0] <== CounterChain2647.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2646[i+1] <== CounterChain2647.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2725 */
DFEVar pipe2725_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2216 = Counter2646[0];
DFEVar FixedPoint2217 = Counter2646[1];
DFEVar FixedPoint2218 = Counter2646[2];
DFEVar FixedPoint2219 = Counter2646[3];
DFEVar FloatPoint2709 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2713 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2717 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2721 = dfeFloat(8,24).newInstance(this);
DFEVector<DFEVar> Vector2224 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2216,FixedPoint2217,FixedPoint2218,FixedPoint2219));
/* Bram_load { */
DFEVector<DFEVar> Vector2704 = BRAM2649_0.connectRport(Vector2224, new int[] {1}); //r4
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector2705 = BRAM2643_0.connectRport(Vector2224, new int[] {0}); //r4
/* } Bram_load */
// FloatPoint2706 already emitted in pipe2725;
// Bit2215 already emitted in Sym(2725)
// Bit2220 already emitted in Sym(2725)
// Bit2239 already emitted in Sym(2725)
// FloatPoint2707 already emitted in pipe2725;
// FloatPoint2708 already emitted in Sym(2725)
// FloatPoint2709 already emitted in pipe2725;
// FloatPoint2710 already emitted in pipe2725;
// Bit2221 already emitted in Sym(2725)
// Bit2242 already emitted in Sym(2725)
// FloatPoint2711 already emitted in pipe2725;
// FloatPoint2712 already emitted in Sym(2725)
// FloatPoint2713 already emitted in pipe2725;
// FloatPoint2714 already emitted in pipe2725;
// Bit2222 already emitted in Sym(2725)
// Bit2245 already emitted in Sym(2725)
// FloatPoint2715 already emitted in pipe2725;
// FloatPoint2716 already emitted in Sym(2725)
// FloatPoint2717 already emitted in pipe2725;
// FloatPoint2718 already emitted in pipe2725;
// Bit2223 already emitted in Sym(2725)
// Bit2248 already emitted in Sym(2725)
// FloatPoint2719 already emitted in pipe2725;
// FloatPoint2720 already emitted in Sym(2725)
// FloatPoint2721 already emitted in pipe2725;
DFEVector<DFEVar> Vector2722 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2709,FloatPoint2713,FloatPoint2717,FloatPoint2721));
/* Bram_store { */
BRAM2643_0.connectWport(stream.offset(Vector2224, -pipe2725_offset),
                stream.offset(Vector2722, -pipe2725_offset), stream.offset(pipe2725_datapath_en & pipe2725_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2647),Block(Sym(2724)),List(List(Sym(2216), Sym(2217), Sym(2218), Sym(2219))))*/, -pipe2725_offset), new int[] {0}); //w3
BRAM2643_1.connectWport(stream.offset(Vector2224, -pipe2725_offset),
                stream.offset(Vector2722, -pipe2725_offset), stream.offset(pipe2725_datapath_en & pipe2725_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2647),Block(Sym(2724)),List(List(Sym(2216), Sym(2217), Sym(2218), Sym(2219))))*/, -pipe2725_offset), new int[] {0}); //w3
/* } Bram_store */
new pipe2725_reduce_kernel(owner , Vector2704,Vector2705 , FloatPoint2709,FloatPoint2713,FloatPoint2717,FloatPoint2721 , FixedPoint2110_chain[2].read(),FixedPoint2216,FixedPoint2217,FixedPoint2218,FixedPoint2219,const0_FloatPoint257,const192_FixedPoint1668,const384_FixedPoint5); // Reduce kernel
}
/* } ParPipeForeach pipe2725 */
/* } metapipe2727 func block */
}
/* } ParPipeReduce metapipe2727 */
/* ParPipeForeach pipe2754 = ParPipeForeach(CounterChain2601) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2754 { */
OffsetExpr pipe2754_offset = stream.makeOffsetAutoLoop("pipe2754_offset");
SMIO pipe2754_sm = addStateMachine("pipe2754_sm", new PipeSM(this, 1));
    pipe2754_sm.connectInput("sm_en", pipe2754_en);
    pipe2754_done <== stream.offset(pipe2754_sm.getOutput("sm_done"),-1-pipe2754_offset);
DFEVar pipe2754_rst_en = pipe2754_sm.getOutput("rst_en");
pipe2754_sm.connectInput("rst_done", pipe2754_rst_done);
pipe2754_rst_done <== stream.offset(pipe2754_rst_en, -pipe2754_offset-1);
pipe2754_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2600_max_0 = pipe2754_sm.getOutput("ctr_maxOut_0");
pipe2754_sm.connectInput("ctr_done", CounterChain2601_done);
DFEVar pipe2754_datapath_en = pipe2754_sm.getOutput("ctr_en");
DFEVar pipe2754_ctr_en = pipe2754_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2601_en = pipe2754_datapath_en;
DFEVar[] CounterChain2601_max = {const384_FixedPoint5};
int[] CounterChain2601_strides = {1};
OffsetExpr CounterChain2601_offset = stream.makeOffsetAutoLoop("CounterChain2601_offset");
SMIO CounterChain2601 = addStateMachine("CounterChain2601_sm", new CounterChain2601_CtrSM(owner, CounterChain2601_strides)); // gap = 0
CounterChain2601.connectInput("en", CounterChain2601_en);
CounterChain2601.connectInput("reset", pipe2754_done);
DFEVar CounterChain2601_maxed = CounterChain2601.getOutput("saturated");
CounterChain2601_done <== stream.offset(CounterChain2601.getOutput("done"), -1);
OffsetExpr CounterChain2601_additionalOffset = new OffsetExpr();
CounterChain2601.connectInput("max0", CounterChain2601_max[0]);
DFEVector<DFEVar> Counter2600 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2600[0] <== CounterChain2601.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2600[i+1] <== CounterChain2601.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2754 */
DFEVar pipe2754_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2260 = Counter2600[0];
DFEVar FixedPoint2261 = Counter2600[1];
DFEVar FixedPoint2262 = Counter2600[2];
DFEVar FixedPoint2263 = Counter2600[3];
DFEVar FloatPoint2735 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2740 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2745 = dfeFloat(8,24).newInstance(this);
DFEVar FloatPoint2750 = dfeFloat(8,24).newInstance(this);
DFEVector<DFEVar> Vector2268 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2260,FixedPoint2261,FixedPoint2262,FixedPoint2263));
/* Bram_load { */
DFEVector<DFEVar> Vector2728 = BRAM2643_1.connectRport(Vector2268, new int[] {1}); //r4
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector2729 = BRAM2596_0.connectRport(Vector2268, new int[] {0}); //r4
/* } Bram_load */
// FloatPoint2730 already emitted in pipe2754;
// FloatPoint2731 already emitted in pipe2754;
// Bit2264 already emitted in Sym(2754)
// Bit2732 already emitted in Sym(2754)
// Bit2733 already emitted in Sym(2754)
// FloatPoint2734 already emitted in Sym(2754)
// FloatPoint2735 already emitted in pipe2754;
// FloatPoint2736 already emitted in pipe2754;
// FloatPoint2737 already emitted in pipe2754;
// Bit2265 already emitted in Sym(2754)
// Bit2738 already emitted in Sym(2754)
// FloatPoint2739 already emitted in Sym(2754)
// FloatPoint2740 already emitted in pipe2754;
// FloatPoint2741 already emitted in pipe2754;
// FloatPoint2742 already emitted in pipe2754;
// Bit2266 already emitted in Sym(2754)
// Bit2743 already emitted in Sym(2754)
// FloatPoint2744 already emitted in Sym(2754)
// FloatPoint2745 already emitted in pipe2754;
// FloatPoint2746 already emitted in pipe2754;
// FloatPoint2747 already emitted in pipe2754;
// Bit2267 already emitted in Sym(2754)
// Bit2748 already emitted in Sym(2754)
// FloatPoint2749 already emitted in Sym(2754)
// FloatPoint2750 already emitted in pipe2754;
DFEVector<DFEVar> Vector2751 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2735,FloatPoint2740,FloatPoint2745,FloatPoint2750));
/* Bram_store { */
BRAM2596_0.connectWport(stream.offset(Vector2268, -pipe2754_offset),
                stream.offset(Vector2751, -pipe2754_offset), stream.offset(pipe2754_datapath_en & pipe2754_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2601),Block(Sym(2753)),List(List(Sym(2260), Sym(2261), Sym(2262), Sym(2263))))*/, -pipe2754_offset), new int[] {0}); //w3
BRAM2596_1.connectWport(stream.offset(Vector2268, -pipe2754_offset),
                stream.offset(Vector2751, -pipe2754_offset), stream.offset(pipe2754_datapath_en & pipe2754_redLoop_done /*wtf pipe is ParPipeForeach(Sym(2601),Block(Sym(2753)),List(List(Sym(2260), Sym(2261), Sym(2262), Sym(2263))))*/, -pipe2754_offset), new int[] {0}); //w3
/* } Bram_store */
new pipe2754_reduce_kernel(owner , Vector2728,Vector2729 , FloatPoint2735,FloatPoint2740,FloatPoint2745,FloatPoint2750 , FixedPoint2029_chain[1].read(),FixedPoint2260,FixedPoint2261,FixedPoint2262,FixedPoint2263,FixedPoint2597,const0_FloatPoint257,const384_FixedPoint5); // Reduce kernel
}
/* } ParPipeForeach pipe2754 */
/* } metapipe2756 func block */
}
/* } ParPipeReduce metapipe2756 */
/* ParPipeForeach pipe2781 = ParPipeForeach(CounterChain2759) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2781 { */
OffsetExpr pipe2781_offset = stream.makeOffsetAutoLoop("pipe2781_offset");
SMIO pipe2781_sm = addStateMachine("pipe2781_sm", new PipeSM(this, 1));
    pipe2781_sm.connectInput("sm_en", pipe2781_en);
    pipe2781_done <== stream.offset(pipe2781_sm.getOutput("sm_done"),-1-pipe2781_offset);
DFEVar pipe2781_rst_en = pipe2781_sm.getOutput("rst_en");
pipe2781_sm.connectInput("rst_done", pipe2781_rst_done);
pipe2781_rst_done <== stream.offset(pipe2781_rst_en, -pipe2781_offset-1);
pipe2781_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2758_max_0 = pipe2781_sm.getOutput("ctr_maxOut_0");
pipe2781_sm.connectInput("ctr_done", CounterChain2759_done);
DFEVar pipe2781_datapath_en = pipe2781_sm.getOutput("ctr_en");
DFEVar pipe2781_ctr_en = pipe2781_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2759_en = pipe2781_datapath_en;
DFEVar[] CounterChain2759_max = {const384_FixedPoint5};
int[] CounterChain2759_strides = {1};
OffsetExpr CounterChain2759_offset = stream.makeOffsetAutoLoop("CounterChain2759_offset");
SMIO CounterChain2759 = addStateMachine("CounterChain2759_sm", new CounterChain2759_CtrSM(owner, CounterChain2759_strides)); // gap = 0
CounterChain2759.connectInput("en", CounterChain2759_en);
CounterChain2759.connectInput("reset", pipe2781_done);
DFEVar CounterChain2759_maxed = CounterChain2759.getOutput("saturated");
CounterChain2759_done <== stream.offset(CounterChain2759.getOutput("done"), -1);
OffsetExpr CounterChain2759_additionalOffset = new OffsetExpr();
CounterChain2759.connectInput("max0", CounterChain2759_max[0]);
DFEVector<DFEVar> Counter2758 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2758[0] <== CounterChain2759.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2758[i+1] <== CounterChain2759.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2781 */
DFEVar pipe2781_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2305 = Counter2758[0];
DFEVar FixedPoint2306 = Counter2758[1];
DFEVar FixedPoint2307 = Counter2758[2];
DFEVar FixedPoint2308 = Counter2758[3];
DFEVector<DFEVar> Vector2309 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2305,FixedPoint2306,FixedPoint2307,FixedPoint2308));
/* Bram_load { */
DFEVector<DFEVar> Vector2760 = BRAM2596_1.connectRport(Vector2309, new int[] {0}); //r4
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector2761 = BRAM2580_1.connectRport(Vector2309, new int[] {0}); //r4
/* } Bram_load */
DFEVar FloatPoint2762 = Vector2761[0];
DFEVar FloatPoint2763 = Vector2760[0];
DFEVar FloatPoint2764 = FloatPoint2763 * const1p0_FloatPoint147;
DFEVar FloatPoint2765 = FloatPoint2764 + FloatPoint2762;
DFEVar FloatPoint2766 = Vector2761[1];
DFEVar FloatPoint2767 = Vector2760[1];
DFEVar FloatPoint2768 = FloatPoint2767 * const1p0_FloatPoint147;
DFEVar FloatPoint2769 = FloatPoint2768 + FloatPoint2766;
DFEVar FloatPoint2770 = Vector2761[2];
DFEVar FloatPoint2771 = Vector2760[2];
DFEVar FloatPoint2772 = FloatPoint2771 * const1p0_FloatPoint147;
DFEVar FloatPoint2773 = FloatPoint2772 + FloatPoint2770;
DFEVar FloatPoint2774 = Vector2761[3];
DFEVar FloatPoint2775 = Vector2760[3];
DFEVar FloatPoint2776 = FloatPoint2775 * const1p0_FloatPoint147;
DFEVar FloatPoint2777 = FloatPoint2776 + FloatPoint2774;
DFEVector<DFEVar> Vector2778 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2765,FloatPoint2769,FloatPoint2773,FloatPoint2777));
/* Bram_store { */
BRAM2757_0.connectWport(Vector2309, Vector2778, pipe2781_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2781 */
// FIFO FIFO2782 = Fifo_new[dfeFloat(8,24)](const512_FixedPoint262, const0_FloatPoint257);
DFEVector<DFEVar> FIFO2782_rdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVector<DFEVar> FIFO2782_wdata = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this);
DFEVar FIFO2782_readEn = dfeBool().newInstance(this);
DFEVar FIFO2782_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2796) = List()
/* void2796_MPSM void2796 { */
SMIO void2796_sm = addStateMachine("void2796_sm", new void2796_MPSM(this));
    void2796_sm.connectInput("sm_en", void2796_en);
    void2796_done <== stream.offset(void2796_sm.getOutput("sm_done"),-1);
void2796_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2796_rst_en = void2796_sm.getOutput("rst_en");
void2796_sm.connectInput("s0_done", pipe2793_done);
pipe2793_en <== void2796_sm.getOutput("s0_en");
void2796_sm.connectInput("s1_done", void2794_done);
void2794_en <== void2796_sm.getOutput("s1_en");
DFEVar void2796_datapath_en = void2796_en & ~void2796_rst_en;
DFEVar void2796_ctr_en = void2796_datapath_en;
/* } void2796_MPSM void2796 */
/* Block void2796 Unitpipe { */
{
/* ParPipeForeach pipe2793 = ParPipeForeach(CounterChain2784) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2793 { */
OffsetExpr pipe2793_offset = stream.makeOffsetAutoLoop("pipe2793_offset");
SMIO pipe2793_sm = addStateMachine("pipe2793_sm", new PipeSM(this, 1));
    pipe2793_sm.connectInput("sm_en", pipe2793_en);
    pipe2793_done <== stream.offset(pipe2793_sm.getOutput("sm_done"),-1-pipe2793_offset);
DFEVar pipe2793_rst_en = pipe2793_sm.getOutput("rst_en");
pipe2793_sm.connectInput("rst_done", pipe2793_rst_done);
pipe2793_rst_done <== stream.offset(pipe2793_rst_en, -pipe2793_offset-1);
pipe2793_sm.connectInput("sm_maxIn_0", const384_FixedPoint5);
DFEVar Counter2783_max_0 = pipe2793_sm.getOutput("ctr_maxOut_0");
pipe2793_sm.connectInput("ctr_done", CounterChain2784_done);
DFEVar pipe2793_datapath_en = pipe2793_sm.getOutput("ctr_en");
DFEVar pipe2793_ctr_en = pipe2793_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2784_en = pipe2793_datapath_en;
DFEVar[] CounterChain2784_max = {const384_FixedPoint5};
int[] CounterChain2784_strides = {1};
OffsetExpr CounterChain2784_offset = stream.makeOffsetAutoLoop("CounterChain2784_offset");
SMIO CounterChain2784 = addStateMachine("CounterChain2784_sm", new CounterChain2784_CtrSM(owner, CounterChain2784_strides)); // gap = 0
CounterChain2784.connectInput("en", CounterChain2784_en);
CounterChain2784.connectInput("reset", pipe2793_done);
DFEVar CounterChain2784_maxed = CounterChain2784.getOutput("saturated");
CounterChain2784_done <== stream.offset(CounterChain2784.getOutput("done"), -1);
OffsetExpr CounterChain2784_additionalOffset = new OffsetExpr();
CounterChain2784.connectInput("max0", CounterChain2784_max[0]);
DFEVector<DFEVar> Counter2783 = new DFEVectorType<DFEVar>(dfeInt(32), 4).newInstance(this);
Counter2783[0] <== CounterChain2784.getOutput("counter0");
for (int i = 0; i < 3; i++) {
  Counter2783[i+1] <== CounterChain2784.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe2793 */
DFEVar pipe2793_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2339 = Counter2783[0];
DFEVar FixedPoint2340 = Counter2783[1];
DFEVar FixedPoint2341 = Counter2783[2];
DFEVar FixedPoint2342 = Counter2783[3];
DFEVector<DFEVar> Vector2343 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 4).newInstance(this, Arrays.asList(FixedPoint2339,FixedPoint2340,FixedPoint2341,FixedPoint2342));
/* Bram_load { */
DFEVector<DFEVar> Vector2785 = BRAM2757_0.connectRport(Vector2343, new int[] {0}); //r4
/* } Bram_load */
DFEVar Bit2350 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2350 <== FixedPoint2339 < const384_FixedPoint5;
DFEVar Bit2351 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2351 <== FixedPoint2340 < const384_FixedPoint5;
DFEVar Bit2352 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2352 <== FixedPoint2341 < const384_FixedPoint5;
DFEVar Bit2353 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2353 <== FixedPoint2342 < const384_FixedPoint5;
DFEVector<DFEVar> Vector2354 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 4).newInstance(this, Arrays.asList(Bit2350,Bit2351,Bit2352,Bit2353));
DFEVar FloatPoint2786 = Vector2785[0];
DFEVar FloatPoint2787 = Vector2785[1];
DFEVar FloatPoint2788 = Vector2785[2];
DFEVar FloatPoint2789 = Vector2785[3];
DFEVector<DFEVar> Vector2790 = new DFEVectorType<DFEVar>(dfeFloat(8,24), 4).newInstance(this, Arrays.asList(FloatPoint2786,FloatPoint2787,FloatPoint2788,FloatPoint2789));
// Par_push_fifo(FIFO2782, Vector2790, Vector2354, true);
FIFO2782_writeEn <== pipe2793_ctr_en;
FIFO2782_wdata <== Vector2790;
}
/* } ParPipeForeach pipe2793 */
// void2794: Offchip_store_cmd(DRAM2537,FIFO2782, const0_FixedPoint244, const384_FixedPoint5, 4)
MemoryCmdStLib void2794 = new MemoryCmdStLib(
          this,
          void2794_en, void2794_done,
          DRAM2537, const0_FixedPoint244,
          "DRAM2537_void2794_out",
          const384_FixedPoint5,
          FIFO2782_writeEn, FIFO2782_wdata);
FIFO2782_readEn <== void2794_en;
}
/* } Block void2796 Unitpipe */



// rdone signals for N-Buffers go here
BRAM2603_0.connectStageCtrl(metapipe2727_done, metapipe2727_en, new int[] { 1 }); /*read*/
BRAM2603_0.connectStageCtrl(void2642_done, void2642_en, new int[] { 0 }); /*write*/
BRAM2603_0.connectUnwrittenPorts(new int[] {1});
BRAM2603_0.connectUnreadPorts(new int[] {0});
BRAM2603_0.connectUntouchedPorts(new int[] {});
BRAM2603_0.connectDummyBroadcast();
reg2607_0_lib.connectStageCtrl(void2612_done, void2612_en, new int[] { 1 }); /*read*/
reg2607_0_lib.connectStageCtrl(void2610_done, void2610_en, new int[] { 0 }); /*write*/
reg2607_0_lib.connectUnwrittenPorts(new int[] {1});
reg2607_0_lib.connectUnreadPorts(new int[] {0});
reg2607_0_lib.connectUntouchedPorts(new int[] {});
reg2607_0_lib.connectDummyBroadcast();
BRAM2602_0.connectStageCtrl(metapipe2727_done, metapipe2727_en, new int[] { 1 }); /*read*/
BRAM2602_0.connectStageCtrl(void2642_done, void2642_en, new int[] { 0 }); /*write*/
BRAM2602_0.connectUnwrittenPorts(new int[] {1});
BRAM2602_0.connectUnreadPorts(new int[] {0});
BRAM2602_0.connectUntouchedPorts(new int[] {});
BRAM2602_0.connectDummyBroadcast();
BRAM2602_1.connectStageCtrl(metapipe2727_done, metapipe2727_en, new int[] { 1 }); /*read*/
BRAM2602_1.connectStageCtrl(void2642_done, void2642_en, new int[] { 0 }); /*write*/
BRAM2602_1.connectUnwrittenPorts(new int[] {1});
BRAM2602_1.connectUnreadPorts(new int[] {0});
BRAM2602_1.connectUntouchedPorts(new int[] {});
BRAM2602_1.connectDummyBroadcast();
BRAM2649_0.connectStageCtrl(pipe2725_done, pipe2725_en, new int[] { 1 }); /*read*/
BRAM2649_0.connectStageCtrl(pipe2703_done, pipe2703_en, new int[] { 0 }); /*write*/
BRAM2649_0.connectUnwrittenPorts(new int[] {1});
BRAM2649_0.connectUnreadPorts(new int[] {0});
BRAM2649_0.connectUntouchedPorts(new int[] {});
BRAM2649_0.connectDummyBroadcast();
reg2648_0_lib.connectStageCtrl(pipe2703_done, pipe2703_en, new int[] { 1 }); /*read*/
reg2648_0_lib.connectStageCtrl(void2684_done, void2684_en, new int[] { 0 }); /*write*/
reg2648_0_lib.connectUnwrittenPorts(new int[] {1});
reg2648_0_lib.connectUnreadPorts(new int[] {0});
reg2648_0_lib.connectUntouchedPorts(new int[] {});
reg2648_0_lib.connectDummyBroadcast();
reg2650_1_lib.connectStageCtrl(void2684_done, void2684_en, new int[] { 1 }); /*read*/
reg2650_1_lib.connectStageCtrl(pipe2674_done, pipe2674_en, new int[] { 0 }); /*write*/
reg2650_1_lib.connectUnwrittenPorts(new int[] {1});
reg2650_1_lib.connectUnreadPorts(new int[] {0});
reg2650_1_lib.connectUntouchedPorts(new int[] {});
reg2650_1_lib.connectDummyBroadcast();
BRAM2643_1.connectStageCtrl(pipe2754_done, pipe2754_en, new int[] { 1 }); /*read*/
BRAM2643_1.connectStageCtrl(metapipe2727_done, metapipe2727_en, new int[] { 0 }); /*write*/
BRAM2643_1.connectUnwrittenPorts(new int[] {1});
BRAM2643_1.connectUnreadPorts(new int[] {0});
BRAM2643_1.connectUntouchedPorts(new int[] {});
BRAM2643_1.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
