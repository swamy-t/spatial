package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class pipe1695_reduce_kernel extends KernelLib {
void common(DFEVector<DFEVar> Vector1682,DFEVector<DFEVar> Vector1683 /*1*/ ,
                DFEVar FixedPoint1692 /*2*/   /*3*/) {
// For now, I just regenerate constants because java is being annoying about class extensions


DFEVar FixedPoint1685 = Vector1682[0];
DFEVar FixedPoint1686 = Vector1683[0];
DFEVar FixedPoint1687 = FixedPoint1685 * FixedPoint1686;
DFEVar FixedPoint1688 = Vector1682[1];
DFEVar FixedPoint1689 = Vector1683[1];
DFEVar FixedPoint1690 = FixedPoint1688 * FixedPoint1689;
DFEVar FixedPoint1691 = FixedPoint1687 + FixedPoint1690;
FixedPoint1692 <== FixedPoint1691; // is tree result, do not add Sym(1684)
/* Unknown Deff Sym(1693) Reg_write(Sym(1376),Sym(1692),Sym(192)) */
/* Unknown Deff Sym(1694) Reify(Sym(1693),Summary(mayRead(Sym(1601), Sym(1603), Sym(1376)), mstRead(Sym(1601), Sym(1603), Sym(1376)), mayWrite(Sym(1376)), mstWrite(Sym(1376))),List(Sym(1682), Sym(1683), Sym(1684), Sym(1693))) */
}

pipe1695_reduce_kernel(KernelLib owner , /*1*/ DFEVector<DFEVar> Vector1682,DFEVector<DFEVar> Vector1683 , /*2*/
                DFEVar FixedPoint1692  /*3*/  ) {
  super(owner);
  common(Vector1682, Vector1683 , FixedPoint1692  );
}
}
