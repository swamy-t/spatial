/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);






















int DRAM1590 = 1048576;

int DRAM1591 = 2097152;






/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint98 = ConstFixPt(0,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$Signed,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B32,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: String1 = ArrayApply(Sym(0),Const(0))
// Dep: FixedPoint2 = Tpes_String_to_fixpt(Sym(1))
// Dep: int3 = Tpes_Fix_to_int(Sym(2))
// Dep: const10_FixedPoint5 = ConstFixPt(10,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$Signed,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B32,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DeliteArray1528 = Reflect(DeliteArrayFromFunction(Sym(3),<function1>),Summary(maySimple),List())
// Dep: int1569 = DeliteArrayLength(Sym(1528))
// Dep: argin1586 = Reflect(Argin_new(Sym(98)),Summary(mutable),List())
DFEVar FixedPoint1570 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint1570 <== argin1586;
// Dep: FixedPoint1570 = Tpes_Int_to_fix(Sym(1569))
// Dep: void1587 = Reflect(Set_arg(Sym(1586),Sym(1570)),Summary(mayRead(Sym(1586)), mstRead(Sym(1586)), mayWrite(Sym(1586)), mstWrite(Sym(1586))),List(Sym(1586)))

// Dep: FixedPoint1589 = Reflect(Reg_read(Sym(1586)),Summary(mayRead(Sym(1586)), mstRead(Sym(1586))),List(Sym(1586), Sym(1587)))
// Dep: const96_FixedPoint1025 = ConstFixPt(96,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$Signed,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B32,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const1_FixedPoint101 = ConstFixPt(1,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$Signed,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B32,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint146 = ConstFixPt(512,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$Signed,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B32,DotProduct$@1c6b7657.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM1590 = Reflect(Offchip_new(Sym(1589)),Summary(mutable),List())
// Dep: DRAM1591 = Reflect(Offchip_new(Sym(1589)),Summary(mutable),List())
// Dep: Bit192 = ConstBit(true)
DFEVar Bit192 = constant.var( true );
// Dep: argout1588 = Reflect(Argout_new(Sym(98)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(1697) -> Map(Sym(1253) -> _chain[0].read(), Sym(1252) -> _chain[0].read()), Sym(1705) -> Map(Sym(1253) -> _chain[1].read(), Sym(1252) -> _chain[1].read()), Sym(1661) -> Map()) */
DFEVar void1713_en = top_en;
top_done <== void1713_done;
// Hwblock: childrenOf(void1713) = List(Sym(1707), Sym(1711))
/* void1713_SeqSM void1713 { */
SMIO void1713_sm = addStateMachine("void1713_sm", new void1713_SeqSM(this));
    void1713_sm.connectInput("sm_en", void1713_en);
    void1713_done <== stream.offset(void1713_sm.getOutput("sm_done"),-1);
void1713_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1713_rst_en = void1713_sm.getOutput("rst_en");
void1713_sm.connectInput("s0_done", metapipe1707_done);
metapipe1707_en <== void1713_sm.getOutput("s0_en");
void1713_sm.connectInput("s1_done", void1711_done);
void1711_en <== void1713_sm.getOutput("s1_en");
DFEVar void1713_datapath_en = void1713_en & ~void1713_rst_en;
DFEVar void1713_ctr_en = void1713_datapath_en;
/* } void1713_SeqSM void1713 */
/* ParPipeReduce metapipe1707 = ParPipeReduce(CounterChain1597, reg1594) { */
{
/* MPSM to be emitted */
/* ParPipeReduce metapipe1707 controller { */
/* metapipe1707_MPSM metapipe1707 { */
SMIO metapipe1707_sm = addStateMachine("metapipe1707_sm", new metapipe1707_MPSM(this));
    metapipe1707_sm.connectInput("sm_en", metapipe1707_en);
    metapipe1707_done <== stream.offset(metapipe1707_sm.getOutput("sm_done"),-1);
DFEVar metapipe1707_niter = ((FixedPoint1595 - const0_FixedPoint98) / (const96_FixedPoint1025 * 2));
metapipe1707_sm.connectInput("sm_numIter", metapipe1707_niter.cast(dfeUInt(32)));
DFEVar metapipe1707_rst_en = metapipe1707_sm.getOutput("rst_en");
metapipe1707_sm.connectInput("s0_done", void1661_done);
void1661_en <== metapipe1707_sm.getOutput("s0_en");
metapipe1707_sm.connectInput("s1_done", void1697_done);
void1697_en <== metapipe1707_sm.getOutput("s1_en");
metapipe1707_sm.connectInput("s2_done", void1705_done);
void1705_en <== metapipe1707_sm.getOutput("s2_en");
DFEVar Counter1596_max_0 = FixedPoint1595;
DFEVar metapipe1707_datapath_en = metapipe1707_en;
DFEVar metapipe1707_ctr_en = void1661_done;
/* CustomCounterChain { */
DFEVar CounterChain1597_en = void1661_done;
DFEVar[] CounterChain1597_max = {FixedPoint1595};
int[] CounterChain1597_strides = {96};
OffsetExpr CounterChain1597_offset = stream.makeOffsetAutoLoop("CounterChain1597_offset");
SMIO CounterChain1597 = addStateMachine("CounterChain1597_sm", new CounterChain1597_CtrSM(owner, CounterChain1597_strides)); // gap = 0
CounterChain1597.connectInput("en", CounterChain1597_en);
CounterChain1597.connectInput("reset", metapipe1707_done);
DFEVar CounterChain1597_maxed = CounterChain1597.getOutput("saturated");
DFEVar CounterChain1597_done = stream.offset(CounterChain1597.getOutput("done"), -1);
OffsetExpr CounterChain1597_additionalOffset = new OffsetExpr();
CounterChain1597.connectInput("max0", CounterChain1597_max[0]);
DFEVector<DFEVar> Counter1596 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1596[0] <== CounterChain1597.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1596[i+1] <== CounterChain1597.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } metapipe1707_MPSM metapipe1707 */
/* } metapipe1707 controller */
/* ParPipeReduce metapipe1707 par loop { */
DFEVar FixedPoint1252 = Counter1596[0];
DFEVar FixedPoint1253 = Counter1596[1];
/* } metapipe1707 par loop */
DblBufReg[] FixedPoint1252_chain = spatialUtils.getRegChain(
              "metapipe1707_FixedPoint1252", 3, FixedPoint1252,
              new DFEVar[]{void1661_done,void1697_done,void1705_done});
DblBufReg[] FixedPoint1253_chain = spatialUtils.getRegChain(
              "metapipe1707_FixedPoint1253", 3, FixedPoint1253,
              new DFEVar[]{void1661_done,void1697_done,void1705_done});
/* ParPipeReduce metapipe1707 func block { */
/* void1661_ParSM void1661 { */
SMIO void1661_sm = addStateMachine("void1661_sm", new void1661_ParSM(this));
    void1661_sm.connectInput("sm_en", void1661_en);
    void1661_done <== stream.offset(void1661_sm.getOutput("sm_done"),-1);
void1661_sm.connectInput("s0_done", void1631_done);
void1631_en <== void1661_sm.getOutput("s0_en");
void1661_sm.connectInput("s1_done", void1659_done);
void1659_en <== void1661_sm.getOutput("s1_en");
/* } void1661_ParSM void1661 */
/* Block void1661 Parallel { */
{
/* void1631_ParSM void1631 { */
SMIO void1631_sm = addStateMachine("void1631_sm", new void1631_ParSM(this));
    void1631_sm.connectInput("sm_en", void1631_en);
    void1631_done <== stream.offset(void1631_sm.getOutput("sm_done"),-1);
void1631_sm.connectInput("s0_done", void1616_done);
void1616_en <== void1631_sm.getOutput("s0_en");
void1631_sm.connectInput("s1_done", void1629_done);
void1629_en <== void1631_sm.getOutput("s1_en");
/* } void1631_ParSM void1631 */
/* Block void1631 Parallel { */
{
// FIFO FIFO1604 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint146, const0_FixedPoint98);
DFEVector<DFEVar> FIFO1604_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVector<DFEVar> FIFO1604_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVar FIFO1604_readEn = dfeBool().newInstance(this);
DFEVar FIFO1604_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1616) = List()
/* void1616_MPSM void1616 { */
SMIO void1616_sm = addStateMachine("void1616_sm", new void1616_MPSM(this));
    void1616_sm.connectInput("sm_en", void1616_en);
    void1616_done <== stream.offset(void1616_sm.getOutput("sm_done"),-1);
void1616_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1616_rst_en = void1616_sm.getOutput("rst_en");
void1616_sm.connectInput("s0_done", void1605_done);
void1605_en <== void1616_sm.getOutput("s0_en");
void1616_sm.connectInput("s1_done", pipe1614_done);
pipe1614_en <== void1616_sm.getOutput("s1_en");
DFEVar void1616_datapath_en = void1616_en & ~void1616_rst_en;
DFEVar void1616_ctr_en = void1616_datapath_en;
/* } void1616_MPSM void1616 */
/* Block void1616 Unitpipe { */
{
MemoryCmdGenLib void1605 = new MemoryCmdGenLib(
              this,
              void1605_en, void1605_done,
              DRAM1590, FixedPoint1252,
              "DRAM1590_void1605_in",
              96,
              FIFO1604_readEn, FIFO1604_rdata);
FIFO1604_writeEn <== void1605_en;
FIFO1604_wdata <== FIFO1604_rdata;
/* ParPipeForeach pipe1614 = ParPipeForeach(CounterChain1607) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1614 { */
OffsetExpr pipe1614_offset = stream.makeOffsetAutoLoop("pipe1614_offset");
SMIO pipe1614_sm = addStateMachine("pipe1614_sm", new PipeSM(this, 1));
    pipe1614_sm.connectInput("sm_en", pipe1614_en);
    pipe1614_done <== stream.offset(pipe1614_sm.getOutput("sm_done"),-1-pipe1614_offset);
DFEVar pipe1614_rst_en = pipe1614_sm.getOutput("rst_en");
pipe1614_sm.connectInput("rst_done", pipe1614_rst_done);
pipe1614_rst_done <== stream.offset(pipe1614_rst_en, -pipe1614_offset-1);
pipe1614_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1606_max_0 = pipe1614_sm.getOutput("ctr_maxOut_0");
pipe1614_sm.connectInput("ctr_done", CounterChain1607_done);
DFEVar pipe1614_datapath_en = pipe1614_sm.getOutput("ctr_en");
DFEVar pipe1614_ctr_en = pipe1614_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1607_en = pipe1614_datapath_en;
DFEVar[] CounterChain1607_max = {const96_FixedPoint1025};
int[] CounterChain1607_strides = {1};
OffsetExpr CounterChain1607_offset = stream.makeOffsetAutoLoop("CounterChain1607_offset");
SMIO CounterChain1607 = addStateMachine("CounterChain1607_sm", new CounterChain1607_CtrSM(owner, CounterChain1607_strides)); // gap = 0
CounterChain1607.connectInput("en", CounterChain1607_en);
CounterChain1607.connectInput("reset", pipe1614_done);
DFEVar CounterChain1607_maxed = CounterChain1607.getOutput("saturated");
CounterChain1607_done <== stream.offset(CounterChain1607.getOutput("done"), -1);
OffsetExpr CounterChain1607_additionalOffset = new OffsetExpr();
CounterChain1607.connectInput("max0", CounterChain1607_max[0]);
DFEVector<DFEVar> Counter1606 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1606[0] <== CounterChain1607.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1606[i+1] <== CounterChain1607.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1614 */
DFEVar pipe1614_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1262 = Counter1606[0];
DFEVar FixedPoint1263 = Counter1606[1];
// DFEVar Vector1608 = Par_pop_fifo(FIFO1604, 2);
FIFO1604_readEn <== pipe1614_ctr_en;
DFEVector<DFEVar> Vector1608 = FIFO1604_rdata;
DFEVector<DFEVar> Vector1269 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1262,FixedPoint1263));
DFEVar FixedPoint1609 = Vector1608[0];
DFEVar FixedPoint1610 = Vector1608[1];
DFEVector<DFEVar> Vector1611 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1609,FixedPoint1610));
/* Bram_store { */
BRAM1600_0.connectWport(Vector1269, Vector1611, pipe1614_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1614 */
}
/* } Block void1616 Unitpipe */
// FIFO FIFO1617 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint146, const0_FixedPoint98);
DFEVector<DFEVar> FIFO1617_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVector<DFEVar> FIFO1617_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVar FIFO1617_readEn = dfeBool().newInstance(this);
DFEVar FIFO1617_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1629) = List()
/* void1629_MPSM void1629 { */
SMIO void1629_sm = addStateMachine("void1629_sm", new void1629_MPSM(this));
    void1629_sm.connectInput("sm_en", void1629_en);
    void1629_done <== stream.offset(void1629_sm.getOutput("sm_done"),-1);
void1629_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1629_rst_en = void1629_sm.getOutput("rst_en");
void1629_sm.connectInput("s0_done", void1618_done);
void1618_en <== void1629_sm.getOutput("s0_en");
void1629_sm.connectInput("s1_done", pipe1627_done);
pipe1627_en <== void1629_sm.getOutput("s1_en");
DFEVar void1629_datapath_en = void1629_en & ~void1629_rst_en;
DFEVar void1629_ctr_en = void1629_datapath_en;
/* } void1629_MPSM void1629 */
/* Block void1629 Unitpipe { */
{
MemoryCmdGenLib void1618 = new MemoryCmdGenLib(
              this,
              void1618_en, void1618_done,
              DRAM1591, FixedPoint1252,
              "DRAM1591_void1618_in",
              96,
              FIFO1617_readEn, FIFO1617_rdata);
FIFO1617_writeEn <== void1618_en;
FIFO1617_wdata <== FIFO1617_rdata;
/* ParPipeForeach pipe1627 = ParPipeForeach(CounterChain1620) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1627 { */
OffsetExpr pipe1627_offset = stream.makeOffsetAutoLoop("pipe1627_offset");
SMIO pipe1627_sm = addStateMachine("pipe1627_sm", new PipeSM(this, 1));
    pipe1627_sm.connectInput("sm_en", pipe1627_en);
    pipe1627_done <== stream.offset(pipe1627_sm.getOutput("sm_done"),-1-pipe1627_offset);
DFEVar pipe1627_rst_en = pipe1627_sm.getOutput("rst_en");
pipe1627_sm.connectInput("rst_done", pipe1627_rst_done);
pipe1627_rst_done <== stream.offset(pipe1627_rst_en, -pipe1627_offset-1);
pipe1627_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1619_max_0 = pipe1627_sm.getOutput("ctr_maxOut_0");
pipe1627_sm.connectInput("ctr_done", CounterChain1620_done);
DFEVar pipe1627_datapath_en = pipe1627_sm.getOutput("ctr_en");
DFEVar pipe1627_ctr_en = pipe1627_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1620_en = pipe1627_datapath_en;
DFEVar[] CounterChain1620_max = {const96_FixedPoint1025};
int[] CounterChain1620_strides = {1};
OffsetExpr CounterChain1620_offset = stream.makeOffsetAutoLoop("CounterChain1620_offset");
SMIO CounterChain1620 = addStateMachine("CounterChain1620_sm", new CounterChain1620_CtrSM(owner, CounterChain1620_strides)); // gap = 0
CounterChain1620.connectInput("en", CounterChain1620_en);
CounterChain1620.connectInput("reset", pipe1627_done);
DFEVar CounterChain1620_maxed = CounterChain1620.getOutput("saturated");
CounterChain1620_done <== stream.offset(CounterChain1620.getOutput("done"), -1);
OffsetExpr CounterChain1620_additionalOffset = new OffsetExpr();
CounterChain1620.connectInput("max0", CounterChain1620_max[0]);
DFEVector<DFEVar> Counter1619 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1619[0] <== CounterChain1620.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1619[i+1] <== CounterChain1620.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1627 */
DFEVar pipe1627_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1281 = Counter1619[0];
DFEVar FixedPoint1282 = Counter1619[1];
// DFEVar Vector1621 = Par_pop_fifo(FIFO1617, 2);
FIFO1617_readEn <== pipe1627_ctr_en;
DFEVector<DFEVar> Vector1621 = FIFO1617_rdata;
DFEVector<DFEVar> Vector1287 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1281,FixedPoint1282));
DFEVar FixedPoint1622 = Vector1621[0];
DFEVar FixedPoint1623 = Vector1621[1];
DFEVector<DFEVar> Vector1624 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1622,FixedPoint1623));
/* Bram_store { */
BRAM1602_0.connectWport(Vector1287, Vector1624, pipe1627_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1627 */
}
/* } Block void1629 Unitpipe */
}
/* } Block void1631 Parallel */
/* void1659_ParSM void1659 { */
SMIO void1659_sm = addStateMachine("void1659_sm", new void1659_ParSM(this));
    void1659_sm.connectInput("sm_en", void1659_en);
    void1659_done <== stream.offset(void1659_sm.getOutput("sm_done"),-1);
void1659_sm.connectInput("s0_done", void1644_done);
void1644_en <== void1659_sm.getOutput("s0_en");
void1659_sm.connectInput("s1_done", void1657_done);
void1657_en <== void1659_sm.getOutput("s1_en");
/* } void1659_ParSM void1659 */
/* Block void1659 Parallel { */
{
// FIFO FIFO1632 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint146, const0_FixedPoint98);
DFEVector<DFEVar> FIFO1632_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVector<DFEVar> FIFO1632_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVar FIFO1632_readEn = dfeBool().newInstance(this);
DFEVar FIFO1632_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1644) = List()
/* void1644_MPSM void1644 { */
SMIO void1644_sm = addStateMachine("void1644_sm", new void1644_MPSM(this));
    void1644_sm.connectInput("sm_en", void1644_en);
    void1644_done <== stream.offset(void1644_sm.getOutput("sm_done"),-1);
void1644_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1644_rst_en = void1644_sm.getOutput("rst_en");
void1644_sm.connectInput("s0_done", void1633_done);
void1633_en <== void1644_sm.getOutput("s0_en");
void1644_sm.connectInput("s1_done", pipe1642_done);
pipe1642_en <== void1644_sm.getOutput("s1_en");
DFEVar void1644_datapath_en = void1644_en & ~void1644_rst_en;
DFEVar void1644_ctr_en = void1644_datapath_en;
/* } void1644_MPSM void1644 */
/* Block void1644 Unitpipe { */
{
MemoryCmdGenLib void1633 = new MemoryCmdGenLib(
              this,
              void1633_en, void1633_done,
              DRAM1590, FixedPoint1253,
              "DRAM1590_void1633_in",
              96,
              FIFO1632_readEn, FIFO1632_rdata);
FIFO1632_writeEn <== void1633_en;
FIFO1632_wdata <== FIFO1632_rdata;
/* ParPipeForeach pipe1642 = ParPipeForeach(CounterChain1635) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1642 { */
OffsetExpr pipe1642_offset = stream.makeOffsetAutoLoop("pipe1642_offset");
SMIO pipe1642_sm = addStateMachine("pipe1642_sm", new PipeSM(this, 1));
    pipe1642_sm.connectInput("sm_en", pipe1642_en);
    pipe1642_done <== stream.offset(pipe1642_sm.getOutput("sm_done"),-1-pipe1642_offset);
DFEVar pipe1642_rst_en = pipe1642_sm.getOutput("rst_en");
pipe1642_sm.connectInput("rst_done", pipe1642_rst_done);
pipe1642_rst_done <== stream.offset(pipe1642_rst_en, -pipe1642_offset-1);
pipe1642_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1634_max_0 = pipe1642_sm.getOutput("ctr_maxOut_0");
pipe1642_sm.connectInput("ctr_done", CounterChain1635_done);
DFEVar pipe1642_datapath_en = pipe1642_sm.getOutput("ctr_en");
DFEVar pipe1642_ctr_en = pipe1642_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1635_en = pipe1642_datapath_en;
DFEVar[] CounterChain1635_max = {const96_FixedPoint1025};
int[] CounterChain1635_strides = {1};
OffsetExpr CounterChain1635_offset = stream.makeOffsetAutoLoop("CounterChain1635_offset");
SMIO CounterChain1635 = addStateMachine("CounterChain1635_sm", new CounterChain1635_CtrSM(owner, CounterChain1635_strides)); // gap = 0
CounterChain1635.connectInput("en", CounterChain1635_en);
CounterChain1635.connectInput("reset", pipe1642_done);
DFEVar CounterChain1635_maxed = CounterChain1635.getOutput("saturated");
CounterChain1635_done <== stream.offset(CounterChain1635.getOutput("done"), -1);
OffsetExpr CounterChain1635_additionalOffset = new OffsetExpr();
CounterChain1635.connectInput("max0", CounterChain1635_max[0]);
DFEVector<DFEVar> Counter1634 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1634[0] <== CounterChain1635.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1634[i+1] <== CounterChain1635.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1642 */
DFEVar pipe1642_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1301 = Counter1634[0];
DFEVar FixedPoint1302 = Counter1634[1];
// DFEVar Vector1636 = Par_pop_fifo(FIFO1632, 2);
FIFO1632_readEn <== pipe1642_ctr_en;
DFEVector<DFEVar> Vector1636 = FIFO1632_rdata;
DFEVector<DFEVar> Vector1307 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1301,FixedPoint1302));
DFEVar FixedPoint1637 = Vector1636[0];
DFEVar FixedPoint1638 = Vector1636[1];
DFEVector<DFEVar> Vector1639 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1637,FixedPoint1638));
/* Bram_store { */
BRAM1601_0.connectWport(Vector1307, Vector1639, pipe1642_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1642 */
}
/* } Block void1644 Unitpipe */
// FIFO FIFO1645 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint146, const0_FixedPoint98);
DFEVector<DFEVar> FIFO1645_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVector<DFEVar> FIFO1645_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this);
DFEVar FIFO1645_readEn = dfeBool().newInstance(this);
DFEVar FIFO1645_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void1657) = List()
/* void1657_MPSM void1657 { */
SMIO void1657_sm = addStateMachine("void1657_sm", new void1657_MPSM(this));
    void1657_sm.connectInput("sm_en", void1657_en);
    void1657_done <== stream.offset(void1657_sm.getOutput("sm_done"),-1);
void1657_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void1657_rst_en = void1657_sm.getOutput("rst_en");
void1657_sm.connectInput("s0_done", void1646_done);
void1646_en <== void1657_sm.getOutput("s0_en");
void1657_sm.connectInput("s1_done", pipe1655_done);
pipe1655_en <== void1657_sm.getOutput("s1_en");
DFEVar void1657_datapath_en = void1657_en & ~void1657_rst_en;
DFEVar void1657_ctr_en = void1657_datapath_en;
/* } void1657_MPSM void1657 */
/* Block void1657 Unitpipe { */
{
MemoryCmdGenLib void1646 = new MemoryCmdGenLib(
              this,
              void1646_en, void1646_done,
              DRAM1591, FixedPoint1253,
              "DRAM1591_void1646_in",
              96,
              FIFO1645_readEn, FIFO1645_rdata);
FIFO1645_writeEn <== void1646_en;
FIFO1645_wdata <== FIFO1645_rdata;
/* ParPipeForeach pipe1655 = ParPipeForeach(CounterChain1648) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe1655 { */
OffsetExpr pipe1655_offset = stream.makeOffsetAutoLoop("pipe1655_offset");
SMIO pipe1655_sm = addStateMachine("pipe1655_sm", new PipeSM(this, 1));
    pipe1655_sm.connectInput("sm_en", pipe1655_en);
    pipe1655_done <== stream.offset(pipe1655_sm.getOutput("sm_done"),-1-pipe1655_offset);
DFEVar pipe1655_rst_en = pipe1655_sm.getOutput("rst_en");
pipe1655_sm.connectInput("rst_done", pipe1655_rst_done);
pipe1655_rst_done <== stream.offset(pipe1655_rst_en, -pipe1655_offset-1);
pipe1655_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1647_max_0 = pipe1655_sm.getOutput("ctr_maxOut_0");
pipe1655_sm.connectInput("ctr_done", CounterChain1648_done);
DFEVar pipe1655_datapath_en = pipe1655_sm.getOutput("ctr_en");
DFEVar pipe1655_ctr_en = pipe1655_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain1648_en = pipe1655_datapath_en;
DFEVar[] CounterChain1648_max = {const96_FixedPoint1025};
int[] CounterChain1648_strides = {1};
OffsetExpr CounterChain1648_offset = stream.makeOffsetAutoLoop("CounterChain1648_offset");
SMIO CounterChain1648 = addStateMachine("CounterChain1648_sm", new CounterChain1648_CtrSM(owner, CounterChain1648_strides)); // gap = 0
CounterChain1648.connectInput("en", CounterChain1648_en);
CounterChain1648.connectInput("reset", pipe1655_done);
DFEVar CounterChain1648_maxed = CounterChain1648.getOutput("saturated");
CounterChain1648_done <== stream.offset(CounterChain1648.getOutput("done"), -1);
OffsetExpr CounterChain1648_additionalOffset = new OffsetExpr();
CounterChain1648.connectInput("max0", CounterChain1648_max[0]);
DFEVector<DFEVar> Counter1647 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1647[0] <== CounterChain1648.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1647[i+1] <== CounterChain1648.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1655 */
DFEVar pipe1655_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint1319 = Counter1647[0];
DFEVar FixedPoint1320 = Counter1647[1];
// DFEVar Vector1649 = Par_pop_fifo(FIFO1645, 2);
FIFO1645_readEn <== pipe1655_ctr_en;
DFEVector<DFEVar> Vector1649 = FIFO1645_rdata;
DFEVector<DFEVar> Vector1325 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1319,FixedPoint1320));
DFEVar FixedPoint1650 = Vector1649[0];
DFEVar FixedPoint1651 = Vector1649[1];
DFEVector<DFEVar> Vector1652 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1650,FixedPoint1651));
/* Bram_store { */
BRAM1603_0.connectWport(Vector1325, Vector1652, pipe1655_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe1655 */
}
/* } Block void1657 Unitpipe */
}
/* } Block void1659 Parallel */
}
/* } Block void1661 Parallel */
/* void1697_ParSM void1697 { */
SMIO void1697_sm = addStateMachine("void1697_sm", new void1697_ParSM(this));
    void1697_sm.connectInput("sm_en", void1697_en);
    void1697_done <== stream.offset(void1697_sm.getOutput("sm_done"),-1);
void1697_sm.connectInput("s0_done", pipe1681_done);
pipe1681_en <== void1697_sm.getOutput("s0_en");
void1697_sm.connectInput("s1_done", pipe1695_done);
pipe1695_en <== void1697_sm.getOutput("s1_en");
/* } void1697_ParSM void1697 */
/* Block void1697 Parallel { */
{
/* ParPipeReduce pipe1681 = ParPipeReduce(CounterChain1666, reg1662) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe1681 controller { */
/* PipeSM pipe1681 { */
OffsetExpr pipe1681_offset = stream.makeOffsetAutoLoop("pipe1681_offset");
SMIO pipe1681_sm = addStateMachine("pipe1681_sm", new PipeSM(this, 1));
    pipe1681_sm.connectInput("sm_en", pipe1681_en);
    pipe1681_done <== stream.offset(pipe1681_sm.getOutput("sm_done"),-1-pipe1681_offset);
DFEVar pipe1681_rst_en = pipe1681_sm.getOutput("rst_en");
pipe1681_sm.connectInput("rst_done", pipe1681_rst_done);
pipe1681_rst_done <== stream.offset(pipe1681_rst_en, -pipe1681_offset-1);
pipe1681_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1664_max_0 = pipe1681_sm.getOutput("ctr_maxOut_0");
pipe1681_sm.connectInput("ctr_done", CounterChain1666_done);
DFEVar pipe1681_datapath_en = pipe1681_sm.getOutput("ctr_en");
DFEVar pipe1681_loopLengthVal = pipe1681_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe1681_redLoopChain = control.count.makeCounterChain(pipe1681_datapath_en);
DFEVar pipe1681_redLoopCtr = pipe1681_redLoopChain.addCounter(pipe1681_loopLengthVal, 1);
DFEVar pipe1681_redLoop_done = stream.offset(pipe1681_redLoopChain.getCounterWrap(pipe1681_redLoopCtr), -1);
DFEVar pipe1681_ctr_en = pipe1681_datapath_en & pipe1681_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain1666_en = pipe1681_datapath_en & pipe1681_redLoop_done;
DFEVar[] CounterChain1666_max = {Counter1664_max_0};
int[] CounterChain1666_strides = {1};
OffsetExpr CounterChain1666_offset = stream.makeOffsetAutoLoop("CounterChain1666_offset");
SMIO CounterChain1666 = addStateMachine("CounterChain1666_sm", new CounterChain1666_CtrSM(owner, CounterChain1666_strides)); // gap = 0
CounterChain1666.connectInput("en", CounterChain1666_en);
CounterChain1666.connectInput("reset", pipe1681_done);
DFEVar CounterChain1666_maxed = CounterChain1666.getOutput("saturated");
CounterChain1666_done <== stream.offset(CounterChain1666.getOutput("done"), -1);
OffsetExpr CounterChain1666_additionalOffset = new OffsetExpr();
CounterChain1666.connectInput("max0", CounterChain1666_max[0]);
DFEVector<DFEVar> Counter1664 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1664[0] <== CounterChain1666.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1664[i+1] <== CounterChain1666.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1681 */
/* } pipe1681 controller */
/* ParPipeReduce pipe1681 par loop { */
DFEVar FixedPoint1351 = Counter1664[0];
DFEVar FixedPoint1352 = Counter1664[1];
/* } pipe1681 par loop */
DFEVar FixedPoint1678 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe1681 func block { */
DFEVector<DFEVar> Vector1353 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1351,FixedPoint1352));
/* Bram_load { */
DFEVector<DFEVar> Vector1668 = BRAM1600_0.connectRport(Vector1353, new int[] {1}); //r4
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector1669 = BRAM1602_0.connectRport(Vector1353, new int[] {1}); //r4
/* } Bram_load */
// FixedPoint1670 is just a register read
// FixedPoint1671 already emitted in pipe1681;
// FixedPoint1672 already emitted in pipe1681;
// FixedPoint1673 already emitted in pipe1681;
// FixedPoint1674 already emitted in pipe1681;
// FixedPoint1675 already emitted in pipe1681;
// FixedPoint1676 already emitted in pipe1681;
// FixedPoint1677 already emitted in pipe1681;
// FixedPoint1678 already emitted in pipe1681;
/* Reg_write { */
// Write to accumulator register
DFEVar reg1662_en = pipe1681_datapath_en & pipe1681_redLoop_done;
Accumulator.Params reg1662_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe1681_done /*because _rst_en goes hi on each iter*/).withEnable(reg1662_en);
DFEVar reg1662 = Reductions.accumulator.makeAccumulator(FixedPoint1678, reg1662_accParams);
reg1662_1_lib.write(reg1662, pipe1681_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@40bbbe33, numDuplicates = 2 */
/* } pipe1681 func block */
new pipe1681_reduce_kernel(owner , Vector1668,Vector1669 , FixedPoint1678  ); // Reduce kernel
}
/* } ParPipeReduce pipe1681 */
/* ParPipeReduce pipe1695 = ParPipeReduce(CounterChain1667, reg1663) { */
{
/* PipeSM to be emitted */
/* ParPipeReduce pipe1695 controller { */
/* PipeSM pipe1695 { */
OffsetExpr pipe1695_offset = stream.makeOffsetAutoLoop("pipe1695_offset");
SMIO pipe1695_sm = addStateMachine("pipe1695_sm", new PipeSM(this, 1));
    pipe1695_sm.connectInput("sm_en", pipe1695_en);
    pipe1695_done <== stream.offset(pipe1695_sm.getOutput("sm_done"),-1-pipe1695_offset);
DFEVar pipe1695_rst_en = pipe1695_sm.getOutput("rst_en");
pipe1695_sm.connectInput("rst_done", pipe1695_rst_done);
pipe1695_rst_done <== stream.offset(pipe1695_rst_en, -pipe1695_offset-1);
pipe1695_sm.connectInput("sm_maxIn_0", const96_FixedPoint1025);
DFEVar Counter1665_max_0 = pipe1695_sm.getOutput("ctr_maxOut_0");
pipe1695_sm.connectInput("ctr_done", CounterChain1667_done);
DFEVar pipe1695_datapath_en = pipe1695_sm.getOutput("ctr_en");
DFEVar pipe1695_loopLengthVal = pipe1695_offset.getDFEVar(this, dfeUInt(9));
CounterChain pipe1695_redLoopChain = control.count.makeCounterChain(pipe1695_datapath_en);
DFEVar pipe1695_redLoopCtr = pipe1695_redLoopChain.addCounter(pipe1695_loopLengthVal, 1);
DFEVar pipe1695_redLoop_done = stream.offset(pipe1695_redLoopChain.getCounterWrap(pipe1695_redLoopCtr), -1);
DFEVar pipe1695_ctr_en = pipe1695_datapath_en & pipe1695_redLoop_done;
/* CustomCounterChain { */
DFEVar CounterChain1667_en = pipe1695_datapath_en & pipe1695_redLoop_done;
DFEVar[] CounterChain1667_max = {Counter1665_max_0};
int[] CounterChain1667_strides = {1};
OffsetExpr CounterChain1667_offset = stream.makeOffsetAutoLoop("CounterChain1667_offset");
SMIO CounterChain1667 = addStateMachine("CounterChain1667_sm", new CounterChain1667_CtrSM(owner, CounterChain1667_strides)); // gap = 0
CounterChain1667.connectInput("en", CounterChain1667_en);
CounterChain1667.connectInput("reset", pipe1695_done);
DFEVar CounterChain1667_maxed = CounterChain1667.getOutput("saturated");
CounterChain1667_done <== stream.offset(CounterChain1667.getOutput("done"), -1);
OffsetExpr CounterChain1667_additionalOffset = new OffsetExpr();
CounterChain1667.connectInput("max0", CounterChain1667_max[0]);
DFEVector<DFEVar> Counter1665 = new DFEVectorType<DFEVar>(dfeInt(32), 2).newInstance(this);
Counter1665[0] <== CounterChain1667.getOutput("counter0");
for (int i = 0; i < 1; i++) {
  Counter1665[i+1] <== CounterChain1667.getOutput("counter0_extension" + i);
}
/* } CustomCounterChain */
/* } PipeSM pipe1695 */
/* } pipe1695 controller */
/* ParPipeReduce pipe1695 par loop { */
DFEVar FixedPoint1384 = Counter1665[0];
DFEVar FixedPoint1385 = Counter1665[1];
/* } pipe1695 par loop */
DFEVar FixedPoint1692 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* ParPipeReduce pipe1695 func block { */
DFEVector<DFEVar> Vector1386 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2).newInstance(this, Arrays.asList(FixedPoint1384,FixedPoint1385));
/* Bram_load { */
DFEVector<DFEVar> Vector1682 = BRAM1601_0.connectRport(Vector1386, new int[] {1}); //r4
/* } Bram_load */
/* Bram_load { */
DFEVector<DFEVar> Vector1683 = BRAM1603_0.connectRport(Vector1386, new int[] {1}); //r4
/* } Bram_load */
// FixedPoint1684 is just a register read
// FixedPoint1685 already emitted in pipe1695;
// FixedPoint1686 already emitted in pipe1695;
// FixedPoint1687 already emitted in pipe1695;
// FixedPoint1688 already emitted in pipe1695;
// FixedPoint1689 already emitted in pipe1695;
// FixedPoint1690 already emitted in pipe1695;
// FixedPoint1691 already emitted in pipe1695;
// FixedPoint1692 already emitted in pipe1695;
/* Reg_write { */
// Write to accumulator register
DFEVar reg1663_en = pipe1695_datapath_en & pipe1695_redLoop_done;
Accumulator.Params reg1663_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(pipe1695_done /*because _rst_en goes hi on each iter*/).withEnable(reg1663_en);
DFEVar reg1663 = Reductions.accumulator.makeAccumulator(FixedPoint1692, reg1663_accParams);
reg1663_1_lib.write(reg1663, pipe1695_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@40bbbe33, numDuplicates = 2 */
/* } pipe1695 func block */
new pipe1695_reduce_kernel(owner , Vector1682,Vector1683 , FixedPoint1692  ); // Reduce kernel
}
/* } ParPipeReduce pipe1695 */
}
/* } Block void1697 Parallel */
// Unit pipe writtenIn(void1705) = List(Sym(1594))
//   reg1594 = Reflect(Reg_new(Sym(98)),Summary(mutable),List()), isAccum(reg1594) = true
/* PipeSM void1705 { */
OffsetExpr void1705_offset = stream.makeOffsetAutoLoop("void1705_offset");
SMIO void1705_sm = addStateMachine("void1705_sm", new PipeSM(this, 1));
    void1705_sm.connectInput("sm_en", void1705_en);
    void1705_done <== stream.offset(void1705_sm.getOutput("sm_done"),-1-void1705_offset);
DFEVar void1705_rst_en = void1705_sm.getOutput("rst_en");
void1705_sm.connectInput("rst_done", void1705_rst_done);
void1705_rst_done <== stream.offset(void1705_rst_en, -void1705_offset-1);
void1705_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void1705_sm.connectInput("ctr_done", stream.offset(void1705_sm.getOutput("ctr_en"), -1));
DFEVar void1705_datapath_en = void1705_en & ~void1705_rst_en;
DFEVar void1705_ctr_en = void1705_datapath_en;
/* } PipeSM void1705 */
DFEVar void1705_loopLengthVal = void1705_offset.getDFEVar(this, dfeUInt(9));
Count.Params void1705_redLoopParams = control.count.makeParams(9)
                              .withEnable(void1705_datapath_en)
                              .withReset(void1705_done)
                              .withMax(void1705_loopLengthVal)
                              .withWrapMode(WrapMode.STOP_AT_MAX);
    Counter void1705_redLoopCounter = control.count.makeCounter(void1705_redLoopParams);
    DFEVar void1705_redLoop_done = void1705_redLoopCounter.getCount() === void1705_loopLengthVal-1;
DFEVar FixedPoint1702 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Block void1705 Unitpipe { */
{
DFEVar FixedPoint1698 = reg1662_1_lib.read(1); // reg read
DFEVar FixedPoint1699 = reg1663_1_lib.read(1); // reg read
// FixedPoint1700 is just a register read
// FixedPoint1701 already emitted in void1705;
// FixedPoint1702 already emitted in void1705;
/* Reg_write { */
// Write to accumulator register
DFEVar reg1594_en = void1705_done /* Not sure if this is right */;
Accumulator.Params reg1594_accParams = Reductions.accumulator.makeAccumulatorConfig(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)).withClear(metapipe1707_done /*because _rst_en goes hi on each iter*/).withEnable(reg1594_en);
DFEVar reg1594 = Reductions.accumulator.makeAccumulator(FixedPoint1702, reg1594_accParams);
reg1594_1_lib.write(reg1594, void1705_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@40bbbe33, numDuplicates = 2 */

/* } Block void1705 Unitpipe */
new void1705_reduce_kernel(owner   , FixedPoint1702 , FixedPoint1698,FixedPoint1699); // Reduce kernel
}
/* } metapipe1707 func block */
}
/* } ParPipeReduce metapipe1707 */
// Unit pipe writtenIn(void1711) = List(Sym(1588))
//   argout1588 = Reflect(Argout_new(Sym(98)),Summary(mutable),List()), isAccum(argout1588) = false
/* PipeSM void1711 { */
OffsetExpr void1711_offset = stream.makeOffsetAutoLoop("void1711_offset");
SMIO void1711_sm = addStateMachine("void1711_sm", new PipeSM(this, 1));
    void1711_sm.connectInput("sm_en", void1711_en);
    void1711_done <== stream.offset(void1711_sm.getOutput("sm_done"),-1-void1711_offset);
DFEVar void1711_rst_en = void1711_sm.getOutput("rst_en");
void1711_sm.connectInput("rst_done", void1711_rst_done);
void1711_rst_done <== stream.offset(void1711_rst_en, -void1711_offset-1);
void1711_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void1711_sm.connectInput("ctr_done", stream.offset(void1711_sm.getOutput("ctr_en"), -1));
DFEVar void1711_datapath_en = void1711_en & ~void1711_rst_en;
DFEVar void1711_ctr_en = void1711_datapath_en;
/* } PipeSM void1711 */
/* Block void1711 Unitpipe { */
{
DFEVar FixedPoint1708 = reg1594_1; // reg read
/* Reg_write { */
io.scalarOutput("argout1588", FixedPoint1708, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), top_done);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$ArgumentOut$@8376a69, numDuplicates = 1 */
}
/* } Block void1711 Unitpipe */












// rdone signals for N-Buffers go here
BRAM1603_0.connectStageCtrl(void1697_done, void1697_en, new int[] { 1 }); /*read*/
BRAM1603_0.connectStageCtrl(void1661_done, void1661_en, new int[] { 0 }); /*write*/
BRAM1603_0.connectUnwrittenPorts(new int[] {1});
BRAM1603_0.connectUnreadPorts(new int[] {0});
BRAM1603_0.connectUntouchedPorts(new int[] {});
BRAM1603_0.connectDummyBroadcast();
reg1662_1_lib.connectStageCtrl(void1705_done, void1705_en, new int[] { 1 }); /*read*/
reg1662_1_lib.connectStageCtrl(void1697_done, void1697_en, new int[] { 0 }); /*write*/
reg1662_1_lib.connectUnwrittenPorts(new int[] {1});
reg1662_1_lib.connectUnreadPorts(new int[] {0});
reg1662_1_lib.connectUntouchedPorts(new int[] {});
reg1662_1_lib.connectDummyBroadcast();
BRAM1601_0.connectStageCtrl(void1697_done, void1697_en, new int[] { 1 }); /*read*/
BRAM1601_0.connectStageCtrl(void1661_done, void1661_en, new int[] { 0 }); /*write*/
BRAM1601_0.connectUnwrittenPorts(new int[] {1});
BRAM1601_0.connectUnreadPorts(new int[] {0});
BRAM1601_0.connectUntouchedPorts(new int[] {});
BRAM1601_0.connectDummyBroadcast();
BRAM1600_0.connectStageCtrl(void1697_done, void1697_en, new int[] { 1 }); /*read*/
BRAM1600_0.connectStageCtrl(void1661_done, void1661_en, new int[] { 0 }); /*write*/
BRAM1600_0.connectUnwrittenPorts(new int[] {1});
BRAM1600_0.connectUnreadPorts(new int[] {0});
BRAM1600_0.connectUntouchedPorts(new int[] {});
BRAM1600_0.connectDummyBroadcast();
reg1663_1_lib.connectStageCtrl(void1705_done, void1705_en, new int[] { 1 }); /*read*/
reg1663_1_lib.connectStageCtrl(void1697_done, void1697_en, new int[] { 0 }); /*write*/
reg1663_1_lib.connectUnwrittenPorts(new int[] {1});
reg1663_1_lib.connectUnreadPorts(new int[] {0});
reg1663_1_lib.connectUntouchedPorts(new int[] {});
reg1663_1_lib.connectDummyBroadcast();
BRAM1602_0.connectStageCtrl(void1697_done, void1697_en, new int[] { 1 }); /*read*/
BRAM1602_0.connectStageCtrl(void1661_done, void1661_en, new int[] { 0 }); /*write*/
BRAM1602_0.connectUnwrittenPorts(new int[] {1});
BRAM1602_0.connectUnreadPorts(new int[] {0});
BRAM1602_0.connectUntouchedPorts(new int[] {});
BRAM1602_0.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
