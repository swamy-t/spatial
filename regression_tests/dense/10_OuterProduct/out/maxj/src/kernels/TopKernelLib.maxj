/*****************************************
  MaxJ BACKEND: emitSource 
*******************************************/
package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class TopKernelLib extends BaseLib {
TopKernelLib(KernelLib owner, DFEVar top_en, DFEVar top_done) {
super(owner);














int DRAM2672 = 1048576;


int DRAM2674 = 2097152;


int DRAM2676 = 3145728;










/* Emitting Hwblock dependencies { */
// Dep: const0_FixedPoint99 = ConstFixPt(0,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$Signed,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B32,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: String1 = ArrayApply(Sym(0),Const(0))
// Dep: FixedPoint2 = Tpes_String_to_fixpt(Sym(1))
// Dep: int5 = Tpes_Fix_to_int(Sym(2))
// Dep: argin2667 = Reflect(Argin_new(Sym(99)),Summary(mutable),List())
DFEVar FixedPoint97 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint97 <== argin2667;
// Dep: FixedPoint97 = Tpes_Int_to_fix(Sym(5))
// Dep: void2669 = Reflect(Set_arg(Sym(2667),Sym(97)),Summary(mayRead(Sym(2667)), mstRead(Sym(2667)), mayWrite(Sym(2667)), mstWrite(Sym(2667))),List(Sym(2667)))

// Dep: FixedPoint2671 = Reflect(Reg_read(Sym(2667)),Summary(mayRead(Sym(2667)), mstRead(Sym(2667))),List(Sym(2667), Sym(2669)))
// Dep: String3 = ArrayApply(Sym(0),Const(1))
// Dep: FixedPoint4 = Tpes_String_to_fixpt(Sym(3))
// Dep: int51 = Tpes_Fix_to_int(Sym(4))
// Dep: argin2668 = Reflect(Argin_new(Sym(99)),Summary(mutable),List())
DFEVar FixedPoint98 = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
FixedPoint98 <== argin2668;
// Dep: FixedPoint98 = Tpes_Int_to_fix(Sym(51))
// Dep: void2670 = Reflect(Set_arg(Sym(2668),Sym(98)),Summary(mayRead(Sym(2668)), mstRead(Sym(2668)), mayWrite(Sym(2668)), mstWrite(Sym(2668))),List(Sym(2668)))

// Dep: FixedPoint2673 = Reflect(Reg_read(Sym(2668)),Summary(mayRead(Sym(2668)), mstRead(Sym(2668))),List(Sym(2668), Sym(2670)))
// Dep: FixedPoint2675 = FixPt_Mul(Sym(2671),Sym(2673))
DFEVar FixedPoint2675 = FixedPoint2671 * FixedPoint2673;
// Dep: const96_FixedPoint1879 = ConstFixPt(96,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$Signed,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B32,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const9216_FixedPoint1881 = ConstFixPt(9216,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$Signed,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B32,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: const512_FixedPoint131 = ConstFixPt(512,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$Signed,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B32,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM2672 = Reflect(Offchip_new(Sym(2671)),Summary(mutable),List())
// Dep: const1_FixedPoint53 = ConstFixPt(1,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$Signed,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B32,OuterProduct$@6e51ad67.type#spatial.shared.SpatialIdentifiers$B0)
// Dep: DRAM2674 = Reflect(Offchip_new(Sym(2673)),Summary(mutable),List())
// Dep: Bit197 = ConstBit(true)
DFEVar Bit197 = constant.var( true );
// Dep: DRAM2676 = Reflect(Offchip_new(Sym(2675)),Summary(mutable),List())
/*  End Hwblock dependencies } */
/* quoteSuffix = Map(Sym(2798) -> Map(Sym(2308) -> _chain[0].read(), Sym(2307) -> _chain[0].read()), Sym(2815) -> Map(Sym(2367) -> _chain[0].read()), Sym(2819) -> Map(Sym(2308) -> _chain[1].read(), Sym(2307) -> _chain[1].read()), Sym(2809) -> Map(), Sym(2817) -> Map(Sym(2367) -> _chain[1].read()), Sym(2786) -> Map()) */
DFEVar void2823_en = top_en;
top_done <== void2823_done;
// Hwblock: childrenOf(void2823) = List(Sym(2821))
/* void2823_SeqSM void2823 { */
SMIO void2823_sm = addStateMachine("void2823_sm", new void2823_SeqSM(this));
    void2823_sm.connectInput("sm_en", void2823_en);
    void2823_done <== stream.offset(void2823_sm.getOutput("sm_done"),-1);
void2823_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2823_rst_en = void2823_sm.getOutput("rst_en");
void2823_sm.connectInput("s0_done", metapipe2821_done);
metapipe2821_en <== void2823_sm.getOutput("s0_en");
DFEVar void2823_datapath_en = void2823_en & ~void2823_rst_en;
DFEVar void2823_ctr_en = void2823_datapath_en;
/* } void2823_SeqSM void2823 */
/* ParPipeForeach metapipe2821 = ParPipeForeach(CounterChain2757) { */
{
/* MPSM to be emitted */
/* metapipe2821_MPSM metapipe2821 { */
SMIO metapipe2821_sm = addStateMachine("metapipe2821_sm", new metapipe2821_MPSM(this));
    metapipe2821_sm.connectInput("sm_en", metapipe2821_en);
    metapipe2821_done <== stream.offset(metapipe2821_sm.getOutput("sm_done"),-1);
DFEVar metapipe2821_niter = ((FixedPoint2753 - const0_FixedPoint99) / (const96_FixedPoint1879 * 1)) * ((FixedPoint2754 - const0_FixedPoint99) / (const96_FixedPoint1879 * 1));
metapipe2821_sm.connectInput("sm_numIter", metapipe2821_niter.cast(dfeUInt(32)));
DFEVar metapipe2821_rst_en = metapipe2821_sm.getOutput("rst_en");
metapipe2821_sm.connectInput("s0_done", void2786_done);
void2786_en <== metapipe2821_sm.getOutput("s0_en");
metapipe2821_sm.connectInput("s1_done", pipe2798_done);
pipe2798_en <== metapipe2821_sm.getOutput("s1_en");
metapipe2821_sm.connectInput("s2_done", metapipe2819_done);
metapipe2819_en <== metapipe2821_sm.getOutput("s2_en");
DFEVar Counter2755_max_0 = FixedPoint2753;
DFEVar Counter2756_max_1 = FixedPoint2754;
DFEVar metapipe2821_datapath_en = metapipe2821_en;
DFEVar metapipe2821_ctr_en = void2786_done;
/* CustomCounterChain { */
DFEVar CounterChain2757_en = void2786_done;
DFEVar[] CounterChain2757_max = {FixedPoint2753,FixedPoint2754};
int[] CounterChain2757_strides = {96,96};
OffsetExpr CounterChain2757_offset = stream.makeOffsetAutoLoop("CounterChain2757_offset");
SMIO CounterChain2757 = addStateMachine("CounterChain2757_sm", new CounterChain2757_CtrSM(owner, CounterChain2757_strides)); // gap = 0
CounterChain2757.connectInput("en", CounterChain2757_en);
CounterChain2757.connectInput("reset", metapipe2821_done);
DFEVar CounterChain2757_maxed = CounterChain2757.getOutput("saturated");
DFEVar CounterChain2757_done = stream.offset(CounterChain2757.getOutput("done"), -1);
OffsetExpr CounterChain2757_additionalOffset = new OffsetExpr();
CounterChain2757.connectInput("max0", CounterChain2757_max[0]);
DFEVar Counter2755 = CounterChain2757.getOutput("counter0");
CounterChain2757.connectInput("max1", CounterChain2757_max[1]);
DFEVar Counter2756 = CounterChain2757.getOutput("counter1");
/* } CustomCounterChain */
/* } metapipe2821_MPSM metapipe2821 */
DFEVar metapipe2821_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2307 = Counter2755;
DFEVar FixedPoint2308 = Counter2756;
DblBufReg[] FixedPoint2307_chain = spatialUtils.getRegChain(
              "metapipe2821_FixedPoint2307", 3, FixedPoint2307,
              new DFEVar[]{void2786_done,pipe2798_done,metapipe2819_done});
DblBufReg[] FixedPoint2308_chain = spatialUtils.getRegChain(
              "metapipe2821_FixedPoint2308", 3, FixedPoint2308,
              new DFEVar[]{void2786_done,pipe2798_done,metapipe2819_done});
/* void2786_ParSM void2786 { */
SMIO void2786_sm = addStateMachine("void2786_sm", new void2786_ParSM(this));
    void2786_sm.connectInput("sm_en", void2786_en);
    void2786_done <== stream.offset(void2786_sm.getOutput("sm_done"),-1);
void2786_sm.connectInput("s0_done", void2772_done);
void2772_en <== void2786_sm.getOutput("s0_en");
void2786_sm.connectInput("s1_done", void2784_done);
void2784_en <== void2786_sm.getOutput("s1_en");
/* } void2786_ParSM void2786 */
/* Block void2786 Parallel { */
{
// FIFO FIFO2761 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint131, const0_FixedPoint99);
DFEVector<DFEVar> FIFO2761_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2761_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2761_readEn = dfeBool().newInstance(this);
DFEVar FIFO2761_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2772) = List()
/* void2772_MPSM void2772 { */
SMIO void2772_sm = addStateMachine("void2772_sm", new void2772_MPSM(this));
    void2772_sm.connectInput("sm_en", void2772_en);
    void2772_done <== stream.offset(void2772_sm.getOutput("sm_done"),-1);
void2772_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2772_rst_en = void2772_sm.getOutput("rst_en");
void2772_sm.connectInput("s0_done", void2762_done);
void2762_en <== void2772_sm.getOutput("s0_en");
void2772_sm.connectInput("s1_done", pipe2770_done);
pipe2770_en <== void2772_sm.getOutput("s1_en");
DFEVar void2772_datapath_en = void2772_en & ~void2772_rst_en;
DFEVar void2772_ctr_en = void2772_datapath_en;
/* } void2772_MPSM void2772 */
/* Block void2772 Unitpipe { */
{
MemoryCmdGenLib void2762 = new MemoryCmdGenLib(
              this,
              void2762_en, void2762_done,
              DRAM2672, FixedPoint2307,
              "DRAM2672_void2762_in",
              96,
              FIFO2761_readEn, FIFO2761_rdata);
FIFO2761_writeEn <== void2762_en;
FIFO2761_wdata <== FIFO2761_rdata;
/* ParPipeForeach pipe2770 = ParPipeForeach(CounterChain2764) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2770 { */
OffsetExpr pipe2770_offset = stream.makeOffsetAutoLoop("pipe2770_offset");
SMIO pipe2770_sm = addStateMachine("pipe2770_sm", new PipeSM(this, 1));
    pipe2770_sm.connectInput("sm_en", pipe2770_en);
    pipe2770_done <== stream.offset(pipe2770_sm.getOutput("sm_done"),-1-pipe2770_offset);
DFEVar pipe2770_rst_en = pipe2770_sm.getOutput("rst_en");
pipe2770_sm.connectInput("rst_done", pipe2770_rst_done);
pipe2770_rst_done <== stream.offset(pipe2770_rst_en, -pipe2770_offset-1);
pipe2770_sm.connectInput("sm_maxIn_0", const96_FixedPoint1879);
DFEVar Counter2763_max_0 = pipe2770_sm.getOutput("ctr_maxOut_0");
pipe2770_sm.connectInput("ctr_done", CounterChain2764_done);
DFEVar pipe2770_datapath_en = pipe2770_sm.getOutput("ctr_en");
DFEVar pipe2770_ctr_en = pipe2770_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2764_en = pipe2770_datapath_en;
DFEVar[] CounterChain2764_max = {const96_FixedPoint1879};
int[] CounterChain2764_strides = {1};
OffsetExpr CounterChain2764_offset = stream.makeOffsetAutoLoop("CounterChain2764_offset");
SMIO CounterChain2764 = addStateMachine("CounterChain2764_sm", new CounterChain2764_CtrSM(owner, CounterChain2764_strides)); // gap = 0
CounterChain2764.connectInput("en", CounterChain2764_en);
CounterChain2764.connectInput("reset", pipe2770_done);
DFEVar CounterChain2764_maxed = CounterChain2764.getOutput("saturated");
CounterChain2764_done <== stream.offset(CounterChain2764.getOutput("done"), -1);
OffsetExpr CounterChain2764_additionalOffset = new OffsetExpr();
CounterChain2764.connectInput("max0", CounterChain2764_max[0]);
DFEVar Counter2763 = CounterChain2764.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2770 */
DFEVar pipe2770_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2316 = Counter2763;
// DFEVar Vector2765 = Par_pop_fifo(FIFO2761, 1);
FIFO2761_readEn <== pipe2770_ctr_en;
DFEVector<DFEVar> Vector2765 = FIFO2761_rdata;
DFEVector<DFEVar> Vector2320 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2316));
DFEVar FixedPoint2766 = Vector2765[0];
DFEVector<DFEVar> Vector2767 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2766));
/* Bram_store { */
BRAM2758_0.connectWport(Vector2320, Vector2767, pipe2770_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2770 */
}
/* } Block void2772 Unitpipe */
// FIFO FIFO2773 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint131, const0_FixedPoint99);
DFEVector<DFEVar> FIFO2773_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2773_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2773_readEn = dfeBool().newInstance(this);
DFEVar FIFO2773_writeEn = dfeBool().newInstance(this);
// Unit pipe writtenIn(void2784) = List()
/* void2784_MPSM void2784 { */
SMIO void2784_sm = addStateMachine("void2784_sm", new void2784_MPSM(this));
    void2784_sm.connectInput("sm_en", void2784_en);
    void2784_done <== stream.offset(void2784_sm.getOutput("sm_done"),-1);
void2784_sm.connectInput("sm_numIter", constant.var(dfeUInt(32), 1));
DFEVar void2784_rst_en = void2784_sm.getOutput("rst_en");
void2784_sm.connectInput("s0_done", void2774_done);
void2774_en <== void2784_sm.getOutput("s0_en");
void2784_sm.connectInput("s1_done", pipe2782_done);
pipe2782_en <== void2784_sm.getOutput("s1_en");
DFEVar void2784_datapath_en = void2784_en & ~void2784_rst_en;
DFEVar void2784_ctr_en = void2784_datapath_en;
/* } void2784_MPSM void2784 */
/* Block void2784 Unitpipe { */
{
MemoryCmdGenLib void2774 = new MemoryCmdGenLib(
              this,
              void2774_en, void2774_done,
              DRAM2674, FixedPoint2308,
              "DRAM2674_void2774_in",
              96,
              FIFO2773_readEn, FIFO2773_rdata);
FIFO2773_writeEn <== void2774_en;
FIFO2773_wdata <== FIFO2773_rdata;
/* ParPipeForeach pipe2782 = ParPipeForeach(CounterChain2776) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2782 { */
OffsetExpr pipe2782_offset = stream.makeOffsetAutoLoop("pipe2782_offset");
SMIO pipe2782_sm = addStateMachine("pipe2782_sm", new PipeSM(this, 1));
    pipe2782_sm.connectInput("sm_en", pipe2782_en);
    pipe2782_done <== stream.offset(pipe2782_sm.getOutput("sm_done"),-1-pipe2782_offset);
DFEVar pipe2782_rst_en = pipe2782_sm.getOutput("rst_en");
pipe2782_sm.connectInput("rst_done", pipe2782_rst_done);
pipe2782_rst_done <== stream.offset(pipe2782_rst_en, -pipe2782_offset-1);
pipe2782_sm.connectInput("sm_maxIn_0", const96_FixedPoint1879);
DFEVar Counter2775_max_0 = pipe2782_sm.getOutput("ctr_maxOut_0");
pipe2782_sm.connectInput("ctr_done", CounterChain2776_done);
DFEVar pipe2782_datapath_en = pipe2782_sm.getOutput("ctr_en");
DFEVar pipe2782_ctr_en = pipe2782_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2776_en = pipe2782_datapath_en;
DFEVar[] CounterChain2776_max = {const96_FixedPoint1879};
int[] CounterChain2776_strides = {1};
OffsetExpr CounterChain2776_offset = stream.makeOffsetAutoLoop("CounterChain2776_offset");
SMIO CounterChain2776 = addStateMachine("CounterChain2776_sm", new CounterChain2776_CtrSM(owner, CounterChain2776_strides)); // gap = 0
CounterChain2776.connectInput("en", CounterChain2776_en);
CounterChain2776.connectInput("reset", pipe2782_done);
DFEVar CounterChain2776_maxed = CounterChain2776.getOutput("saturated");
CounterChain2776_done <== stream.offset(CounterChain2776.getOutput("done"), -1);
OffsetExpr CounterChain2776_additionalOffset = new OffsetExpr();
CounterChain2776.connectInput("max0", CounterChain2776_max[0]);
DFEVar Counter2775 = CounterChain2776.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2782 */
DFEVar pipe2782_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2331 = Counter2775;
// DFEVar Vector2777 = Par_pop_fifo(FIFO2773, 1);
FIFO2773_readEn <== pipe2782_ctr_en;
DFEVector<DFEVar> Vector2777 = FIFO2773_rdata;
DFEVector<DFEVar> Vector2335 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2331));
DFEVar FixedPoint2778 = Vector2777[0];
DFEVector<DFEVar> Vector2779 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2778));
/* Bram_store { */
BRAM2759_0.connectWport(Vector2335, Vector2779, pipe2782_datapath_en, new int[] {0}); //w8
/* } Bram_store */
}
/* } ParPipeForeach pipe2782 */
}
/* } Block void2784 Unitpipe */
}
/* } Block void2786 Parallel */
/* ParPipeForeach pipe2798 = ParPipeForeach(CounterChain2789) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2798 { */
OffsetExpr pipe2798_offset = stream.makeOffsetAutoLoop("pipe2798_offset");
SMIO pipe2798_sm = addStateMachine("pipe2798_sm", new PipeSM(this, 2));
    pipe2798_sm.connectInput("sm_en", pipe2798_en);
    pipe2798_done <== stream.offset(pipe2798_sm.getOutput("sm_done"),-1-pipe2798_offset);
DFEVar pipe2798_rst_en = pipe2798_sm.getOutput("rst_en");
pipe2798_sm.connectInput("rst_done", pipe2798_rst_done);
pipe2798_rst_done <== stream.offset(pipe2798_rst_en, -pipe2798_offset-1);
pipe2798_sm.connectInput("sm_maxIn_0", const96_FixedPoint1879);
DFEVar Counter2787_max_0 = pipe2798_sm.getOutput("ctr_maxOut_0");
pipe2798_sm.connectInput("sm_maxIn_1", const96_FixedPoint1879);
DFEVar Counter2788_max_1 = pipe2798_sm.getOutput("ctr_maxOut_1");
pipe2798_sm.connectInput("ctr_done", CounterChain2789_done);
DFEVar pipe2798_datapath_en = pipe2798_sm.getOutput("ctr_en");
DFEVar pipe2798_ctr_en = pipe2798_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2789_en = pipe2798_datapath_en;
DFEVar[] CounterChain2789_max = {Counter2787_max_0,Counter2788_max_1};
int[] CounterChain2789_strides = {1,1};
OffsetExpr CounterChain2789_offset = stream.makeOffsetAutoLoop("CounterChain2789_offset");
SMIO CounterChain2789 = addStateMachine("CounterChain2789_sm", new CounterChain2789_CtrSM(owner, CounterChain2789_strides)); // gap = 0
CounterChain2789.connectInput("en", CounterChain2789_en);
CounterChain2789.connectInput("reset", pipe2798_done);
DFEVar CounterChain2789_maxed = CounterChain2789.getOutput("saturated");
CounterChain2789_done <== stream.offset(CounterChain2789.getOutput("done"), -1);
OffsetExpr CounterChain2789_additionalOffset = new OffsetExpr();
CounterChain2789.connectInput("max0", CounterChain2789_max[0]);
DFEVar Counter2787 = CounterChain2789.getOutput("counter0");
CounterChain2789.connectInput("max1", CounterChain2789_max[1]);
DFEVar Counter2788 = CounterChain2789.getOutput("counter1");
/* } CustomCounterChain */
/* } PipeSM pipe2798 */
DFEVar pipe2798_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2347 = Counter2787;
DFEVar FixedPoint2348 = Counter2788;
DFEVector<DFEVar> Vector2349 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2347));
/* Bram_load { */
DFEVector<DFEVar> Vector2790 = new DFEVectorType<DFEVar>(BRAM2758_0.type, 1).newInstance(this, Arrays.asList(BRAM2758_0.connectRport(FixedPoint2347, new int[] {1}))); //r2
/* } Bram_load */
DFEVector<DFEVar> Vector2352 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2348));
/* Bram_load { */
DFEVector<DFEVar> Vector2791 = new DFEVectorType<DFEVar>(BRAM2759_0.type, 1).newInstance(this, Arrays.asList(BRAM2759_0.connectRport(FixedPoint2348, new int[] {1}))); //r2
/* } Bram_load */
DFEVar FixedPoint2355 = FixedPoint2347 * const96_FixedPoint1879;
DFEVar FixedPoint2356 = FixedPoint2355 + FixedPoint2348;
DFEVector<DFEVar> Vector2359 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2356));
DFEVar FixedPoint2792 = Vector2790[0];
DFEVar FixedPoint2793 = Vector2791[0];
DFEVar FixedPoint2794 = FixedPoint2792 * FixedPoint2793;
DFEVector<DFEVar> Vector2795 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2794));
/* Bram_store { */
BRAM2760_0.connectWport(FixedPoint2347, FixedPoint2348, Vector2795, pipe2798_datapath_en, new int[] {0}); //w10
/* } Bram_store */
}
/* } ParPipeForeach pipe2798 */
// FIFO FIFO2799 = Fifo_new[dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT)](const512_FixedPoint131, const0_FixedPoint99);
DFEVector<DFEVar> FIFO2799_rdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVector<DFEVar> FIFO2799_wdata = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this);
DFEVar FIFO2799_readEn = dfeBool().newInstance(this);
DFEVar FIFO2799_writeEn = dfeBool().newInstance(this);
/* ParPipeForeach metapipe2819 = ParPipeForeach(CounterChain2801) { */
{
/* MPSM to be emitted */
/* metapipe2819_MPSM metapipe2819 { */
SMIO metapipe2819_sm = addStateMachine("metapipe2819_sm", new metapipe2819_MPSM(this));
    metapipe2819_sm.connectInput("sm_en", metapipe2819_en);
    metapipe2819_done <== stream.offset(metapipe2819_sm.getOutput("sm_done"),-1);
DFEVar metapipe2819_niter = ((const96_FixedPoint1879 - const0_FixedPoint99) / (const1_FixedPoint53 * 1));
metapipe2819_sm.connectInput("sm_numIter", metapipe2819_niter.cast(dfeUInt(32)));
DFEVar metapipe2819_rst_en = metapipe2819_sm.getOutput("rst_en");
metapipe2819_sm.connectInput("s0_done", pipe2809_done);
pipe2809_en <== metapipe2819_sm.getOutput("s0_en");
metapipe2819_sm.connectInput("s1_done", void2815_done);
void2815_en <== metapipe2819_sm.getOutput("s1_en");
metapipe2819_sm.connectInput("s2_done", void2817_done);
void2817_en <== metapipe2819_sm.getOutput("s2_en");
DFEVar Counter2800_max_0 = const96_FixedPoint1879;
DFEVar metapipe2819_datapath_en = metapipe2819_en;
DFEVar metapipe2819_ctr_en = pipe2809_done;
/* CustomCounterChain { */
DFEVar CounterChain2801_en = pipe2809_done;
DFEVar[] CounterChain2801_max = {Counter2800_max_0};
int[] CounterChain2801_strides = {1};
OffsetExpr CounterChain2801_offset = stream.makeOffsetAutoLoop("CounterChain2801_offset");
SMIO CounterChain2801 = addStateMachine("CounterChain2801_sm", new CounterChain2801_CtrSM(owner, CounterChain2801_strides)); // gap = 0
CounterChain2801.connectInput("en", CounterChain2801_en);
CounterChain2801.connectInput("reset", metapipe2819_done);
DFEVar CounterChain2801_maxed = CounterChain2801.getOutput("saturated");
DFEVar CounterChain2801_done = stream.offset(CounterChain2801.getOutput("done"), -1);
OffsetExpr CounterChain2801_additionalOffset = new OffsetExpr();
CounterChain2801.connectInput("max0", CounterChain2801_max[0]);
DFEVar Counter2800 = CounterChain2801.getOutput("counter0");
/* } CustomCounterChain */
/* } metapipe2819_MPSM metapipe2819 */
DFEVar metapipe2819_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2367 = Counter2800;
DblBufReg[] FixedPoint2367_chain = spatialUtils.getRegChain(
              "metapipe2819_FixedPoint2367", 3, FixedPoint2367,
              new DFEVar[]{pipe2809_done,void2815_done,void2817_done});
/* ParPipeForeach pipe2809 = ParPipeForeach(CounterChain2803) { */
{
/* PipeSM to be emitted */
/* PipeSM pipe2809 { */
OffsetExpr pipe2809_offset = stream.makeOffsetAutoLoop("pipe2809_offset");
SMIO pipe2809_sm = addStateMachine("pipe2809_sm", new PipeSM(this, 1));
    pipe2809_sm.connectInput("sm_en", pipe2809_en);
    pipe2809_done <== stream.offset(pipe2809_sm.getOutput("sm_done"),-1-pipe2809_offset);
DFEVar pipe2809_rst_en = pipe2809_sm.getOutput("rst_en");
pipe2809_sm.connectInput("rst_done", pipe2809_rst_done);
pipe2809_rst_done <== stream.offset(pipe2809_rst_en, -pipe2809_offset-1);
pipe2809_sm.connectInput("sm_maxIn_0", const96_FixedPoint1879);
DFEVar Counter2802_max_0 = pipe2809_sm.getOutput("ctr_maxOut_0");
pipe2809_sm.connectInput("ctr_done", CounterChain2803_done);
DFEVar pipe2809_datapath_en = pipe2809_sm.getOutput("ctr_en");
DFEVar pipe2809_ctr_en = pipe2809_datapath_en;
/* CustomCounterChain { */
DFEVar CounterChain2803_en = pipe2809_datapath_en;
DFEVar[] CounterChain2803_max = {Counter2802_max_0};
int[] CounterChain2803_strides = {1};
OffsetExpr CounterChain2803_offset = stream.makeOffsetAutoLoop("CounterChain2803_offset");
SMIO CounterChain2803 = addStateMachine("CounterChain2803_sm", new CounterChain2803_CtrSM(owner, CounterChain2803_strides)); // gap = 0
CounterChain2803.connectInput("en", CounterChain2803_en);
CounterChain2803.connectInput("reset", pipe2809_done);
DFEVar CounterChain2803_maxed = CounterChain2803.getOutput("saturated");
CounterChain2803_done <== stream.offset(CounterChain2803.getOutput("done"), -1);
OffsetExpr CounterChain2803_additionalOffset = new OffsetExpr();
CounterChain2803.connectInput("max0", CounterChain2803_max[0]);
DFEVar Counter2802 = CounterChain2803.getOutput("counter0");
/* } CustomCounterChain */
/* } PipeSM pipe2809 */
DFEVar pipe2809_redLoop_done = constant.var(true); // Hack for new fold unrolling...
DFEVar FixedPoint2370 = Counter2802;
DFEVar FixedPoint2371 = FixedPoint2367 * const96_FixedPoint1879;
DFEVar FixedPoint2372 = FixedPoint2371 + FixedPoint2370;
DFEVector<DFEVar> Vector2373 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2372));
/* Bram_load { */
DFEVector<DFEVar> Vector2804 = new DFEVectorType<DFEVar>(BRAM2760_0.type, 1).newInstance(this, Arrays.asList(BRAM2760_0.connectRport(FixedPoint2367, FixedPoint2370, new int[] {1}))); //r5
/* } Bram_load */
DFEVar Bit2377 = dfeFixOffset(1, 0, SignMode.UNSIGNED).newInstance(this);
Bit2377 <== FixedPoint2370 < const96_FixedPoint1879;
DFEVector<DFEVar> Vector2378 = new DFEVectorType<DFEVar>(dfeFixOffset(1, 0, SignMode.UNSIGNED), 1).newInstance(this, Arrays.asList(Bit2377));
DFEVar FixedPoint2805 = Vector2804[0];
DFEVector<DFEVar> Vector2806 = new DFEVectorType<DFEVar>(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1).newInstance(this, Arrays.asList(FixedPoint2805));
// Par_push_fifo(FIFO2799, Vector2806, Vector2378, true);
FIFO2799_writeEn <== pipe2809_ctr_en;
FIFO2799_wdata <== Vector2806;
}
/* } ParPipeForeach pipe2809 */
// Unit pipe writtenIn(void2815) = List(Sym(2810))
//   reg2810 = Reflect(Reg_new(Sym(99)),Summary(mutable),List()), isAccum(reg2810) = false
/* PipeSM void2815 { */
OffsetExpr void2815_offset = stream.makeOffsetAutoLoop("void2815_offset");
SMIO void2815_sm = addStateMachine("void2815_sm", new PipeSM(this, 1));
    void2815_sm.connectInput("sm_en", void2815_en);
    void2815_done <== stream.offset(void2815_sm.getOutput("sm_done"),-1-void2815_offset);
DFEVar void2815_rst_en = void2815_sm.getOutput("rst_en");
void2815_sm.connectInput("rst_done", void2815_rst_done);
void2815_rst_done <== stream.offset(void2815_rst_en, -void2815_offset-1);
void2815_sm.connectInput("sm_maxIn_0", constant.var(dfeInt(32), 1));
void2815_sm.connectInput("ctr_done", stream.offset(void2815_sm.getOutput("ctr_en"), -1));
DFEVar void2815_datapath_en = void2815_en & ~void2815_rst_en;
DFEVar void2815_ctr_en = void2815_datapath_en;
/* } PipeSM void2815 */
/* Block void2815 Unitpipe { */
{
DFEVar FixedPoint2384 = FixedPoint2307_chain[1].read() + FixedPoint2367_chain[0].read();
DFEVar FixedPoint2811 = FixedPoint2384 * FixedPoint2673;
DFEVar FixedPoint2812 = FixedPoint2811 + FixedPoint2308_chain[1].read();
/* Reg_write { */
reg2810_0_lib.write(FixedPoint2812, void2815_done, constant.var(false), 0);
/* } Reg_write // regType spatial.shared.SpatialIdentifiers$Regular$@46bfd013, numDuplicates = 1 */
}
/* } Block void2815 Unitpipe */
DFEVar FixedPoint2816 = reg2810_0_lib.read(1); // reg read
// void2817: Offchip_store_cmd(DRAM2676,FIFO2799, FixedPoint2816, const96_FixedPoint1879, 1)
MemoryCmdStLib void2817 = new MemoryCmdStLib(
          this,
          void2817_en, void2817_done,
          DRAM2676, FixedPoint2816,
          "DRAM2676_void2817_out",
          const96_FixedPoint1879,
          FIFO2799_writeEn, FIFO2799_wdata);
FIFO2799_readEn <== void2817_en;
}
/* } ParPipeForeach metapipe2819 */
}
/* } ParPipeForeach metapipe2821 */


























// rdone signals for N-Buffers go here
BRAM2760_0.connectStageCtrl(metapipe2819_done, metapipe2819_en, new int[] { 1 }); /*read*/
BRAM2760_0.connectStageCtrl(pipe2798_done, pipe2798_en, new int[] { 0 }); /*write*/
BRAM2760_0.connectUnwrittenPorts(new int[] {1});
BRAM2760_0.connectUnreadPorts(new int[] {0});
BRAM2760_0.connectUntouchedPorts(new int[] {});
BRAM2760_0.connectDummyBroadcast();
BRAM2758_0.connectStageCtrl(pipe2798_done, pipe2798_en, new int[] { 1 }); /*read*/
BRAM2758_0.connectStageCtrl(void2786_done, void2786_en, new int[] { 0 }); /*write*/
BRAM2758_0.connectUnwrittenPorts(new int[] {1});
BRAM2758_0.connectUnreadPorts(new int[] {0});
BRAM2758_0.connectUntouchedPorts(new int[] {});
BRAM2758_0.connectDummyBroadcast();
reg2810_0_lib.connectStageCtrl(void2817_done, void2817_en, new int[] { 1 }); /*read*/
reg2810_0_lib.connectStageCtrl(void2815_done, void2815_en, new int[] { 0 }); /*write*/
reg2810_0_lib.connectUnwrittenPorts(new int[] {1});
reg2810_0_lib.connectUnreadPorts(new int[] {0});
reg2810_0_lib.connectUntouchedPorts(new int[] {});
reg2810_0_lib.connectDummyBroadcast();
BRAM2759_0.connectStageCtrl(pipe2798_done, pipe2798_en, new int[] { 1 }); /*read*/
BRAM2759_0.connectStageCtrl(void2786_done, void2786_en, new int[] { 0 }); /*write*/
BRAM2759_0.connectUnwrittenPorts(new int[] {1});
BRAM2759_0.connectUnreadPorts(new int[] {0});
BRAM2759_0.connectUntouchedPorts(new int[] {});
BRAM2759_0.connectDummyBroadcast();
// Emit consts
	}
}
/*****************************************
  End of MaxJ BACKEND 
*******************************************/
