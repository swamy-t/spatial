package engine;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import java.util.Arrays;
class BaseLib extends KernelLib {
BaseLib(KernelLib owner) { super(owner); }
      SpatialUtils spatialUtils = new SpatialUtils(this);
DFEVar argin2751 = io.scalarInput("argin2751", dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT) );
// DFEVar Sym(2753) = int2752.cast(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT))
DFEVar void2992_done = dfeBool().newInstance(this);
DFEVar metapipe2986_done = dfeBool().newInstance(this);
DFEVar metapipe2986_en = dfeBool().newInstance(this);
DFEVar void2990_done = dfeBool().newInstance(this);
DFEVar void2990_en = dfeBool().newInstance(this);
/* Reg_new { */
DelayLib reg2765_1_lib = new DelayLib(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0));
DFEVar reg2765_1 = reg2765_1_lib.read();
DFEVar reg2765_1_delayed = dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).newInstance(this);
/* Reg_new } */
DFEVar void2888_done = dfeBool().newInstance(this);
DFEVar void2888_en = dfeBool().newInstance(this);
DFEVar void2976_done = dfeBool().newInstance(this);
DFEVar void2976_en = dfeBool().newInstance(this);
DFEVar void2984_done = dfeBool().newInstance(this);
DFEVar void2984_en = dfeBool().newInstance(this);
/* Bram_new { */
NBufKernelLib BRAM2771_0 = new NBufKernelLib(this, "BRAM2771_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset(32,0, SignMode.UNSIGNED), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2772_0 = new NBufKernelLib(this, "BRAM2772_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset(32,0, SignMode.UNSIGNED), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2773_0 = new NBufKernelLib(this, "BRAM2773_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset(32,0, SignMode.UNSIGNED), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2774_0 = new NBufKernelLib(this, "BRAM2774_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset(32,0, SignMode.UNSIGNED), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2775_0 = new NBufKernelLib(this, "BRAM2775_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2776_0 = new NBufKernelLib(this, "BRAM2776_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2777_0 = new NBufKernelLib(this, "BRAM2777_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
/* Bram_new { */
NBufKernelLib BRAM2778_0 = new NBufKernelLib(this, "BRAM2778_0",
                  96, 1, /*size0, size1*/
                  dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 2, 1, 2, /*banks, strides, depth*/
                  true, /*all_same access (row_major or col_major)*/
                  new boolean[] {true}, /*rowmajor read?*/
                  2, 2 /*writepar, readpar*/);
/* } Bram_new */
DFEVar void2832_done = dfeBool().newInstance(this);
DFEVar void2832_en = dfeBool().newInstance(this);
DFEVar void2886_done = dfeBool().newInstance(this);
DFEVar void2886_en = dfeBool().newInstance(this);
DFEVar void2791_done = dfeBool().newInstance(this);
DFEVar void2791_en = dfeBool().newInstance(this);
DFEVar void2804_done = dfeBool().newInstance(this);
DFEVar void2804_en = dfeBool().newInstance(this);
DFEVar void2817_done = dfeBool().newInstance(this);
DFEVar void2817_en = dfeBool().newInstance(this);
DFEVar void2830_done = dfeBool().newInstance(this);
DFEVar void2830_en = dfeBool().newInstance(this);
DFEVar void2780_done = dfeBool().newInstance(this);
DFEVar void2780_en = dfeBool().newInstance(this);
DFEVar pipe2789_done = dfeBool().newInstance(this);
DFEVar pipe2789_en = dfeBool().newInstance(this);
DFEVar FIFO2779_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2789_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2782_done = dfeBool().newInstance(this);
DFEVar void2793_done = dfeBool().newInstance(this);
DFEVar void2793_en = dfeBool().newInstance(this);
DFEVar pipe2802_done = dfeBool().newInstance(this);
DFEVar pipe2802_en = dfeBool().newInstance(this);
DFEVar FIFO2792_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2802_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2795_done = dfeBool().newInstance(this);
DFEVar void2806_done = dfeBool().newInstance(this);
DFEVar void2806_en = dfeBool().newInstance(this);
DFEVar pipe2815_done = dfeBool().newInstance(this);
DFEVar pipe2815_en = dfeBool().newInstance(this);
DFEVar FIFO2805_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2815_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2808_done = dfeBool().newInstance(this);
DFEVar void2819_done = dfeBool().newInstance(this);
DFEVar void2819_en = dfeBool().newInstance(this);
DFEVar pipe2828_done = dfeBool().newInstance(this);
DFEVar pipe2828_en = dfeBool().newInstance(this);
DFEVar FIFO2818_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2828_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2821_done = dfeBool().newInstance(this);
DFEVar void2845_done = dfeBool().newInstance(this);
DFEVar void2845_en = dfeBool().newInstance(this);
DFEVar void2858_done = dfeBool().newInstance(this);
DFEVar void2858_en = dfeBool().newInstance(this);
DFEVar void2871_done = dfeBool().newInstance(this);
DFEVar void2871_en = dfeBool().newInstance(this);
DFEVar void2884_done = dfeBool().newInstance(this);
DFEVar void2884_en = dfeBool().newInstance(this);
DFEVar void2834_done = dfeBool().newInstance(this);
DFEVar void2834_en = dfeBool().newInstance(this);
DFEVar pipe2843_done = dfeBool().newInstance(this);
DFEVar pipe2843_en = dfeBool().newInstance(this);
DFEVar FIFO2833_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2843_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2836_done = dfeBool().newInstance(this);
DFEVar void2847_done = dfeBool().newInstance(this);
DFEVar void2847_en = dfeBool().newInstance(this);
DFEVar pipe2856_done = dfeBool().newInstance(this);
DFEVar pipe2856_en = dfeBool().newInstance(this);
DFEVar FIFO2846_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2856_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2849_done = dfeBool().newInstance(this);
DFEVar void2860_done = dfeBool().newInstance(this);
DFEVar void2860_en = dfeBool().newInstance(this);
DFEVar pipe2869_done = dfeBool().newInstance(this);
DFEVar pipe2869_en = dfeBool().newInstance(this);
DFEVar FIFO2859_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2869_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2862_done = dfeBool().newInstance(this);
DFEVar void2873_done = dfeBool().newInstance(this);
DFEVar void2873_en = dfeBool().newInstance(this);
DFEVar pipe2882_done = dfeBool().newInstance(this);
DFEVar pipe2882_en = dfeBool().newInstance(this);
DFEVar FIFO2872_trashEn = dfeBool().newInstance(this); // Send stream to trash for when read is not burst-aligned
DFEVar pipe2882_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2875_done = dfeBool().newInstance(this);
/* Reg_new { */
NBufReg reg2889_1_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg2889_1", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
/* Reg_new { */
NBufReg reg2890_1_lib = new NBufReg(this, dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), "reg2890_1", 1, new Bits(dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT).getTotalBits(), 0), 2); //2 depth
/* Reg_new } */
DFEVar pipe2934_done = dfeBool().newInstance(this);
DFEVar pipe2934_en = dfeBool().newInstance(this);
DFEVar pipe2974_done = dfeBool().newInstance(this);
DFEVar pipe2974_en = dfeBool().newInstance(this);
DFEVar pipe2934_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2893_done = dfeBool().newInstance(this);
DFEVar pipe2974_rst_done = dfeBool().newInstance(this);
DFEVar CounterChain2894_done = dfeBool().newInstance(this);
DFEVar void2984_rst_done = dfeBool().newInstance(this);
DFEVar void2990_rst_done = dfeBool().newInstance(this);
// Emit argin reads
DFEVar FixedPoint2755 = argin2751; // reg read
DFEVar FixedPoint2766 = argin2751; // reg read
DFEVar const24_FixedPoint303 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 24 ); 
DFEVar const0_FixedPoint195 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 0 ); 
DFEVar const65_FixedPoint7 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 65 ); 
DFEVar const512_FixedPoint229 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 512 ); 
DFEVar const96_FixedPoint1778 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 96 ); 
DFEVar const1_FixedPoint216 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 1 ); 
DFEVar const9999_FixedPoint300 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 9999 ); 
DFEVar const0_FixedPoint221 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 0 ); 
DFEVar const9999_FixedPoint295 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 9999 ); 
DFEVar const100000_FixedPoint102 = constant.var( dfeFixOffset( 32,0, SignMode.TWOSCOMPLEMENT), 100000 ); 
DFEVar const25_FixedPoint54 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 25 ); 
DFEVar const20_FixedPoint5 = constant.var( dfeFixOffset(32,0, SignMode.UNSIGNED), 20 ); 
}
